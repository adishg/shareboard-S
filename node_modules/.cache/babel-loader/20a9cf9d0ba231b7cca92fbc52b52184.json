{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/ContextMenu.tsx\";\nimport React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport clsx from \"clsx\";\nimport { Popover } from \"./Popover\";\nimport \"./ContextMenu.scss\";\nimport { getShortcutFromShortcutName } from \"../actions/shortcuts\";\n\nconst ContextMenu = ({\n  options,\n  onCloseRequest,\n  top,\n  left\n}) => {\n  var _document$querySelect;\n\n  const isDarkTheme = !!((_document$querySelect = document.querySelector(\".excalidraw\")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.classList.contains(\"Appearance_dark\"));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: clsx(\"excalidraw\", {\n      \"Appearance_dark Appearance_dark-background-none\": isDarkTheme\n    }),\n    children: /*#__PURE__*/_jsxDEV(Popover, {\n      onCloseRequest: onCloseRequest,\n      top: top,\n      left: left,\n      fitInViewport: true,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"context-menu\",\n        onContextMenu: event => event.preventDefault(),\n        children: options.map(({\n          action,\n          checked,\n          shortcutName,\n          label\n        }, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          \"data-testid\": shortcutName,\n          onClick: onCloseRequest,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `context-menu-option \n                ${shortcutName === \"delete\" ? \"dangerous\" : \"\"}\n                ${checked ? \"checkmark\" : \"\"}`,\n            onClick: action,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"context-menu-option__label\",\n              children: label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"kbd\", {\n              className: \"context-menu-option__shortcut\",\n              children: shortcutName ? getShortcutFromShortcutName(shortcutName) : \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ContextMenu;\nlet contextMenuNode;\n\nconst getContextMenuNode = () => {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return contextMenuNode = div;\n};\n\nconst handleClose = () => {\n  unmountComponentAtNode(getContextMenuNode());\n};\n\nexport default {\n  push(params) {\n    const options = Array.of();\n    params.options.forEach(option => {\n      if (option) {\n        options.push(option);\n      }\n    });\n\n    if (options.length) {\n      render( /*#__PURE__*/_jsxDEV(ContextMenu, {\n        top: params.top,\n        left: params.left,\n        options: options,\n        onCloseRequest: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), getContextMenuNode());\n    }\n  }\n\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextMenu\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/ContextMenu.tsx"],"names":["React","render","unmountComponentAtNode","clsx","Popover","getShortcutFromShortcutName","ContextMenu","options","onCloseRequest","top","left","isDarkTheme","document","querySelector","classList","contains","event","preventDefault","map","action","checked","shortcutName","label","idx","contextMenuNode","getContextMenuNode","div","createElement","body","appendChild","handleClose","push","params","Array","of","forEach","option","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport clsx from \"clsx\";\nimport { Popover } from \"./Popover\";\n\nimport \"./ContextMenu.scss\";\nimport {\n  getShortcutFromShortcutName,\n  ShortcutName,\n} from \"../actions/shortcuts\";\n\ntype ContextMenuOption = {\n  checked?: boolean;\n  shortcutName: ShortcutName;\n  label: string;\n  action(): void;\n};\n\ntype Props = {\n  options: ContextMenuOption[];\n  onCloseRequest?(): void;\n  top: number;\n  left: number;\n};\n\nconst ContextMenu = ({ options, onCloseRequest, top, left }: Props) => {\n  const isDarkTheme = !!document\n    .querySelector(\".excalidraw\")\n    ?.classList.contains(\"Appearance_dark\");\n  return (\n    <div\n      className={clsx(\"excalidraw\", {\n        \"Appearance_dark Appearance_dark-background-none\": isDarkTheme,\n      })}\n    >\n      <Popover\n        onCloseRequest={onCloseRequest}\n        top={top}\n        left={left}\n        fitInViewport={true}\n      >\n        <ul\n          className=\"context-menu\"\n          onContextMenu={(event) => event.preventDefault()}\n        >\n          {options.map(({ action, checked, shortcutName, label }, idx) => (\n            <li data-testid={shortcutName} key={idx} onClick={onCloseRequest}>\n              <button\n                className={`context-menu-option \n                ${shortcutName === \"delete\" ? \"dangerous\" : \"\"}\n                ${checked ? \"checkmark\" : \"\"}`}\n                onClick={action}\n              >\n                <div className=\"context-menu-option__label\">{label}</div>\n                <kbd className=\"context-menu-option__shortcut\">\n                  {shortcutName\n                    ? getShortcutFromShortcutName(shortcutName)\n                    : \"\"}\n                </kbd>\n              </button>\n            </li>\n          ))}\n        </ul>\n      </Popover>\n    </div>\n  );\n};\n\nlet contextMenuNode: HTMLDivElement;\nconst getContextMenuNode = (): HTMLDivElement => {\n  if (contextMenuNode) {\n    return contextMenuNode;\n  }\n  const div = document.createElement(\"div\");\n  document.body.appendChild(div);\n  return (contextMenuNode = div);\n};\n\ntype ContextMenuParams = {\n  options: (ContextMenuOption | false | null | undefined)[];\n  top: number;\n  left: number;\n};\n\nconst handleClose = () => {\n  unmountComponentAtNode(getContextMenuNode());\n};\n\nexport default {\n  push(params: ContextMenuParams) {\n    const options = Array.of<ContextMenuOption>();\n    params.options.forEach((option) => {\n      if (option) {\n        options.push(option);\n      }\n    });\n    if (options.length) {\n      render(\n        <ContextMenu\n          top={params.top}\n          left={params.left}\n          options={options}\n          onCloseRequest={handleClose}\n        />,\n        getContextMenuNode(),\n      );\n    }\n  },\n};\n"]},"metadata":{},"sourceType":"module"}