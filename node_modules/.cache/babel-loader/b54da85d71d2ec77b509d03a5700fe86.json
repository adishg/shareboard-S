{"ast":null,"code":"import fallbackLangData from \"./locales/en.json\";\nimport percentages from \"./locales/percentages.json\";\nconst COMPLETION_THRESHOLD = 85;\nexport const defaultLang = {\n  code: \"en\",\n  label: \"English\"\n};\nconst allLanguages = [{\n  code: \"ar-SA\",\n  label: \"العربية\",\n  rtl: true\n}, {\n  code: \"bg-BG\",\n  label: \"Български\"\n}, {\n  code: \"ca-ES\",\n  label: \"Català\"\n}, {\n  code: \"de-DE\",\n  label: \"Deutsch\"\n}, {\n  code: \"el-GR\",\n  label: \"Ελληνικά\"\n}, {\n  code: \"es-ES\",\n  label: \"Español\"\n}, {\n  code: \"fa-IR\",\n  label: \"فارسی\",\n  rtl: true\n}, {\n  code: \"fi-FI\",\n  label: \"Suomi\"\n}, {\n  code: \"fr-FR\",\n  label: \"Français\"\n}, {\n  code: \"he-IL\",\n  label: \"עברית\",\n  rtl: true\n}, {\n  code: \"hi-IN\",\n  label: \"हिन्दी\"\n}, {\n  code: \"hu-HU\",\n  label: \"Magyar\"\n}, {\n  code: \"id-ID\",\n  label: \"Bahasa Indonesia\"\n}, {\n  code: \"it-IT\",\n  label: \"Italiano\"\n}, {\n  code: \"ja-JP\",\n  label: \"日本語\"\n}, {\n  code: \"ko-KR\",\n  label: \"한국어\"\n}, {\n  code: \"my-MM\",\n  label: \"Burmese\"\n}, {\n  code: \"nb-NO\",\n  label: \"Norsk bokmål\"\n}, {\n  code: \"nl-NL\",\n  label: \"Nederlands\"\n}, {\n  code: \"nn-NO\",\n  label: \"Norsk nynorsk\"\n}, {\n  code: \"pa-IN\",\n  label: \"ਪੰਜਾਬੀ\"\n}, {\n  code: \"pl-PL\",\n  label: \"Polski\"\n}, {\n  code: \"pt-BR\",\n  label: \"Português Brasileiro\"\n}, {\n  code: \"pt-PT\",\n  label: \"Português\"\n}, {\n  code: \"ro-RO\",\n  label: \"Română\"\n}, {\n  code: \"ru-RU\",\n  label: \"Русский\"\n}, {\n  code: \"sk-SK\",\n  label: \"Slovenčina\"\n}, {\n  code: \"sv-SE\",\n  label: \"Svenska\"\n}, {\n  code: \"tr-TR\",\n  label: \"Türkçe\"\n}, {\n  code: \"uk-UA\",\n  label: \"Українська\"\n}, {\n  code: \"zh-CN\",\n  label: \"简体中文\"\n}, {\n  code: \"zh-TW\",\n  label: \"繁體中文\"\n}].concat([defaultLang]);\nexport const languages = allLanguages.sort((left, right) => left.label > right.label ? 1 : -1).filter(lang => percentages[lang.code] >= COMPLETION_THRESHOLD);\nlet currentLang = defaultLang;\nlet currentLangData = {};\nexport const setLanguage = async lang => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n  currentLangData = await import(\n  /* webpackChunkName: \"i18n-[request]\" */\n  `./locales/${currentLang.code}.json`);\n};\nexport const setLanguageFirstTime = async lang => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n  currentLangData = await import(\n  /* webpackChunkName: \"i18n-[request]\" */\n  `./locales/${currentLang.code}.json`);\n};\nexport const getLanguage = () => currentLang;\n\nconst findPartsForData = (data, parts) => {\n  for (let index = 0; index < parts.length; ++index) {\n    const part = parts[index];\n\n    if (data[part] === undefined) {\n      return undefined;\n    }\n\n    data = data[part];\n  }\n\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n\n  return data;\n};\n\nexport const t = (path, replacement) => {\n  const parts = path.split(\".\");\n  let translation = findPartsForData(currentLangData, parts) || findPartsForData(fallbackLangData, parts);\n\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (const key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n\n  return translation;\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/i18n.ts"],"names":["fallbackLangData","percentages","COMPLETION_THRESHOLD","defaultLang","code","label","allLanguages","rtl","concat","languages","sort","left","right","filter","lang","currentLang","currentLangData","setLanguage","document","documentElement","dir","setLanguageFirstTime","getLanguage","findPartsForData","data","parts","index","length","part","undefined","t","path","replacement","split","translation","Error","key","replace"],"mappings":"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","sourcesContent":["import fallbackLangData from \"./locales/en.json\";\nimport percentages from \"./locales/percentages.json\";\n\nconst COMPLETION_THRESHOLD = 85;\n\nexport interface Language {\n  code: string;\n  label: string;\n  rtl?: boolean;\n}\n\nexport const defaultLang = { code: \"en\", label: \"English\" };\n\nconst allLanguages: Language[] = [\n  { code: \"ar-SA\", label: \"العربية\", rtl: true },\n  { code: \"bg-BG\", label: \"Български\" },\n  { code: \"ca-ES\", label: \"Català\" },\n  { code: \"de-DE\", label: \"Deutsch\" },\n  { code: \"el-GR\", label: \"Ελληνικά\" },\n  { code: \"es-ES\", label: \"Español\" },\n  { code: \"fa-IR\", label: \"فارسی\", rtl: true },\n  { code: \"fi-FI\", label: \"Suomi\" },\n  { code: \"fr-FR\", label: \"Français\" },\n  { code: \"he-IL\", label: \"עברית\", rtl: true },\n  { code: \"hi-IN\", label: \"हिन्दी\" },\n  { code: \"hu-HU\", label: \"Magyar\" },\n  { code: \"id-ID\", label: \"Bahasa Indonesia\" },\n  { code: \"it-IT\", label: \"Italiano\" },\n  { code: \"ja-JP\", label: \"日本語\" },\n  { code: \"ko-KR\", label: \"한국어\" },\n  { code: \"my-MM\", label: \"Burmese\" },\n  { code: \"nb-NO\", label: \"Norsk bokmål\" },\n  { code: \"nl-NL\", label: \"Nederlands\" },\n  { code: \"nn-NO\", label: \"Norsk nynorsk\" },\n  { code: \"pa-IN\", label: \"ਪੰਜਾਬੀ\" },\n  { code: \"pl-PL\", label: \"Polski\" },\n  { code: \"pt-BR\", label: \"Português Brasileiro\" },\n  { code: \"pt-PT\", label: \"Português\" },\n  { code: \"ro-RO\", label: \"Română\" },\n  { code: \"ru-RU\", label: \"Русский\" },\n  { code: \"sk-SK\", label: \"Slovenčina\" },\n  { code: \"sv-SE\", label: \"Svenska\" },\n  { code: \"tr-TR\", label: \"Türkçe\" },\n  { code: \"uk-UA\", label: \"Українська\" },\n  { code: \"zh-CN\", label: \"简体中文\" },\n  { code: \"zh-TW\", label: \"繁體中文\" },\n].concat([defaultLang]);\n\nexport const languages: Language[] = allLanguages\n  .sort((left, right) => (left.label > right.label ? 1 : -1))\n  .filter(\n    (lang) =>\n      (percentages as Record<string, number>)[lang.code] >=\n      COMPLETION_THRESHOLD,\n  );\n\nlet currentLang: Language = defaultLang;\nlet currentLangData = {};\n\nexport const setLanguage = async (lang: Language) => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n\n  currentLangData = await import(\n    /* webpackChunkName: \"i18n-[request]\" */ `./locales/${currentLang.code}.json`\n  );\n};\n\nexport const setLanguageFirstTime = async (lang: Language) => {\n  currentLang = lang;\n  document.documentElement.dir = currentLang.rtl ? \"rtl\" : \"ltr\";\n\n  currentLangData = await import(\n    /* webpackChunkName: \"i18n-[request]\" */ `./locales/${currentLang.code}.json`\n  );\n};\n\nexport const getLanguage = () => currentLang;\n\nconst findPartsForData = (data: any, parts: string[]) => {\n  for (let index = 0; index < parts.length; ++index) {\n    const part = parts[index];\n    if (data[part] === undefined) {\n      return undefined;\n    }\n    data = data[part];\n  }\n  if (typeof data !== \"string\") {\n    return undefined;\n  }\n  return data;\n};\n\nexport const t = (path: string, replacement?: { [key: string]: string }) => {\n  const parts = path.split(\".\");\n  let translation =\n    findPartsForData(currentLangData, parts) ||\n    findPartsForData(fallbackLangData, parts);\n  if (translation === undefined) {\n    throw new Error(`Can't find translation for ${path}`);\n  }\n\n  if (replacement) {\n    for (const key in replacement) {\n      translation = translation.replace(`{{${key}}}`, replacement[key]);\n    }\n  }\n  return translation;\n};\n"]},"metadata":{},"sourceType":"module"}