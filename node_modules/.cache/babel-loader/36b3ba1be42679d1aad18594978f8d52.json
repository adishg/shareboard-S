{"ast":null,"code":"/**\n * This is a 2D Projective Geometric Algebra implementation.\n *\n * For wider context on geometric algebra visit see https://bivector.net.\n *\n * For this specific algebra see cheatsheet https://bivector.net/2DPGA.pdf.\n *\n * Converted from generator written by enki, with a ton of added on top.\n *\n * This library uses 8-vectors to represent points, directions and lines\n * in 2D space.\n *\n * An array `[a, b, c, d, e, f, g, h]` represents a n(8)vector:\n *   a + b*e0 + c*e1 + d*e2 + e*e01 + f*e20 + g*e12 + h*e012\n *\n * See GAPoint, GALine, GADirection and GATransform modules for common\n * operations.\n */\nexport const point = (x, y) => [0, 0, 0, 0, y, x, 1, 0];\nexport const origin = () => [0, 0, 0, 0, 0, 0, 1, 0];\nexport const direction = (x, y) => {\n  const norm = Math.hypot(x, y); // same as `inorm(direction(x, y))`\n\n  return [0, 0, 0, 0, y / norm, x / norm, 0, 0];\n};\nexport const offset = (x, y) => [0, 0, 0, 0, y, x, 0, 0]; /// This is the \"implementation\" part of the library\n\n// These are labels for what each number in an nvector represents\nconst NVECTOR_BASE = [\"1\", \"e0\", \"e1\", \"e2\", \"e01\", \"e20\", \"e12\", \"e012\"]; // Used to represent points, lines and transformations\n\nexport const nvector = (value = 0, index = 0) => {\n  const result = [0, 0, 0, 0, 0, 0, 0, 0];\n\n  if (index < 0 || index > 7) {\n    throw new Error(`Expected \\`index\\` betwen 0 and 7, got \\`${index}\\``);\n  }\n\n  if (value !== 0) {\n    result[index] = value;\n  }\n\n  return result;\n};\nconst STRING_EPSILON = 0.000001;\nexport const toString = nvector => {\n  const result = nvector.map((value, index) => Math.abs(value) > STRING_EPSILON ? value.toFixed(7).replace(/(\\.|0+)$/, \"\") + (index > 0 ? NVECTOR_BASE[index] : \"\") : null).filter(representation => representation != null).join(\" + \");\n  return result === \"\" ? \"0\" : result;\n}; // Reverse the order of the basis blades.\n\nexport const reverse = nvector => [nvector[0], nvector[1], nvector[2], nvector[3], -nvector[4], -nvector[5], -nvector[6], -nvector[7]]; // Poincare duality operator.\n\nexport const dual = nvector => [nvector[7], nvector[6], nvector[5], nvector[4], nvector[3], nvector[2], nvector[1], nvector[0]]; // Clifford Conjugation\n\nexport const conjugate = nvector => [nvector[0], -nvector[1], -nvector[2], -nvector[3], -nvector[4], -nvector[5], -nvector[6], nvector[7]]; // Main involution\n\nexport const involute = nvector => [nvector[0], -nvector[1], -nvector[2], -nvector[3], nvector[4], nvector[5], nvector[6], -nvector[7]]; // Multivector addition\n\nexport const add = (a, b) => {\n  if (isNumber(b)) {\n    return [a[0] + b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3], a[4] + b[4], a[5] + b[5], a[6] + b[6], a[7] + b[7]];\n}; // Multivector subtraction\n\nexport const sub = (a, b) => {\n  if (isNumber(b)) {\n    return [a[0] - b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n\n  return [a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3], a[4] - b[4], a[5] - b[5], a[6] - b[6], a[7] - b[7]];\n}; // The geometric product.\n\nexport const mul = (a, b) => {\n  if (isNumber(b)) {\n    return [a[0] * b, a[1] * b, a[2] * b, a[3] * b, a[4] * b, a[5] * b, a[6] * b, a[7] * b];\n  }\n\n  return [mulScalar(a, b), b[1] * a[0] + b[0] * a[1] - b[4] * a[2] + b[5] * a[3] + b[2] * a[4] - b[3] * a[5] - b[7] * a[6] - b[6] * a[7], b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6], b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6], b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[7] * a[3] + b[0] * a[4] + b[6] * a[5] - b[5] * a[6] + b[3] * a[7], b[5] * a[0] - b[3] * a[1] + b[7] * a[2] + b[1] * a[3] - b[6] * a[4] + b[0] * a[5] + b[4] * a[6] + b[2] * a[7], b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6], b[7] * a[0] + b[6] * a[1] + b[5] * a[2] + b[4] * a[3] + b[3] * a[4] + b[2] * a[5] + b[1] * a[6] + b[0] * a[7]];\n};\nexport const mulScalar = (a, b) => b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6]; // The outer/exterior/wedge product.\n\nexport const meet = (a, b) => [b[0] * a[0], b[1] * a[0] + b[0] * a[1], b[2] * a[0] + b[0] * a[2], b[3] * a[0] + b[0] * a[3], b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[0] * a[4], b[5] * a[0] - b[3] * a[1] + b[1] * a[3] + b[0] * a[5], b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6], b[7] * a[0] + b[6] * a[1] + b[5] * a[2] + b[4] * a[3] + b[3] * a[4] + b[2] * a[5] + b[1] * a[6]]; // The regressive product.\n\nexport const join = (a, b) => [joinScalar(a, b), a[1] * b[7] + a[4] * b[5] - a[5] * b[4] + a[7] * b[1], a[2] * b[7] - a[4] * b[6] + a[6] * b[4] + a[7] * b[2], a[3] * b[7] + a[5] * b[6] - a[6] * b[5] + a[7] * b[3], a[4] * b[7] + a[7] * b[4], a[5] * b[7] + a[7] * b[5], a[6] * b[7] + a[7] * b[6], a[7] * b[7]];\nexport const joinScalar = (a, b) => a[0] * b[7] + a[1] * b[6] + a[2] * b[5] + a[3] * b[4] + a[4] * b[3] + a[5] * b[2] + a[6] * b[1] + a[7] * b[0]; // The inner product.\n\nexport const dot = (a, b) => [b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6], b[1] * a[0] + b[0] * a[1] - b[4] * a[2] + b[5] * a[3] + b[2] * a[4] - b[3] * a[5] - b[7] * a[6] - b[6] * a[7], b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6], b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6], b[4] * a[0] + b[7] * a[3] + b[0] * a[4] + b[3] * a[7], b[5] * a[0] + b[7] * a[2] + b[0] * a[5] + b[2] * a[7], b[6] * a[0] + b[0] * a[6], b[7] * a[0] + b[0] * a[7]];\nexport const norm = a => Math.sqrt(Math.abs(a[0] * a[0] - a[2] * a[2] - a[3] * a[3] + a[6] * a[6]));\nexport const inorm = a => Math.sqrt(Math.abs(a[7] * a[7] - a[5] * a[5] - a[4] * a[4] + a[1] * a[1]));\nexport const normalized = a => {\n  const n = norm(a);\n\n  if (n === 0 || n === 1) {\n    return a;\n  }\n\n  const sign = a[6] < 0 ? -1 : 1;\n  return mul(a, sign / n);\n};\nexport const inormalized = a => {\n  const n = inorm(a);\n\n  if (n === 0 || n === 1) {\n    return a;\n  }\n\n  return mul(a, 1 / n);\n};\n\nconst isNumber = a => typeof a === \"number\";\n\nexport const E0 = nvector(1, 1);\nexport const E1 = nvector(1, 2);\nexport const E2 = nvector(1, 3);\nexport const E01 = nvector(1, 4);\nexport const E20 = nvector(1, 5);\nexport const E12 = nvector(1, 6);\nexport const E012 = nvector(1, 7);\nexport const I = E012;","map":{"version":3,"sources":["/var/www/html/excalidraw/src/ga.ts"],"names":["point","x","y","origin","direction","norm","Math","hypot","offset","NVECTOR_BASE","nvector","value","index","result","Error","STRING_EPSILON","toString","map","abs","toFixed","replace","filter","representation","join","reverse","dual","conjugate","involute","add","a","b","isNumber","sub","mul","mulScalar","meet","joinScalar","dot","sqrt","inorm","normalized","n","sign","inormalized","E0","E1","E2","E01","E20","E12","E012","I"],"mappings":"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","sourcesContent":["/**\n * This is a 2D Projective Geometric Algebra implementation.\n *\n * For wider context on geometric algebra visit see https://bivector.net.\n *\n * For this specific algebra see cheatsheet https://bivector.net/2DPGA.pdf.\n *\n * Converted from generator written by enki, with a ton of added on top.\n *\n * This library uses 8-vectors to represent points, directions and lines\n * in 2D space.\n *\n * An array `[a, b, c, d, e, f, g, h]` represents a n(8)vector:\n *   a + b*e0 + c*e1 + d*e2 + e*e01 + f*e20 + g*e12 + h*e012\n *\n * See GAPoint, GALine, GADirection and GATransform modules for common\n * operations.\n */\n\nexport type Point = NVector;\nexport type Direction = NVector;\nexport type Line = NVector;\nexport type Transform = NVector;\n\nexport const point = (x: number, y: number): Point => [0, 0, 0, 0, y, x, 1, 0];\n\nexport const origin = (): Point => [0, 0, 0, 0, 0, 0, 1, 0];\n\nexport const direction = (x: number, y: number): Direction => {\n  const norm = Math.hypot(x, y); // same as `inorm(direction(x, y))`\n  return [0, 0, 0, 0, y / norm, x / norm, 0, 0];\n};\n\nexport const offset = (x: number, y: number): Direction => [\n  0,\n  0,\n  0,\n  0,\n  y,\n  x,\n  0,\n  0,\n];\n\n/// This is the \"implementation\" part of the library\n\ntype NVector = readonly [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n];\n\n// These are labels for what each number in an nvector represents\nconst NVECTOR_BASE = [\"1\", \"e0\", \"e1\", \"e2\", \"e01\", \"e20\", \"e12\", \"e012\"];\n\n// Used to represent points, lines and transformations\nexport const nvector = (value: number = 0, index: number = 0): NVector => {\n  const result = [0, 0, 0, 0, 0, 0, 0, 0];\n  if (index < 0 || index > 7) {\n    throw new Error(`Expected \\`index\\` betwen 0 and 7, got \\`${index}\\``);\n  }\n  if (value !== 0) {\n    result[index] = value;\n  }\n  return (result as unknown) as NVector;\n};\n\nconst STRING_EPSILON = 0.000001;\nexport const toString = (nvector: NVector): string => {\n  const result = nvector\n    .map((value, index) =>\n      Math.abs(value) > STRING_EPSILON\n        ? value.toFixed(7).replace(/(\\.|0+)$/, \"\") +\n          (index > 0 ? NVECTOR_BASE[index] : \"\")\n        : null,\n    )\n    .filter((representation) => representation != null)\n    .join(\" + \");\n  return result === \"\" ? \"0\" : result;\n};\n\n// Reverse the order of the basis blades.\nexport const reverse = (nvector: NVector): NVector => [\n  nvector[0],\n  nvector[1],\n  nvector[2],\n  nvector[3],\n  -nvector[4],\n  -nvector[5],\n  -nvector[6],\n  -nvector[7],\n];\n\n// Poincare duality operator.\nexport const dual = (nvector: NVector): NVector => [\n  nvector[7],\n  nvector[6],\n  nvector[5],\n  nvector[4],\n  nvector[3],\n  nvector[2],\n  nvector[1],\n  nvector[0],\n];\n\n// Clifford Conjugation\nexport const conjugate = (nvector: NVector): NVector => [\n  nvector[0],\n  -nvector[1],\n  -nvector[2],\n  -nvector[3],\n  -nvector[4],\n  -nvector[5],\n  -nvector[6],\n  nvector[7],\n];\n\n// Main involution\nexport const involute = (nvector: NVector): NVector => [\n  nvector[0],\n  -nvector[1],\n  -nvector[2],\n  -nvector[3],\n  nvector[4],\n  nvector[5],\n  nvector[6],\n  -nvector[7],\n];\n\n// Multivector addition\nexport const add = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [a[0] + b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n  return [\n    a[0] + b[0],\n    a[1] + b[1],\n    a[2] + b[2],\n    a[3] + b[3],\n    a[4] + b[4],\n    a[5] + b[5],\n    a[6] + b[6],\n    a[7] + b[7],\n  ];\n};\n\n// Multivector subtraction\nexport const sub = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [a[0] - b, a[1], a[2], a[3], a[4], a[5], a[6], a[7]];\n  }\n  return [\n    a[0] - b[0],\n    a[1] - b[1],\n    a[2] - b[2],\n    a[3] - b[3],\n    a[4] - b[4],\n    a[5] - b[5],\n    a[6] - b[6],\n    a[7] - b[7],\n  ];\n};\n\n// The geometric product.\nexport const mul = (a: NVector, b: NVector | number): NVector => {\n  if (isNumber(b)) {\n    return [\n      a[0] * b,\n      a[1] * b,\n      a[2] * b,\n      a[3] * b,\n      a[4] * b,\n      a[5] * b,\n      a[6] * b,\n      a[7] * b,\n    ];\n  }\n  return [\n    mulScalar(a, b),\n    b[1] * a[0] +\n      b[0] * a[1] -\n      b[4] * a[2] +\n      b[5] * a[3] +\n      b[2] * a[4] -\n      b[3] * a[5] -\n      b[7] * a[6] -\n      b[6] * a[7],\n    b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],\n    b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],\n    b[4] * a[0] +\n      b[2] * a[1] -\n      b[1] * a[2] +\n      b[7] * a[3] +\n      b[0] * a[4] +\n      b[6] * a[5] -\n      b[5] * a[6] +\n      b[3] * a[7],\n    b[5] * a[0] -\n      b[3] * a[1] +\n      b[7] * a[2] +\n      b[1] * a[3] -\n      b[6] * a[4] +\n      b[0] * a[5] +\n      b[4] * a[6] +\n      b[2] * a[7],\n    b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],\n    b[7] * a[0] +\n      b[6] * a[1] +\n      b[5] * a[2] +\n      b[4] * a[3] +\n      b[3] * a[4] +\n      b[2] * a[5] +\n      b[1] * a[6] +\n      b[0] * a[7],\n  ];\n};\n\nexport const mulScalar = (a: NVector, b: NVector): number =>\n  b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6];\n\n// The outer/exterior/wedge product.\nexport const meet = (a: NVector, b: NVector): NVector => [\n  b[0] * a[0],\n  b[1] * a[0] + b[0] * a[1],\n  b[2] * a[0] + b[0] * a[2],\n  b[3] * a[0] + b[0] * a[3],\n  b[4] * a[0] + b[2] * a[1] - b[1] * a[2] + b[0] * a[4],\n  b[5] * a[0] - b[3] * a[1] + b[1] * a[3] + b[0] * a[5],\n  b[6] * a[0] + b[3] * a[2] - b[2] * a[3] + b[0] * a[6],\n  b[7] * a[0] +\n    b[6] * a[1] +\n    b[5] * a[2] +\n    b[4] * a[3] +\n    b[3] * a[4] +\n    b[2] * a[5] +\n    b[1] * a[6],\n];\n\n// The regressive product.\nexport const join = (a: NVector, b: NVector): NVector => [\n  joinScalar(a, b),\n  a[1] * b[7] + a[4] * b[5] - a[5] * b[4] + a[7] * b[1],\n  a[2] * b[7] - a[4] * b[6] + a[6] * b[4] + a[7] * b[2],\n  a[3] * b[7] + a[5] * b[6] - a[6] * b[5] + a[7] * b[3],\n  a[4] * b[7] + a[7] * b[4],\n  a[5] * b[7] + a[7] * b[5],\n  a[6] * b[7] + a[7] * b[6],\n  a[7] * b[7],\n];\n\nexport const joinScalar = (a: NVector, b: NVector): number =>\n  a[0] * b[7] +\n  a[1] * b[6] +\n  a[2] * b[5] +\n  a[3] * b[4] +\n  a[4] * b[3] +\n  a[5] * b[2] +\n  a[6] * b[1] +\n  a[7] * b[0];\n\n// The inner product.\nexport const dot = (a: NVector, b: NVector): NVector => [\n  b[0] * a[0] + b[2] * a[2] + b[3] * a[3] - b[6] * a[6],\n  b[1] * a[0] +\n    b[0] * a[1] -\n    b[4] * a[2] +\n    b[5] * a[3] +\n    b[2] * a[4] -\n    b[3] * a[5] -\n    b[7] * a[6] -\n    b[6] * a[7],\n  b[2] * a[0] + b[0] * a[2] - b[6] * a[3] + b[3] * a[6],\n  b[3] * a[0] + b[6] * a[2] + b[0] * a[3] - b[2] * a[6],\n  b[4] * a[0] + b[7] * a[3] + b[0] * a[4] + b[3] * a[7],\n  b[5] * a[0] + b[7] * a[2] + b[0] * a[5] + b[2] * a[7],\n  b[6] * a[0] + b[0] * a[6],\n  b[7] * a[0] + b[0] * a[7],\n];\n\nexport const norm = (a: NVector): number =>\n  Math.sqrt(Math.abs(a[0] * a[0] - a[2] * a[2] - a[3] * a[3] + a[6] * a[6]));\n\nexport const inorm = (a: NVector): number =>\n  Math.sqrt(Math.abs(a[7] * a[7] - a[5] * a[5] - a[4] * a[4] + a[1] * a[1]));\n\nexport const normalized = (a: NVector): NVector => {\n  const n = norm(a);\n  if (n === 0 || n === 1) {\n    return a;\n  }\n  const sign = a[6] < 0 ? -1 : 1;\n  return mul(a, sign / n);\n};\n\nexport const inormalized = (a: NVector): NVector => {\n  const n = inorm(a);\n  if (n === 0 || n === 1) {\n    return a;\n  }\n  return mul(a, 1 / n);\n};\n\nconst isNumber = (a: any): a is number => typeof a === \"number\";\n\nexport const E0: NVector = nvector(1, 1);\nexport const E1: NVector = nvector(1, 2);\nexport const E2: NVector = nvector(1, 3);\nexport const E01: NVector = nvector(1, 4);\nexport const E20: NVector = nvector(1, 5);\nexport const E12: NVector = nvector(1, 6);\nexport const E012: NVector = nvector(1, 7);\nexport const I = E012;\n"]},"metadata":{},"sourceType":"module"}