{"ast":null,"code":"var sliced = require('sliced');\n\nvar crc32 = require('crc-32');\n\nmodule.exports = encodeChunks; // Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\n\nvar uint8 = new Uint8Array(4);\nvar int32 = new Int32Array(uint8.buffer);\nvar uint32 = new Uint32Array(uint8.buffer);\n\nfunction encodeChunks(chunks) {\n  var totalSize = 8;\n  var idx = totalSize;\n  var i;\n\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length;\n    totalSize += 12;\n  }\n\n  var output = new Uint8Array(totalSize);\n  output[0] = 0x89;\n  output[1] = 0x50;\n  output[2] = 0x4E;\n  output[3] = 0x47;\n  output[4] = 0x0D;\n  output[5] = 0x0A;\n  output[6] = 0x1A;\n  output[7] = 0x0A;\n\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i];\n    var name = chunk.name;\n    var data = chunk.data;\n    var size = data.length;\n    var nameChars = [name.charCodeAt(0), name.charCodeAt(1), name.charCodeAt(2), name.charCodeAt(3)];\n    uint32[0] = size;\n    output[idx++] = uint8[3];\n    output[idx++] = uint8[2];\n    output[idx++] = uint8[1];\n    output[idx++] = uint8[0];\n    output[idx++] = nameChars[0];\n    output[idx++] = nameChars[1];\n    output[idx++] = nameChars[2];\n    output[idx++] = nameChars[3];\n\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++];\n    }\n\n    var crcCheck = nameChars.concat(sliced(data));\n    var crc = crc32.buf(crcCheck);\n    int32[0] = crc;\n    output[idx++] = uint8[3];\n    output[idx++] = uint8[2];\n    output[idx++] = uint8[1];\n    output[idx++] = uint8[0];\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/png-chunks-encode/index.js"],"names":["sliced","require","crc32","module","exports","encodeChunks","uint8","Uint8Array","int32","Int32Array","buffer","uint32","Uint32Array","chunks","totalSize","idx","i","length","data","output","chunk","name","size","nameChars","charCodeAt","j","crcCheck","concat","crc","buf"],"mappings":"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","sourcesContent":["var sliced = require('sliced')\nvar crc32 = require('crc-32')\n\nmodule.exports = encodeChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction encodeChunks (chunks) {\n  var totalSize = 8\n  var idx = totalSize\n  var i\n\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length\n    totalSize += 12\n  }\n\n  var output = new Uint8Array(totalSize)\n\n  output[0] = 0x89\n  output[1] = 0x50\n  output[2] = 0x4E\n  output[3] = 0x47\n  output[4] = 0x0D\n  output[5] = 0x0A\n  output[6] = 0x1A\n  output[7] = 0x0A\n\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i]\n    var name = chunk.name\n    var data = chunk.data\n    var size = data.length\n    var nameChars = [\n      name.charCodeAt(0),\n      name.charCodeAt(1),\n      name.charCodeAt(2),\n      name.charCodeAt(3)\n    ]\n\n    uint32[0] = size\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n\n    output[idx++] = nameChars[0]\n    output[idx++] = nameChars[1]\n    output[idx++] = nameChars[2]\n    output[idx++] = nameChars[3]\n\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++]\n    }\n\n    var crcCheck = nameChars.concat(sliced(data))\n    var crc = crc32.buf(crcCheck)\n\n    int32[0] = crc\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"script"}