{"ast":null,"code":"import { getElementAbsoluteCoords, getElementBounds } from \"../element\";\nexport const getElementsWithinSelection = (elements, selection) => {\n  const [selectionX1, selectionY1, selectionX2, selectionY2] = getElementAbsoluteCoords(selection);\n  return elements.filter(element => {\n    const [elementX1, elementY1, elementX2, elementY2] = getElementBounds(element);\n    return element.type !== \"selection\" && selectionX1 <= elementX1 && selectionY1 <= elementY1 && selectionX2 >= elementX2 && selectionY2 >= elementY2;\n  });\n};\nexport const isSomeElementSelected = (elements, appState) => elements.some(element => appState.selectedElementIds[element.id]);\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\n\nexport const getCommonAttributeOfSelectedElements = (elements, appState, getAttribute) => {\n  const attributes = Array.from(new Set(getSelectedElements(elements, appState).map(element => getAttribute(element))));\n  return attributes.length === 1 ? attributes[0] : null;\n};\nexport const getSelectedElements = (elements, appState) => elements.filter(element => appState.selectedElementIds[element.id]);\nexport const getTargetElements = (elements, appState) => appState.editingElement ? [appState.editingElement] : getSelectedElements(elements, appState);","map":{"version":3,"sources":["/var/www/html/excalidraw/src/scene/selection.ts"],"names":["getElementAbsoluteCoords","getElementBounds","getElementsWithinSelection","elements","selection","selectionX1","selectionY1","selectionX2","selectionY2","filter","element","elementX1","elementY1","elementX2","elementY2","type","isSomeElementSelected","appState","some","selectedElementIds","id","getCommonAttributeOfSelectedElements","getAttribute","attributes","Array","from","Set","getSelectedElements","map","length","getTargetElements","editingElement"],"mappings":"AAIA,SAASA,wBAAT,EAAmCC,gBAAnC,QAA2D,YAA3D;AAGA,OAAO,MAAMC,0BAA0B,GAAG,CACxCC,QADwC,EAExCC,SAFwC,KAGrC;AACH,QAAM,CACJC,WADI,EAEJC,WAFI,EAGJC,WAHI,EAIJC,WAJI,IAKFR,wBAAwB,CAACI,SAAD,CAL5B;AAMA,SAAOD,QAAQ,CAACM,MAAT,CAAiBC,OAAD,IAAa;AAClC,UAAM,CAACC,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,EAAkCC,SAAlC,IAA+Cb,gBAAgB,CACnES,OADmE,CAArE;AAIA,WACEA,OAAO,CAACK,IAAR,KAAiB,WAAjB,IACAV,WAAW,IAAIM,SADf,IAEAL,WAAW,IAAIM,SAFf,IAGAL,WAAW,IAAIM,SAHf,IAIAL,WAAW,IAAIM,SALjB;AAOD,GAZM,CAAP;AAaD,CAvBM;AAyBP,OAAO,MAAME,qBAAqB,GAAG,CACnCb,QADmC,EAEnCc,QAFmC,KAInCd,QAAQ,CAACe,IAAT,CAAeR,OAAD,IAAaO,QAAQ,CAACE,kBAAT,CAA4BT,OAAO,CAACU,EAApC,CAA3B,CAJK;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oCAAoC,GAAG,CAClDlB,QADkD,EAElDc,QAFkD,EAGlDK,YAHkD,KAIrC;AACb,QAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CACjB,IAAIC,GAAJ,CACEC,mBAAmB,CAACxB,QAAD,EAAWc,QAAX,CAAnB,CAAwCW,GAAxC,CAA6ClB,OAAD,IAC1CY,YAAY,CAACZ,OAAD,CADd,CADF,CADiB,CAAnB;AAOA,SAAOa,UAAU,CAACM,MAAX,KAAsB,CAAtB,GAA0BN,UAAU,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACD,CAbM;AAeP,OAAO,MAAMI,mBAAmB,GAAG,CACjCxB,QADiC,EAEjCc,QAFiC,KAG9Bd,QAAQ,CAACM,MAAT,CAAiBC,OAAD,IAAaO,QAAQ,CAACE,kBAAT,CAA4BT,OAAO,CAACU,EAApC,CAA7B,CAHE;AAKP,OAAO,MAAMU,iBAAiB,GAAG,CAC/B3B,QAD+B,EAE/Bc,QAF+B,KAI/BA,QAAQ,CAACc,cAAT,GACI,CAACd,QAAQ,CAACc,cAAV,CADJ,GAEIJ,mBAAmB,CAACxB,QAAD,EAAWc,QAAX,CANlB","sourcesContent":["import {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { getElementAbsoluteCoords, getElementBounds } from \"../element\";\nimport { AppState } from \"../types\";\n\nexport const getElementsWithinSelection = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  selection: NonDeletedExcalidrawElement,\n) => {\n  const [\n    selectionX1,\n    selectionY1,\n    selectionX2,\n    selectionY2,\n  ] = getElementAbsoluteCoords(selection);\n  return elements.filter((element) => {\n    const [elementX1, elementY1, elementX2, elementY2] = getElementBounds(\n      element,\n    );\n\n    return (\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2\n    );\n  });\n};\n\nexport const isSomeElementSelected = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n): boolean =>\n  elements.some((element) => appState.selectedElementIds[element.id]);\n\n/**\n * Returns common attribute (picked by `getAttribute` callback) of selected\n *  elements. If elements don't share the same value, returns `null`.\n */\nexport const getCommonAttributeOfSelectedElements = <T>(\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n): T | null => {\n  const attributes = Array.from(\n    new Set(\n      getSelectedElements(elements, appState).map((element) =>\n        getAttribute(element),\n      ),\n    ),\n  );\n  return attributes.length === 1 ? attributes[0] : null;\n};\n\nexport const getSelectedElements = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) => elements.filter((element) => appState.selectedElementIds[element.id]);\n\nexport const getTargetElements = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n) =>\n  appState.editingElement\n    ? [appState.editingElement]\n    : getSelectedElements(elements, appState);\n"]},"metadata":{},"sourceType":"module"}