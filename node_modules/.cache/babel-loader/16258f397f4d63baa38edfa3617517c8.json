{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionCanvas.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { resetZoom, trash, zoomIn, zoomOut } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getNormalizedZoom, getSelectedElements } from \"../scene\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { getNewZoom } from \"../scene/zoom\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\nexport const actionChangeViewBackgroundColor = register({\n  name: \"changeViewBackgroundColor\",\n  perform: (_, appState, value) => {\n    return {\n      appState: { ...appState,\n        viewBackgroundColor: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\"\n      },\n      children: /*#__PURE__*/_jsxDEV(ColorPicker, {\n        label: t(\"labels.canvasBackground\"),\n        type: \"canvasBackground\",\n        color: appState.viewBackgroundColor,\n        onChange: color => updateData(color)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionClearCanvas = register({\n  name: \"clearCanvas\",\n  perform: (elements, appState) => {\n    return {\n      elements: elements.map(element => newElementWith(element, {\n        isDeleted: true\n      })),\n      appState: { ...getDefaultAppState(),\n        appearance: appState.appearance,\n        elementLocked: appState.elementLocked,\n        exportBackground: appState.exportBackground,\n        exportEmbedScene: appState.exportEmbedScene,\n        gridSize: appState.gridSize,\n        shouldAddWatermark: appState.shouldAddWatermark,\n        showStats: appState.showStats,\n        pasteDialog: appState.pasteDialog\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: _s(({\n    updateData\n  }) => {\n    _s();\n\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      icon: trash,\n      title: t(\"buttons.clearReset\"),\n      \"aria-label\": t(\"buttons.clearReset\"),\n      showAriaLabel: useIsMobile(),\n      onClick: () => {\n        if (window.confirm(t(\"alerts.clearReset\"))) {\n          updateData(null);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this);\n  }, \"qUMUJPzUyTVgJ1cPs1E3FafaiuA=\", false, function () {\n    return [useIsMobile];\n  })\n});\nconst ZOOM_STEP = 0.1;\nexport const actionZoomIn = register({\n  name: \"zoomIn\",\n  perform: (_elements, appState) => {\n    const zoom = getNewZoom(getNormalizedZoom(appState.zoom.value + ZOOM_STEP), appState.zoom, {\n      left: appState.offsetLeft,\n      top: appState.offsetTop\n    }, {\n      x: appState.width / 2,\n      y: appState.height / 2\n    });\n    return {\n      appState: { ...appState,\n        zoom\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    type: \"button\",\n    icon: zoomIn,\n    title: `${t(\"buttons.zoomIn\")} — ${getShortcutKey(\"CtrlOrCmd++\")}`,\n    \"aria-label\": t(\"buttons.zoomIn\"),\n    onClick: () => {\n      updateData(null);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this),\n  keyTest: event => (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\nexport const actionZoomOut = register({\n  name: \"zoomOut\",\n  perform: (_elements, appState) => {\n    const zoom = getNewZoom(getNormalizedZoom(appState.zoom.value - ZOOM_STEP), appState.zoom, {\n      left: appState.offsetLeft,\n      top: appState.offsetTop\n    }, {\n      x: appState.width / 2,\n      y: appState.height / 2\n    });\n    return {\n      appState: { ...appState,\n        zoom\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    type: \"button\",\n    icon: zoomOut,\n    title: `${t(\"buttons.zoomOut\")} — ${getShortcutKey(\"CtrlOrCmd+-\")}`,\n    \"aria-label\": t(\"buttons.zoomOut\"),\n    onClick: () => {\n      updateData(null);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this),\n  keyTest: event => (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\nexport const actionResetZoom = register({\n  name: \"resetZoom\",\n  perform: (_elements, appState) => {\n    return {\n      appState: { ...appState,\n        zoom: getNewZoom(1, appState.zoom, {\n          left: appState.offsetLeft,\n          top: appState.offsetTop\n        }, {\n          x: appState.width / 2,\n          y: appState.height / 2\n        })\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    type: \"button\",\n    icon: resetZoom,\n    title: t(\"buttons.resetZoom\"),\n    \"aria-label\": t(\"buttons.resetZoom\"),\n    onClick: () => {\n      updateData(null);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this),\n  keyTest: event => (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) && (event[KEYS.CTRL_OR_CMD] || event.shiftKey)\n});\n\nconst zoomValueToFitBoundsOnViewport = (bounds, viewportDimensions) => {\n  const [x1, y1, x2, y2] = bounds;\n  const commonBoundsWidth = x2 - x1;\n  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;\n  const commonBoundsHeight = y2 - y1;\n  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;\n  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);\n  const zoomAdjustedToSteps = Math.floor(smallestZoomValue / ZOOM_STEP) * ZOOM_STEP;\n  const clampedZoomValueToFitElements = Math.min(Math.max(zoomAdjustedToSteps, ZOOM_STEP), 1);\n  return clampedZoomValueToFitElements;\n};\n\nconst zoomToFitElements = (elements, appState, zoomToSelection) => {\n  const nonDeletedElements = getNonDeletedElements(elements);\n  const selectedElements = getSelectedElements(nonDeletedElements, appState);\n  const commonBounds = zoomToSelection && selectedElements.length > 0 ? getCommonBounds(selectedElements) : getCommonBounds(nonDeletedElements);\n  const zoomValue = zoomValueToFitBoundsOnViewport(commonBounds, {\n    width: appState.width,\n    height: appState.height\n  });\n  const newZoom = getNewZoom(zoomValue, appState.zoom, {\n    left: appState.offsetLeft,\n    top: appState.offsetTop\n  });\n  const [x1, y1, x2, y2] = commonBounds;\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n  return {\n    appState: { ...appState,\n      ...centerScrollOn({\n        scenePoint: {\n          x: centerX,\n          y: centerY\n        },\n        viewportDimensions: {\n          width: appState.width,\n          height: appState.height\n        },\n        zoom: newZoom\n      }),\n      zoom: newZoom\n    },\n    commitToHistory: false\n  };\n};\n\nexport const actionZoomToSelected = register({\n  name: \"zoomToSelection\",\n  perform: (elements, appState) => zoomToFitElements(elements, appState, true),\n  keyTest: event => event.code === CODES.TWO && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]\n});\nexport const actionZoomToFit = register({\n  name: \"zoomToFit\",\n  perform: (elements, appState) => zoomToFitElements(elements, appState, false),\n  keyTest: event => event.code === CODES.ONE && event.shiftKey && !event.altKey && !event[KEYS.CTRL_OR_CMD]\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionCanvas.tsx"],"names":["React","getDefaultAppState","ColorPicker","resetZoom","trash","zoomIn","zoomOut","ToolButton","getCommonBounds","getNonDeletedElements","newElementWith","t","useIsMobile","CODES","KEYS","getNormalizedZoom","getSelectedElements","centerScrollOn","getNewZoom","getShortcutKey","register","actionChangeViewBackgroundColor","name","perform","_","appState","value","viewBackgroundColor","commitToHistory","PanelComponent","updateData","position","color","actionClearCanvas","elements","map","element","isDeleted","appearance","elementLocked","exportBackground","exportEmbedScene","gridSize","shouldAddWatermark","showStats","pasteDialog","window","confirm","ZOOM_STEP","actionZoomIn","_elements","zoom","left","offsetLeft","top","offsetTop","x","width","y","height","keyTest","event","code","EQUAL","NUM_ADD","CTRL_OR_CMD","shiftKey","actionZoomOut","MINUS","NUM_SUBTRACT","actionResetZoom","ZERO","NUM_ZERO","zoomValueToFitBoundsOnViewport","bounds","viewportDimensions","x1","y1","x2","y2","commonBoundsWidth","zoomValueForWidth","commonBoundsHeight","zoomValueForHeight","smallestZoomValue","Math","min","zoomAdjustedToSteps","floor","clampedZoomValueToFitElements","max","zoomToFitElements","zoomToSelection","nonDeletedElements","selectedElements","commonBounds","length","zoomValue","newZoom","centerX","centerY","scenePoint","actionZoomToSelected","TWO","altKey","actionZoomToFit","ONE"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { resetZoom, trash, zoomIn, zoomOut } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { getCommonBounds, getNonDeletedElements } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { CODES, KEYS } from \"../keys\";\nimport { getNormalizedZoom, getSelectedElements } from \"../scene\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { getNewZoom } from \"../scene/zoom\";\nimport { AppState, NormalizedZoomValue } from \"../types\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nexport const actionChangeViewBackgroundColor = register({\n  name: \"changeViewBackgroundColor\",\n  perform: (_, appState, value) => {\n    return {\n      appState: { ...appState, viewBackgroundColor: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <ColorPicker\n          label={t(\"labels.canvasBackground\")}\n          type=\"canvasBackground\"\n          color={appState.viewBackgroundColor}\n          onChange={(color) => updateData(color)}\n        />\n      </div>\n    );\n  },\n});\n\nexport const actionClearCanvas = register({\n  name: \"clearCanvas\",\n  perform: (elements, appState: AppState) => {\n    return {\n      elements: elements.map((element) =>\n        newElementWith(element, { isDeleted: true }),\n      ),\n      appState: {\n        ...getDefaultAppState(),\n        appearance: appState.appearance,\n        elementLocked: appState.elementLocked,\n        exportBackground: appState.exportBackground,\n        exportEmbedScene: appState.exportEmbedScene,\n        gridSize: appState.gridSize,\n        shouldAddWatermark: appState.shouldAddWatermark,\n        showStats: appState.showStats,\n        pasteDialog: appState.pasteDialog,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={trash}\n      title={t(\"buttons.clearReset\")}\n      aria-label={t(\"buttons.clearReset\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => {\n        if (window.confirm(t(\"alerts.clearReset\"))) {\n          updateData(null);\n        }\n      }}\n    />\n  ),\n});\n\nconst ZOOM_STEP = 0.1;\n\nexport const actionZoomIn = register({\n  name: \"zoomIn\",\n  perform: (_elements, appState) => {\n    const zoom = getNewZoom(\n      getNormalizedZoom(appState.zoom.value + ZOOM_STEP),\n      appState.zoom,\n      { left: appState.offsetLeft, top: appState.offsetTop },\n      { x: appState.width / 2, y: appState.height / 2 },\n    );\n    return {\n      appState: {\n        ...appState,\n        zoom,\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={zoomIn}\n      title={`${t(\"buttons.zoomIn\")} — ${getShortcutKey(\"CtrlOrCmd++\")}`}\n      aria-label={t(\"buttons.zoomIn\")}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.EQUAL || event.code === CODES.NUM_ADD) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionZoomOut = register({\n  name: \"zoomOut\",\n  perform: (_elements, appState) => {\n    const zoom = getNewZoom(\n      getNormalizedZoom(appState.zoom.value - ZOOM_STEP),\n      appState.zoom,\n      { left: appState.offsetLeft, top: appState.offsetTop },\n      { x: appState.width / 2, y: appState.height / 2 },\n    );\n\n    return {\n      appState: {\n        ...appState,\n        zoom,\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={zoomOut}\n      title={`${t(\"buttons.zoomOut\")} — ${getShortcutKey(\"CtrlOrCmd+-\")}`}\n      aria-label={t(\"buttons.zoomOut\")}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.MINUS || event.code === CODES.NUM_SUBTRACT) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nexport const actionResetZoom = register({\n  name: \"resetZoom\",\n  perform: (_elements, appState) => {\n    return {\n      appState: {\n        ...appState,\n        zoom: getNewZoom(\n          1 as NormalizedZoomValue,\n          appState.zoom,\n          { left: appState.offsetLeft, top: appState.offsetTop },\n          {\n            x: appState.width / 2,\n            y: appState.height / 2,\n          },\n        ),\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={resetZoom}\n      title={t(\"buttons.resetZoom\")}\n      aria-label={t(\"buttons.resetZoom\")}\n      onClick={() => {\n        updateData(null);\n      }}\n    />\n  ),\n  keyTest: (event) =>\n    (event.code === CODES.ZERO || event.code === CODES.NUM_ZERO) &&\n    (event[KEYS.CTRL_OR_CMD] || event.shiftKey),\n});\n\nconst zoomValueToFitBoundsOnViewport = (\n  bounds: [number, number, number, number],\n  viewportDimensions: { width: number; height: number },\n) => {\n  const [x1, y1, x2, y2] = bounds;\n  const commonBoundsWidth = x2 - x1;\n  const zoomValueForWidth = viewportDimensions.width / commonBoundsWidth;\n  const commonBoundsHeight = y2 - y1;\n  const zoomValueForHeight = viewportDimensions.height / commonBoundsHeight;\n  const smallestZoomValue = Math.min(zoomValueForWidth, zoomValueForHeight);\n  const zoomAdjustedToSteps =\n    Math.floor(smallestZoomValue / ZOOM_STEP) * ZOOM_STEP;\n  const clampedZoomValueToFitElements = Math.min(\n    Math.max(zoomAdjustedToSteps, ZOOM_STEP),\n    1,\n  );\n  return clampedZoomValueToFitElements as NormalizedZoomValue;\n};\n\nconst zoomToFitElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  zoomToSelection: boolean,\n) => {\n  const nonDeletedElements = getNonDeletedElements(elements);\n  const selectedElements = getSelectedElements(nonDeletedElements, appState);\n\n  const commonBounds =\n    zoomToSelection && selectedElements.length > 0\n      ? getCommonBounds(selectedElements)\n      : getCommonBounds(nonDeletedElements);\n\n  const zoomValue = zoomValueToFitBoundsOnViewport(commonBounds, {\n    width: appState.width,\n    height: appState.height,\n  });\n  const newZoom = getNewZoom(zoomValue, appState.zoom, {\n    left: appState.offsetLeft,\n    top: appState.offsetTop,\n  });\n\n  const [x1, y1, x2, y2] = commonBounds;\n  const centerX = (x1 + x2) / 2;\n  const centerY = (y1 + y2) / 2;\n  return {\n    appState: {\n      ...appState,\n      ...centerScrollOn({\n        scenePoint: { x: centerX, y: centerY },\n        viewportDimensions: {\n          width: appState.width,\n          height: appState.height,\n        },\n        zoom: newZoom,\n      }),\n      zoom: newZoom,\n    },\n    commitToHistory: false,\n  };\n};\n\nexport const actionZoomToSelected = register({\n  name: \"zoomToSelection\",\n  perform: (elements, appState) => zoomToFitElements(elements, appState, true),\n  keyTest: (event) =>\n    event.code === CODES.TWO &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n\nexport const actionZoomToFit = register({\n  name: \"zoomToFit\",\n  perform: (elements, appState) => zoomToFitElements(elements, appState, false),\n  keyTest: (event) =>\n    event.code === CODES.ONE &&\n    event.shiftKey &&\n    !event.altKey &&\n    !event[KEYS.CTRL_OR_CMD],\n});\n"]},"metadata":{},"sourceType":"module"}