{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionProperties.tsx\";\nimport React from \"react\";\nimport { ButtonIconSelect } from \"../components/ButtonIconSelect\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { IconPicker } from \"../components/IconPicker\";\nimport { ArrowheadArrowIcon, ArrowheadBarIcon, ArrowheadDotIcon, ArrowheadNoneIcon, EdgeRoundIcon, EdgeSharpIcon, FillCrossHatchIcon, FillHachureIcon, FillSolidIcon, SloppinessArchitectIcon, SloppinessArtistIcon, SloppinessCartoonistIcon, StrokeStyleDashedIcon, StrokeStyleDottedIcon, StrokeStyleSolidIcon, StrokeWidthIcon } from \"../components/icons\";\nimport { DEFAULT_FONT_FAMILY, DEFAULT_FONT_SIZE } from \"../constants\";\nimport { getNonDeletedElements, isTextElement, redrawTextBoundingBox } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isLinearElement, isLinearElementType } from \"../element/typeChecks\";\nimport { getLanguage, t } from \"../i18n\";\nimport { randomInteger } from \"../random\";\nimport { canChangeSharpness, canHaveArrowheads, getCommonAttributeOfSelectedElements, getTargetElements, isSomeElementSelected } from \"../scene\";\nimport { register } from \"./register\";\n\nconst changeProperty = (elements, appState, callback) => {\n  return elements.map(element => {\n    var _appState$editingElem;\n\n    if (appState.selectedElementIds[element.id] || element.id === ((_appState$editingElem = appState.editingElement) === null || _appState$editingElem === void 0 ? void 0 : _appState$editingElem.id)) {\n      return callback(element);\n    }\n\n    return element;\n  });\n};\n\nconst getFormValue = function (elements, appState, getAttribute, defaultValue) {\n  var _ref, _ref2;\n\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (_ref = (_ref2 = editingElement && getAttribute(editingElement)) !== null && _ref2 !== void 0 ? _ref2 : isSomeElementSelected(nonDeletedElements, appState) ? getCommonAttributeOfSelectedElements(nonDeletedElements, appState, getAttribute) : defaultValue) !== null && _ref !== void 0 ? _ref : null;\n};\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeColor: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeColor: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      \"aria-hidden\": \"true\",\n      children: t(\"labels.stroke\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n      type: \"elementStroke\",\n      label: t(\"labels.stroke\"),\n      color: getFormValue(elements, appState, element => element.strokeColor, appState.currentItemStrokeColor),\n      onChange: updateData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true)\n});\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        backgroundColor: value\n      })),\n      appState: { ...appState,\n        currentItemBackgroundColor: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      \"aria-hidden\": \"true\",\n      children: t(\"labels.background\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ColorPicker, {\n      type: \"elementBackground\",\n      label: t(\"labels.background\"),\n      color: getFormValue(elements, appState, element => element.backgroundColor, appState.currentItemBackgroundColor),\n      onChange: updateData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true)\n});\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        fillStyle: value\n      })),\n      appState: { ...appState,\n        currentItemFillStyle: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.fill\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n      options: [{\n        value: \"hachure\",\n        text: t(\"labels.hachure\"),\n        icon: /*#__PURE__*/_jsxDEV(FillHachureIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: \"cross-hatch\",\n        text: t(\"labels.crossHatch\"),\n        icon: /*#__PURE__*/_jsxDEV(FillCrossHatchIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: \"solid\",\n        text: t(\"labels.solid\"),\n        icon: /*#__PURE__*/_jsxDEV(FillSolidIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 19\n        }, this)\n      }],\n      group: \"fill\",\n      value: getFormValue(elements, appState, element => element.fillStyle, appState.currentItemFillStyle),\n      onChange: value => {\n        updateData(value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeWidth: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeWidth: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.strokeWidth\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n      group: \"stroke-width\",\n      options: [{\n        value: 1,\n        text: t(\"labels.thin\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeWidthIcon, {\n          appearance: appState.appearance,\n          strokeWidth: 2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this)\n      }, {\n        value: 2,\n        text: t(\"labels.bold\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeWidthIcon, {\n          appearance: appState.appearance,\n          strokeWidth: 6\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this)\n      }, {\n        value: 4,\n        text: t(\"labels.extraBold\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeWidthIcon, {\n          appearance: appState.appearance,\n          strokeWidth: 10\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }, this)\n      }],\n      value: getFormValue(elements, appState, element => element.strokeWidth, appState.currentItemStrokeWidth),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 214,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        seed: randomInteger(),\n        roughness: value\n      })),\n      appState: { ...appState,\n        currentItemRoughness: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.sloppiness\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n      group: \"sloppiness\",\n      options: [{\n        value: 0,\n        text: t(\"labels.architect\"),\n        icon: /*#__PURE__*/_jsxDEV(SloppinessArchitectIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: 1,\n        text: t(\"labels.artist\"),\n        icon: /*#__PURE__*/_jsxDEV(SloppinessArtistIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: 2,\n        text: t(\"labels.cartoonist\"),\n        icon: /*#__PURE__*/_jsxDEV(SloppinessCartoonistIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 19\n        }, this)\n      }],\n      value: getFormValue(elements, appState, element => element.roughness, appState.currentItemRoughness),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeStrokeStyle = register({\n  name: \"changeStrokeStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeStyle: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeStyle: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.strokeStyle\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n      group: \"strokeStyle\",\n      options: [{\n        value: \"solid\",\n        text: t(\"labels.strokeStyle_solid\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeStyleSolidIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: \"dashed\",\n        text: t(\"labels.strokeStyle_dashed\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeStyleDashedIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: \"dotted\",\n        text: t(\"labels.strokeStyle_dotted\"),\n        icon: /*#__PURE__*/_jsxDEV(StrokeStyleDottedIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 19\n        }, this)\n      }],\n      value: getFormValue(elements, appState, element => element.strokeStyle, appState.currentItemStrokeStyle),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        opacity: value\n      })),\n      appState: { ...appState,\n        currentItemOpacity: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => {\n    var _getFormValue;\n\n    return /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"control-label\",\n      children: [t(\"labels.opacity\"), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: \"0\",\n        max: \"100\",\n        step: \"10\",\n        onChange: event => updateData(+event.target.value),\n        onWheel: event => {\n          event.stopPropagation();\n          const target = event.target;\n          const STEP = 10;\n          const MAX = 100;\n          const MIN = 0;\n          const value = +target.value;\n\n          if (event.deltaY < 0 && value < MAX) {\n            updateData(value + STEP);\n          } else if (event.deltaY > 0 && value > MIN) {\n            updateData(value - STEP);\n          }\n        },\n        value: (_getFormValue = getFormValue(elements, appState, element => element.opacity, appState.currentItemOpacity)) !== null && _getFormValue !== void 0 ? _getFormValue : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 5\n    }, this);\n  }\n});\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            fontSize: value\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemFontSize: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.fontSize\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonSelect, {\n      group: \"font-size\",\n      options: [{\n        value: 16,\n        text: t(\"labels.small\")\n      }, {\n        value: 20,\n        text: t(\"labels.medium\")\n      }, {\n        value: 28,\n        text: t(\"labels.large\")\n      }, {\n        value: 36,\n        text: t(\"labels.veryLarge\")\n      }],\n      value: getFormValue(elements, appState, element => isTextElement(element) && element.fontSize, appState.currentItemFontSize || DEFAULT_FONT_SIZE),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 429,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            fontFamily: value\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemFontFamily: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => {\n    const options = [{\n      value: 1,\n      text: t(\"labels.handDrawn\")\n    }, {\n      value: 2,\n      text: t(\"labels.normal\")\n    }, {\n      value: 3,\n      text: t(\"labels.code\")\n    }];\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.fontFamily\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonSelect, {\n        group: \"font-family\",\n        options: options,\n        value: getFormValue(elements, appState, element => isTextElement(element) && element.fontFamily, appState.currentItemFontFamily || DEFAULT_FONT_FAMILY),\n        onChange: value => updateData(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this);\n  }\n});\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isTextElement(el)) {\n          const element = newElementWith(el, {\n            textAlign: value\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        currentItemTextAlign: value\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.textAlign\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonSelect, {\n      group: \"text-align\",\n      options: [{\n        value: \"left\",\n        text: t(\"labels.left\")\n      }, {\n        value: \"center\",\n        text: t(\"labels.center\")\n      }, {\n        value: \"right\",\n        text: t(\"labels.right\")\n      }],\n      value: getFormValue(elements, appState, element => isTextElement(element) && element.textAlign, appState.currentItemTextAlign),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 522,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeSharpness = register({\n  name: \"changeSharpness\",\n  perform: (elements, appState, value) => {\n    const targetElements = getTargetElements(getNonDeletedElements(elements), appState);\n    const shouldUpdateForNonLinearElements = targetElements.length ? targetElements.every(el => !isLinearElement(el)) : !isLinearElementType(appState.elementType);\n    const shouldUpdateForLinearElements = targetElements.length ? targetElements.every(isLinearElement) : isLinearElementType(appState.elementType);\n    return {\n      elements: changeProperty(elements, appState, el => newElementWith(el, {\n        strokeSharpness: value\n      })),\n      appState: { ...appState,\n        currentItemStrokeSharpness: shouldUpdateForNonLinearElements ? value : appState.currentItemStrokeSharpness,\n        currentItemLinearStrokeSharpness: shouldUpdateForLinearElements ? value : appState.currentItemLinearStrokeSharpness\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n      children: t(\"labels.edges\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ButtonIconSelect, {\n      group: \"edges\",\n      options: [{\n        value: \"sharp\",\n        text: t(\"labels.sharp\"),\n        icon: /*#__PURE__*/_jsxDEV(EdgeSharpIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 19\n        }, this)\n      }, {\n        value: \"round\",\n        text: t(\"labels.round\"),\n        icon: /*#__PURE__*/_jsxDEV(EdgeRoundIcon, {\n          appearance: appState.appearance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 19\n        }, this)\n      }],\n      value: getFormValue(elements, appState, element => element.strokeSharpness, canChangeSharpness(appState.elementType) && (isLinearElementType(appState.elementType) ? appState.currentItemLinearStrokeSharpness : appState.currentItemStrokeSharpness) || null),\n      onChange: value => updateData(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 575,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeArrowhead = register({\n  name: \"changeArrowhead\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, el => {\n        if (isLinearElement(el)) {\n          const {\n            position,\n            type\n          } = value;\n\n          if (position === \"start\") {\n            const element = newElementWith(el, {\n              startArrowhead: type\n            });\n            return element;\n          } else if (position === \"end\") {\n            const element = newElementWith(el, {\n              endArrowhead: type\n            });\n            return element;\n          }\n        }\n\n        return el;\n      }),\n      appState: { ...appState,\n        [value.position === \"start\" ? \"currentItemStartArrowhead\" : \"currentItemEndArrowhead\"]: value.type\n      },\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => {\n    const isRTL = getLanguage().rtl;\n    return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        children: t(\"labels.arrowheads\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"iconSelectList\",\n        children: [/*#__PURE__*/_jsxDEV(IconPicker, {\n          label: \"arrowhead_start\",\n          options: [{\n            value: null,\n            text: t(\"labels.arrowhead_none\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadNoneIcon, {\n              appearance: appState.appearance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 23\n            }, this),\n            keyBinding: \"q\"\n          }, {\n            value: \"arrow\",\n            text: t(\"labels.arrowhead_arrow\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadArrowIcon, {\n              appearance: appState.appearance,\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 19\n            }, this),\n            keyBinding: \"w\"\n          }, {\n            value: \"bar\",\n            text: t(\"labels.arrowhead_bar\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadBarIcon, {\n              appearance: appState.appearance,\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 19\n            }, this),\n            keyBinding: \"e\"\n          }, {\n            value: \"dot\",\n            text: t(\"labels.arrowhead_dot\"),\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadDotIcon, {\n              appearance: appState.appearance,\n              flip: !isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 685,\n              columnNumber: 19\n            }, this),\n            keyBinding: \"r\"\n          }],\n          value: getFormValue(elements, appState, element => isLinearElement(element) && canHaveArrowheads(element.type) ? element.startArrowhead : appState.currentItemStartArrowhead, appState.currentItemStartArrowhead),\n          onChange: value => updateData({\n            position: \"start\",\n            type: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconPicker, {\n          label: \"arrowhead_end\",\n          group: \"arrowheads\",\n          options: [{\n            value: null,\n            text: t(\"labels.arrowhead_none\"),\n            keyBinding: \"q\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadNoneIcon, {\n              appearance: appState.appearance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 23\n            }, this)\n          }, {\n            value: \"arrow\",\n            text: t(\"labels.arrowhead_arrow\"),\n            keyBinding: \"w\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadArrowIcon, {\n              appearance: appState.appearance,\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 19\n            }, this)\n          }, {\n            value: \"bar\",\n            text: t(\"labels.arrowhead_bar\"),\n            keyBinding: \"e\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadBarIcon, {\n              appearance: appState.appearance,\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 730,\n              columnNumber: 19\n            }, this)\n          }, {\n            value: \"dot\",\n            text: t(\"labels.arrowhead_dot\"),\n            keyBinding: \"r\",\n            icon: /*#__PURE__*/_jsxDEV(ArrowheadDotIcon, {\n              appearance: appState.appearance,\n              flip: isRTL\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 19\n            }, this)\n          }],\n          value: getFormValue(elements, appState, element => isLinearElement(element) && canHaveArrowheads(element.type) ? element.endArrowhead : appState.currentItemEndArrowhead, appState.currentItemEndArrowhead),\n          onChange: value => updateData({\n            position: \"end\",\n            type: value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 647,\n      columnNumber: 7\n    }, this);\n  }\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionProperties.tsx"],"names":["React","ButtonIconSelect","ButtonSelect","ColorPicker","IconPicker","ArrowheadArrowIcon","ArrowheadBarIcon","ArrowheadDotIcon","ArrowheadNoneIcon","EdgeRoundIcon","EdgeSharpIcon","FillCrossHatchIcon","FillHachureIcon","FillSolidIcon","SloppinessArchitectIcon","SloppinessArtistIcon","SloppinessCartoonistIcon","StrokeStyleDashedIcon","StrokeStyleDottedIcon","StrokeStyleSolidIcon","StrokeWidthIcon","DEFAULT_FONT_FAMILY","DEFAULT_FONT_SIZE","getNonDeletedElements","isTextElement","redrawTextBoundingBox","newElementWith","isLinearElement","isLinearElementType","getLanguage","t","randomInteger","canChangeSharpness","canHaveArrowheads","getCommonAttributeOfSelectedElements","getTargetElements","isSomeElementSelected","register","changeProperty","elements","appState","callback","map","element","selectedElementIds","id","editingElement","getFormValue","getAttribute","defaultValue","nonDeletedElements","actionChangeStrokeColor","name","perform","value","el","strokeColor","currentItemStrokeColor","commitToHistory","PanelComponent","updateData","actionChangeBackgroundColor","backgroundColor","currentItemBackgroundColor","actionChangeFillStyle","fillStyle","currentItemFillStyle","text","icon","appearance","actionChangeStrokeWidth","strokeWidth","currentItemStrokeWidth","actionChangeSloppiness","seed","roughness","currentItemRoughness","actionChangeStrokeStyle","strokeStyle","currentItemStrokeStyle","actionChangeOpacity","opacity","currentItemOpacity","event","target","stopPropagation","STEP","MAX","MIN","deltaY","undefined","actionChangeFontSize","fontSize","currentItemFontSize","actionChangeFontFamily","fontFamily","currentItemFontFamily","options","actionChangeTextAlign","textAlign","currentItemTextAlign","actionChangeSharpness","targetElements","shouldUpdateForNonLinearElements","length","every","elementType","shouldUpdateForLinearElements","strokeSharpness","currentItemStrokeSharpness","currentItemLinearStrokeSharpness","actionChangeArrowhead","position","type","startArrowhead","endArrowhead","isRTL","rtl","keyBinding","currentItemStartArrowhead","currentItemEndArrowhead"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SACEC,kBADF,EAEEC,gBAFF,EAGEC,gBAHF,EAIEC,iBAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,kBAPF,EAQEC,eARF,EASEC,aATF,EAUEC,uBAVF,EAWEC,oBAXF,EAYEC,wBAZF,EAaEC,qBAbF,EAcEC,qBAdF,EAeEC,oBAfF,EAgBEC,eAhBF,QAiBO,qBAjBP;AAkBA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,cAAvD;AACA,SACEC,qBADF,EAEEC,aAFF,EAGEC,qBAHF,QAIO,YAJP;AAKA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,eAAT,EAA0BC,mBAA1B,QAAqD,uBAArD;AASA,SAASC,WAAT,EAAsBC,CAAtB,QAA+B,SAA/B;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,SACEC,kBADF,EAEEC,iBAFF,EAGEC,oCAHF,EAIEC,iBAJF,EAKEC,qBALF,QAMO,UANP;AAOA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,cAAc,GAAG,CACrBC,QADqB,EAErBC,QAFqB,EAGrBC,QAHqB,KAIlB;AACH,SAAOF,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAa;AAAA;;AAC/B,QACEH,QAAQ,CAACI,kBAAT,CAA4BD,OAAO,CAACE,EAApC,KACAF,OAAO,CAACE,EAAR,+BAAeL,QAAQ,CAACM,cAAxB,0DAAe,sBAAyBD,EAAxC,CAFF,EAGE;AACA,aAAOJ,QAAQ,CAACE,OAAD,CAAf;AACD;;AACD,WAAOA,OAAP;AACD,GARM,CAAP;AASD,CAdD;;AAgBA,MAAMI,YAAY,GAAG,UACnBR,QADmB,EAEnBC,QAFmB,EAGnBQ,YAHmB,EAInBC,YAJmB,EAKT;AAAA;;AACV,QAAMH,cAAc,GAAGN,QAAQ,CAACM,cAAhC;AACA,QAAMI,kBAAkB,GAAG3B,qBAAqB,CAACgB,QAAD,CAAhD;AACA,0BACGO,cAAc,IAAIE,YAAY,CAACF,cAAD,CADjC,yCAEGV,qBAAqB,CAACc,kBAAD,EAAqBV,QAArB,CAArB,GACGN,oCAAoC,CAClCgB,kBADkC,EAElCV,QAFkC,EAGlCQ,YAHkC,CADvC,GAMGC,YARN,uCASE,IATF;AAWD,CAnBD;;AAqBA,OAAO,MAAME,uBAAuB,GAAGd,QAAQ,CAAC;AAC9Ce,EAAAA,IAAI,EAAE,mBADwC;AAE9CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBC,QAAAA,WAAW,EAAEF;AADI,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAeiB,QAAAA,sBAAsB,EAAEH;AAAvC,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZ6C;AAa9CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAI,qBAAY,MAAhB;AAAA,gBAAwB9B,CAAC,CAAC,eAAD;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AACE,MAAA,IAAI,EAAC,eADP;AAEE,MAAA,KAAK,EAAEA,CAAC,CAAC,eAAD,CAFV;AAGE,MAAA,KAAK,EAAEiB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACa,WAHJ,EAIjBhB,QAAQ,CAACiB,sBAJQ,CAHrB;AASE,MAAA,QAAQ,EAAEG;AATZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAd4C,CAAD,CAAxC;AA+BP,OAAO,MAAMC,2BAA2B,GAAGxB,QAAQ,CAAC;AAClDe,EAAAA,IAAI,EAAE,uBAD4C;AAElDC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBO,QAAAA,eAAe,EAAER;AADA,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAeuB,QAAAA,0BAA0B,EAAET;AAA3C,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZiD;AAalDC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAI,qBAAY,MAAhB;AAAA,gBAAwB9B,CAAC,CAAC,mBAAD;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AACE,MAAA,IAAI,EAAC,mBADP;AAEE,MAAA,KAAK,EAAEA,CAAC,CAAC,mBAAD,CAFV;AAGE,MAAA,KAAK,EAAEiB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACmB,eAHJ,EAIjBtB,QAAQ,CAACuB,0BAJQ,CAHrB;AASE,MAAA,QAAQ,EAAEH;AATZ;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAdgD,CAAD,CAA5C;AA+BP,OAAO,MAAMI,qBAAqB,GAAG3B,QAAQ,CAAC;AAC5Ce,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBU,QAAAA,SAAS,EAAEX;AADM,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAe0B,QAAAA,oBAAoB,EAAEZ;AAArC,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZ2C;AAa5CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,aAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,OAAO,EAAE,CACP;AACEwB,QAAAA,KAAK,EAAE,SADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,gBAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,eAAD;AAAiB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAAtC;AAAA;AAAA;AAAA;AAAA;AAHR,OADO,EAMP;AACEf,QAAAA,KAAK,EAAE,aADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,mBAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,kBAAD;AAAoB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAAzC;AAAA;AAAA;AAAA;AAAA;AAHR,OANO,EAWP;AACEf,QAAAA,KAAK,EAAE,OADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,aAAD;AAAe,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAApC;AAAA;AAAA;AAAA;AAAA;AAHR,OAXO,CADX;AAkBE,MAAA,KAAK,EAAC,MAlBR;AAmBE,MAAA,KAAK,EAAEtB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACsB,SAHJ,EAIjBzB,QAAQ,CAAC0B,oBAJQ,CAnBrB;AAyBE,MAAA,QAAQ,EAAGZ,KAAD,IAAW;AACnBM,QAAAA,UAAU,CAACN,KAAD,CAAV;AACD;AA3BH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAd0C,CAAD,CAAtC;AAiDP,OAAO,MAAMgB,uBAAuB,GAAGjC,QAAQ,CAAC;AAC9Ce,EAAAA,IAAI,EAAE,mBADwC;AAE9CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBgB,QAAAA,WAAW,EAAEjB;AADI,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAegC,QAAAA,sBAAsB,EAAElB;AAAvC,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZ6C;AAa9CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,oBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,KAAK,EAAC,cADR;AAEE,MAAA,OAAO,EAAE,CACP;AACEwB,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,aAAD,CAFT;AAGEsC,QAAAA,IAAI,eACF,QAAC,eAAD;AACE,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,UAAA,WAAW,EAAE;AAFf;AAAA;AAAA;AAAA;AAAA;AAJJ,OADO,EAWP;AACEf,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,aAAD,CAFT;AAGEsC,QAAAA,IAAI,eACF,QAAC,eAAD;AACE,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,UAAA,WAAW,EAAE;AAFf;AAAA;AAAA;AAAA;AAAA;AAJJ,OAXO,EAqBP;AACEf,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,kBAAD,CAFT;AAGEsC,QAAAA,IAAI,eACF,QAAC,eAAD;AACE,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,UAAA,WAAW,EAAE;AAFf;AAAA;AAAA;AAAA;AAAA;AAJJ,OArBO,CAFX;AAkCE,MAAA,KAAK,EAAEtB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAAC4B,WAHJ,EAIjB/B,QAAQ,CAACgC,sBAJQ,CAlCrB;AAwCE,MAAA,QAAQ,EAAGlB,KAAD,IAAWM,UAAU,CAACN,KAAD;AAxCjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAd4C,CAAD,CAAxC;AA8DP,OAAO,MAAMmB,sBAAsB,GAAGpC,QAAQ,CAAC;AAC7Ce,EAAAA,IAAI,EAAE,kBADuC;AAE7CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBmB,QAAAA,IAAI,EAAE3C,aAAa,EADF;AAEjB4C,QAAAA,SAAS,EAAErB;AAFM,OAAL,CADQ,CADnB;AAOLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAeoC,QAAAA,oBAAoB,EAAEtB;AAArC,OAPL;AAQLI,MAAAA,eAAe,EAAE;AARZ,KAAP;AAUD,GAb4C;AAc7CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,mBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,KAAK,EAAC,YADR;AAEE,MAAA,OAAO,EAAE,CACP;AACEwB,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,kBAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,uBAAD;AAAyB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA9C;AAAA;AAAA;AAAA;AAAA;AAHR,OADO,EAMP;AACEf,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,eAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,oBAAD;AAAsB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA3C;AAAA;AAAA;AAAA;AAAA;AAHR,OANO,EAWP;AACEf,QAAAA,KAAK,EAAE,CADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,mBAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,wBAAD;AAA0B,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA/C;AAAA;AAAA;AAAA;AAAA;AAHR,OAXO,CAFX;AAmBE,MAAA,KAAK,EAAEtB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACgC,SAHJ,EAIjBnC,QAAQ,CAACoC,oBAJQ,CAnBrB;AAyBE,MAAA,QAAQ,EAAGtB,KAAD,IAAWM,UAAU,CAACN,KAAD;AAzBjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAf2C,CAAD,CAAvC;AAgDP,OAAO,MAAMuB,uBAAuB,GAAGxC,QAAQ,CAAC;AAC9Ce,EAAAA,IAAI,EAAE,mBADwC;AAE9CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBuB,QAAAA,WAAW,EAAExB;AADI,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAeuC,QAAAA,sBAAsB,EAAEzB;AAAvC,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZ6C;AAa9CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,oBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,KAAK,EAAC,aADR;AAEE,MAAA,OAAO,EAAE,CACP;AACEwB,QAAAA,KAAK,EAAE,OADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,0BAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,oBAAD;AAAsB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA3C;AAAA;AAAA;AAAA;AAAA;AAHR,OADO,EAMP;AACEf,QAAAA,KAAK,EAAE,QADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,2BAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,qBAAD;AAAuB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA5C;AAAA;AAAA;AAAA;AAAA;AAHR,OANO,EAWP;AACEf,QAAAA,KAAK,EAAE,QADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,2BAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,qBAAD;AAAuB,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAA5C;AAAA;AAAA;AAAA;AAAA;AAHR,OAXO,CAFX;AAmBE,MAAA,KAAK,EAAEtB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACmC,WAHJ,EAIjBtC,QAAQ,CAACuC,sBAJQ,CAnBrB;AAyBE,MAAA,QAAQ,EAAGzB,KAAD,IAAWM,UAAU,CAACN,KAAD;AAzBjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAd4C,CAAD,CAAxC;AA+CP,OAAO,MAAM0B,mBAAmB,GAAG3C,QAAQ,CAAC;AAC1Ce,EAAAA,IAAI,EAAE,eADoC;AAE1CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjB0B,QAAAA,OAAO,EAAE3B;AADQ,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EAAE,GAAGA,QAAL;AAAe0C,QAAAA,kBAAkB,EAAE5B;AAAnC,OANL;AAOLI,MAAAA,eAAe,EAAE;AAPZ,KAAP;AASD,GAZyC;AAa1CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD;AAAA;;AAAA,wBACd;AAAO,MAAA,SAAS,EAAC,eAAjB;AAAA,iBACG9B,CAAC,CAAC,gBAAD,CADJ,eAEE;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,GAAG,EAAC,GAFN;AAGE,QAAA,GAAG,EAAC,KAHN;AAIE,QAAA,IAAI,EAAC,IAJP;AAKE,QAAA,QAAQ,EAAGqD,KAAD,IAAWvB,UAAU,CAAC,CAACuB,KAAK,CAACC,MAAN,CAAa9B,KAAf,CALjC;AAME,QAAA,OAAO,EAAG6B,KAAD,IAAW;AAClBA,UAAAA,KAAK,CAACE,eAAN;AACA,gBAAMD,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,gBAAME,IAAI,GAAG,EAAb;AACA,gBAAMC,GAAG,GAAG,GAAZ;AACA,gBAAMC,GAAG,GAAG,CAAZ;AACA,gBAAMlC,KAAK,GAAG,CAAC8B,MAAM,CAAC9B,KAAtB;;AAEA,cAAI6B,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBnC,KAAK,GAAGiC,GAAhC,EAAqC;AACnC3B,YAAAA,UAAU,CAACN,KAAK,GAAGgC,IAAT,CAAV;AACD,WAFD,MAEO,IAAIH,KAAK,CAACM,MAAN,GAAe,CAAf,IAAoBnC,KAAK,GAAGkC,GAAhC,EAAqC;AAC1C5B,YAAAA,UAAU,CAACN,KAAK,GAAGgC,IAAT,CAAV;AACD;AACF,SAnBH;AAoBE,QAAA,KAAK,mBACHvC,YAAY,CACVR,QADU,EAEVC,QAFU,EAGTG,OAAD,IAAaA,OAAO,CAACsC,OAHX,EAIVzC,QAAQ,CAAC0C,kBAJC,CADT,yDAMEQ;AA1BT;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADc;AAAA;AAb0B,CAAD,CAApC;AAiDP,OAAO,MAAMC,oBAAoB,GAAGtD,QAAQ,CAAC;AAC3Ce,EAAAA,IAAI,EAAE,gBADqC;AAE3CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAAQ;AACnD,YAAI/B,aAAa,CAAC+B,EAAD,CAAjB,EAAuB;AACrB,gBAAMZ,OAA8B,GAAGjB,cAAc,CAAC6B,EAAD,EAAK;AACxDqC,YAAAA,QAAQ,EAAEtC;AAD8C,WAAL,CAArD;AAGA7B,UAAAA,qBAAqB,CAACkB,OAAD,CAArB;AACA,iBAAOA,OAAP;AACD;;AAED,eAAOY,EAAP;AACD,OAVuB,CADnB;AAYLf,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAERqD,QAAAA,mBAAmB,EAAEvC;AAFb,OAZL;AAgBLI,MAAAA,eAAe,EAAE;AAhBZ,KAAP;AAkBD,GArB0C;AAsB3CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,iBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,OAAO,EAAE,CACP;AAAEwB,QAAAA,KAAK,EAAE,EAAT;AAAaa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD;AAApB,OADO,EAEP;AAAEwB,QAAAA,KAAK,EAAE,EAAT;AAAaa,QAAAA,IAAI,EAAErC,CAAC,CAAC,eAAD;AAApB,OAFO,EAGP;AAAEwB,QAAAA,KAAK,EAAE,EAAT;AAAaa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD;AAApB,OAHO,EAIP;AAAEwB,QAAAA,KAAK,EAAE,EAAT;AAAaa,QAAAA,IAAI,EAAErC,CAAC,CAAC,kBAAD;AAApB,OAJO,CAFX;AAQE,MAAA,KAAK,EAAEiB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAanB,aAAa,CAACmB,OAAD,CAAb,IAA0BA,OAAO,CAACiD,QAH9B,EAIjBpD,QAAQ,CAACqD,mBAAT,IAAgCvE,iBAJf,CARrB;AAcE,MAAA,QAAQ,EAAGgC,KAAD,IAAWM,UAAU,CAACN,KAAD;AAdjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAvByC,CAAD,CAArC;AA6CP,OAAO,MAAMwC,sBAAsB,GAAGzD,QAAQ,CAAC;AAC7Ce,EAAAA,IAAI,EAAE,kBADuC;AAE7CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAAQ;AACnD,YAAI/B,aAAa,CAAC+B,EAAD,CAAjB,EAAuB;AACrB,gBAAMZ,OAA8B,GAAGjB,cAAc,CAAC6B,EAAD,EAAK;AACxDwC,YAAAA,UAAU,EAAEzC;AAD4C,WAAL,CAArD;AAGA7B,UAAAA,qBAAqB,CAACkB,OAAD,CAArB;AACA,iBAAOA,OAAP;AACD;;AAED,eAAOY,EAAP;AACD,OAVuB,CADnB;AAYLf,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAERwD,QAAAA,qBAAqB,EAAE1C;AAFf,OAZL;AAgBLI,MAAAA,eAAe,EAAE;AAhBZ,KAAP;AAkBD,GArB4C;AAsB7CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,KAAwC;AACtD,UAAMqC,OAA8C,GAAG,CACrD;AAAE3C,MAAAA,KAAK,EAAE,CAAT;AAAYa,MAAAA,IAAI,EAAErC,CAAC,CAAC,kBAAD;AAAnB,KADqD,EAErD;AAAEwB,MAAAA,KAAK,EAAE,CAAT;AAAYa,MAAAA,IAAI,EAAErC,CAAC,CAAC,eAAD;AAAnB,KAFqD,EAGrD;AAAEwB,MAAAA,KAAK,EAAE,CAAT;AAAYa,MAAAA,IAAI,EAAErC,CAAC,CAAC,aAAD;AAAnB,KAHqD,CAAvD;AAMA,wBACE;AAAA,8BACE;AAAA,kBAASA,CAAC,CAAC,mBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AACE,QAAA,KAAK,EAAC,aADR;AAEE,QAAA,OAAO,EAAEmE,OAFX;AAGE,QAAA,KAAK,EAAElD,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAanB,aAAa,CAACmB,OAAD,CAAb,IAA0BA,OAAO,CAACoD,UAH9B,EAIjBvD,QAAQ,CAACwD,qBAAT,IAAkC3E,mBAJjB,CAHrB;AASE,QAAA,QAAQ,EAAGiC,KAAD,IAAWM,UAAU,CAACN,KAAD;AATjC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;AA7C4C,CAAD,CAAvC;AAgDP,OAAO,MAAM4C,qBAAqB,GAAG7D,QAAQ,CAAC;AAC5Ce,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAAQ;AACnD,YAAI/B,aAAa,CAAC+B,EAAD,CAAjB,EAAuB;AACrB,gBAAMZ,OAA8B,GAAGjB,cAAc,CAAC6B,EAAD,EAAK;AACxD4C,YAAAA,SAAS,EAAE7C;AAD6C,WAAL,CAArD;AAGA7B,UAAAA,qBAAqB,CAACkB,OAAD,CAArB;AACA,iBAAOA,OAAP;AACD;;AAED,eAAOY,EAAP;AACD,OAVuB,CADnB;AAYLf,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAER4D,QAAAA,oBAAoB,EAAE9C;AAFd,OAZL;AAgBLI,MAAAA,eAAe,EAAE;AAhBZ,KAAP;AAkBD,GArB2C;AAsB5CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,kBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AACE,MAAA,KAAK,EAAC,YADR;AAEE,MAAA,OAAO,EAAE,CACP;AAAEwB,QAAAA,KAAK,EAAE,MAAT;AAAiBa,QAAAA,IAAI,EAAErC,CAAC,CAAC,aAAD;AAAxB,OADO,EAEP;AAAEwB,QAAAA,KAAK,EAAE,QAAT;AAAmBa,QAAAA,IAAI,EAAErC,CAAC,CAAC,eAAD;AAA1B,OAFO,EAGP;AAAEwB,QAAAA,KAAK,EAAE,OAAT;AAAkBa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD;AAAzB,OAHO,CAFX;AAOE,MAAA,KAAK,EAAEiB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAanB,aAAa,CAACmB,OAAD,CAAb,IAA0BA,OAAO,CAACwD,SAH9B,EAIjB3D,QAAQ,CAAC4D,oBAJQ,CAPrB;AAaE,MAAA,QAAQ,EAAG9C,KAAD,IAAWM,UAAU,CAACN,KAAD;AAbjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAvB0C,CAAD,CAAtC;AA4CP,OAAO,MAAM+C,qBAAqB,GAAGhE,QAAQ,CAAC;AAC5Ce,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,OAAO,EAAE,CAACd,QAAD,EAAWC,QAAX,EAAqBc,KAArB,KAA+B;AACtC,UAAMgD,cAAc,GAAGnE,iBAAiB,CACtCZ,qBAAqB,CAACgB,QAAD,CADiB,EAEtCC,QAFsC,CAAxC;AAIA,UAAM+D,gCAAgC,GAAGD,cAAc,CAACE,MAAf,GACrCF,cAAc,CAACG,KAAf,CAAsBlD,EAAD,IAAQ,CAAC5B,eAAe,CAAC4B,EAAD,CAA7C,CADqC,GAErC,CAAC3B,mBAAmB,CAACY,QAAQ,CAACkE,WAAV,CAFxB;AAGA,UAAMC,6BAA6B,GAAGL,cAAc,CAACE,MAAf,GAClCF,cAAc,CAACG,KAAf,CAAqB9E,eAArB,CADkC,GAElCC,mBAAmB,CAACY,QAAQ,CAACkE,WAAV,CAFvB;AAGA,WAAO;AACLnE,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAC3C7B,cAAc,CAAC6B,EAAD,EAAK;AACjBqD,QAAAA,eAAe,EAAEtD;AADA,OAAL,CADQ,CADnB;AAMLd,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAERqE,QAAAA,0BAA0B,EAAEN,gCAAgC,GACxDjD,KADwD,GAExDd,QAAQ,CAACqE,0BAJL;AAKRC,QAAAA,gCAAgC,EAAEH,6BAA6B,GAC3DrD,KAD2D,GAE3Dd,QAAQ,CAACsE;AAPL,OANL;AAeLpD,MAAAA,eAAe,EAAE;AAfZ,KAAP;AAiBD,GA9B2C;AA+B5CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,kBACd;AAAA,4BACE;AAAA,gBAAS9B,CAAC,CAAC,cAAD;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,gBAAD;AACE,MAAA,KAAK,EAAC,OADR;AAEE,MAAA,OAAO,EAAE,CACP;AACEwB,QAAAA,KAAK,EAAE,OADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,aAAD;AAAe,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAApC;AAAA;AAAA;AAAA;AAAA;AAHR,OADO,EAMP;AACEf,QAAAA,KAAK,EAAE,OADT;AAEEa,QAAAA,IAAI,EAAErC,CAAC,CAAC,cAAD,CAFT;AAGEsC,QAAAA,IAAI,eAAE,QAAC,aAAD;AAAe,UAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAApC;AAAA;AAAA;AAAA;AAAA;AAHR,OANO,CAFX;AAcE,MAAA,KAAK,EAAEtB,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IAAaA,OAAO,CAACiE,eAHJ,EAIhB5E,kBAAkB,CAACQ,QAAQ,CAACkE,WAAV,CAAlB,KACE9E,mBAAmB,CAACY,QAAQ,CAACkE,WAAV,CAAnB,GACGlE,QAAQ,CAACsE,gCADZ,GAEGtE,QAAQ,CAACqE,0BAHd,CAAD,IAIE,IARe,CAdrB;AAwBE,MAAA,QAAQ,EAAGvD,KAAD,IAAWM,UAAU,CAACN,KAAD;AAxBjC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAhC0C,CAAD,CAAtC;AAgEP,OAAO,MAAMyD,qBAAqB,GAAG1E,QAAQ,CAAC;AAC5Ce,EAAAA,IAAI,EAAE,iBADsC;AAE5CC,EAAAA,OAAO,EAAE,CACPd,QADO,EAEPC,QAFO,EAGPc,KAHO,KAIJ;AACH,WAAO;AACLf,MAAAA,QAAQ,EAAED,cAAc,CAACC,QAAD,EAAWC,QAAX,EAAsBe,EAAD,IAAQ;AACnD,YAAI5B,eAAe,CAAC4B,EAAD,CAAnB,EAAyB;AACvB,gBAAM;AAAEyD,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,cAAqB3D,KAA3B;;AAEA,cAAI0D,QAAQ,KAAK,OAAjB,EAA0B;AACxB,kBAAMrE,OAAgC,GAAGjB,cAAc,CAAC6B,EAAD,EAAK;AAC1D2D,cAAAA,cAAc,EAAED;AAD0C,aAAL,CAAvD;AAGA,mBAAOtE,OAAP;AACD,WALD,MAKO,IAAIqE,QAAQ,KAAK,KAAjB,EAAwB;AAC7B,kBAAMrE,OAAgC,GAAGjB,cAAc,CAAC6B,EAAD,EAAK;AAC1D4D,cAAAA,YAAY,EAAEF;AAD4C,aAAL,CAAvD;AAGA,mBAAOtE,OAAP;AACD;AACF;;AAED,eAAOY,EAAP;AACD,OAlBuB,CADnB;AAoBLf,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAER,SAACc,KAAK,CAAC0D,QAAN,KAAmB,OAAnB,GACG,2BADH,GAEG,yBAFJ,GAEgC1D,KAAK,CAAC2D;AAJ9B,OApBL;AA0BLvD,MAAAA,eAAe,EAAE;AA1BZ,KAAP;AA4BD,GAnC2C;AAoC5CC,EAAAA,cAAc,EAAE,CAAC;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBoB,IAAAA;AAAtB,GAAD,KAAwC;AACtD,UAAMwD,KAAK,GAAGvF,WAAW,GAAGwF,GAA5B;AAEA,wBACE;AAAA,8BACE;AAAA,kBAASvF,CAAC,CAAC,mBAAD;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,gCACE,QAAC,UAAD;AACE,UAAA,KAAK,EAAC,iBADR;AAEE,UAAA,OAAO,EAAE,CACP;AACEwB,YAAAA,KAAK,EAAE,IADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,uBAAD,CAFT;AAGEsC,YAAAA,IAAI,eAAE,QAAC,iBAAD;AAAmB,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAAxC;AAAA;AAAA;AAAA;AAAA,oBAHR;AAIEiD,YAAAA,UAAU,EAAE;AAJd,WADO,EAOP;AACEhE,YAAAA,KAAK,EAAE,OADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,wBAAD,CAFT;AAGEsC,YAAAA,IAAI,eACF,QAAC,kBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE,CAAC+C;AAFT;AAAA;AAAA;AAAA;AAAA,oBAJJ;AASEE,YAAAA,UAAU,EAAE;AATd,WAPO,EAkBP;AACEhE,YAAAA,KAAK,EAAE,KADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,sBAAD,CAFT;AAGEsC,YAAAA,IAAI,eACF,QAAC,gBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE,CAAC+C;AAFT;AAAA;AAAA;AAAA;AAAA,oBAJJ;AASEE,YAAAA,UAAU,EAAE;AATd,WAlBO,EA6BP;AACEhE,YAAAA,KAAK,EAAE,KADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,sBAAD,CAFT;AAGEsC,YAAAA,IAAI,eACF,QAAC,gBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE,CAAC+C;AAFT;AAAA;AAAA;AAAA;AAAA,oBAJJ;AASEE,YAAAA,UAAU,EAAE;AATd,WA7BO,CAFX;AA2CE,UAAA,KAAK,EAAEvE,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IACEhB,eAAe,CAACgB,OAAD,CAAf,IAA4BV,iBAAiB,CAACU,OAAO,CAACsE,IAAT,CAA7C,GACItE,OAAO,CAACuE,cADZ,GAEI1E,QAAQ,CAAC+E,yBANE,EAOjB/E,QAAQ,CAAC+E,yBAPQ,CA3CrB;AAoDE,UAAA,QAAQ,EAAGjE,KAAD,IAAWM,UAAU,CAAC;AAAEoD,YAAAA,QAAQ,EAAE,OAAZ;AAAqBC,YAAAA,IAAI,EAAE3D;AAA3B,WAAD;AApDjC;AAAA;AAAA;AAAA;AAAA,gBADF,eAuDE,QAAC,UAAD;AACE,UAAA,KAAK,EAAC,eADR;AAEE,UAAA,KAAK,EAAC,YAFR;AAGE,UAAA,OAAO,EAAE,CACP;AACEA,YAAAA,KAAK,EAAE,IADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,uBAAD,CAFT;AAGEwF,YAAAA,UAAU,EAAE,GAHd;AAIElD,YAAAA,IAAI,eAAE,QAAC,iBAAD;AAAmB,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B;AAAxC;AAAA;AAAA;AAAA;AAAA;AAJR,WADO,EAOP;AACEf,YAAAA,KAAK,EAAE,OADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,wBAAD,CAFT;AAGEwF,YAAAA,UAAU,EAAE,GAHd;AAIElD,YAAAA,IAAI,eACF,QAAC,kBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE+C;AAFR;AAAA;AAAA;AAAA;AAAA;AALJ,WAPO,EAkBP;AACE9D,YAAAA,KAAK,EAAE,KADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,sBAAD,CAFT;AAGEwF,YAAAA,UAAU,EAAE,GAHd;AAIElD,YAAAA,IAAI,eACF,QAAC,gBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE+C;AAFR;AAAA;AAAA;AAAA;AAAA;AALJ,WAlBO,EA6BP;AACE9D,YAAAA,KAAK,EAAE,KADT;AAEEa,YAAAA,IAAI,EAAErC,CAAC,CAAC,sBAAD,CAFT;AAGEwF,YAAAA,UAAU,EAAE,GAHd;AAIElD,YAAAA,IAAI,eACF,QAAC,gBAAD;AACE,cAAA,UAAU,EAAE5B,QAAQ,CAAC6B,UADvB;AAEE,cAAA,IAAI,EAAE+C;AAFR;AAAA;AAAA;AAAA;AAAA;AALJ,WA7BO,CAHX;AA4CE,UAAA,KAAK,EAAErE,YAAY,CACjBR,QADiB,EAEjBC,QAFiB,EAGhBG,OAAD,IACEhB,eAAe,CAACgB,OAAD,CAAf,IAA4BV,iBAAiB,CAACU,OAAO,CAACsE,IAAT,CAA7C,GACItE,OAAO,CAACwE,YADZ,GAEI3E,QAAQ,CAACgF,uBANE,EAOjBhF,QAAQ,CAACgF,uBAPQ,CA5CrB;AAqDE,UAAA,QAAQ,EAAGlE,KAAD,IAAWM,UAAU,CAAC;AAAEoD,YAAAA,QAAQ,EAAE,KAAZ;AAAmBC,YAAAA,IAAI,EAAE3D;AAAzB,WAAD;AArDjC;AAAA;AAAA;AAAA;AAAA,gBAvDF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAoHD;AA3J2C,CAAD,CAAtC","sourcesContent":["import React from \"react\";\nimport { AppState } from \"../../src/types\";\nimport { ButtonIconSelect } from \"../components/ButtonIconSelect\";\nimport { ButtonSelect } from \"../components/ButtonSelect\";\nimport { ColorPicker } from \"../components/ColorPicker\";\nimport { IconPicker } from \"../components/IconPicker\";\nimport {\n  ArrowheadArrowIcon,\n  ArrowheadBarIcon,\n  ArrowheadDotIcon,\n  ArrowheadNoneIcon,\n  EdgeRoundIcon,\n  EdgeSharpIcon,\n  FillCrossHatchIcon,\n  FillHachureIcon,\n  FillSolidIcon,\n  SloppinessArchitectIcon,\n  SloppinessArtistIcon,\n  SloppinessCartoonistIcon,\n  StrokeStyleDashedIcon,\n  StrokeStyleDottedIcon,\n  StrokeStyleSolidIcon,\n  StrokeWidthIcon,\n} from \"../components/icons\";\nimport { DEFAULT_FONT_FAMILY, DEFAULT_FONT_SIZE } from \"../constants\";\nimport {\n  getNonDeletedElements,\n  isTextElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { isLinearElement, isLinearElementType } from \"../element/typeChecks\";\nimport {\n  Arrowhead,\n  ExcalidrawElement,\n  ExcalidrawLinearElement,\n  ExcalidrawTextElement,\n  FontFamily,\n  TextAlign,\n} from \"../element/types\";\nimport { getLanguage, t } from \"../i18n\";\nimport { randomInteger } from \"../random\";\nimport {\n  canChangeSharpness,\n  canHaveArrowheads,\n  getCommonAttributeOfSelectedElements,\n  getTargetElements,\n  isSomeElementSelected,\n} from \"../scene\";\nimport { register } from \"./register\";\n\nconst changeProperty = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  callback: (element: ExcalidrawElement) => ExcalidrawElement,\n) => {\n  return elements.map((element) => {\n    if (\n      appState.selectedElementIds[element.id] ||\n      element.id === appState.editingElement?.id\n    ) {\n      return callback(element);\n    }\n    return element;\n  });\n};\n\nconst getFormValue = function <T>(\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n  getAttribute: (element: ExcalidrawElement) => T,\n  defaultValue?: T,\n): T | null {\n  const editingElement = appState.editingElement;\n  const nonDeletedElements = getNonDeletedElements(elements);\n  return (\n    (editingElement && getAttribute(editingElement)) ??\n    (isSomeElementSelected(nonDeletedElements, appState)\n      ? getCommonAttributeOfSelectedElements(\n          nonDeletedElements,\n          appState,\n          getAttribute,\n        )\n      : defaultValue) ??\n    null\n  );\n};\n\nexport const actionChangeStrokeColor = register({\n  name: \"changeStrokeColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeColor: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeColor: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.stroke\")}</h3>\n      <ColorPicker\n        type=\"elementStroke\"\n        label={t(\"labels.stroke\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeColor,\n          appState.currentItemStrokeColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeBackgroundColor = register({\n  name: \"changeBackgroundColor\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          backgroundColor: value,\n        }),\n      ),\n      appState: { ...appState, currentItemBackgroundColor: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <>\n      <h3 aria-hidden=\"true\">{t(\"labels.background\")}</h3>\n      <ColorPicker\n        type=\"elementBackground\"\n        label={t(\"labels.background\")}\n        color={getFormValue(\n          elements,\n          appState,\n          (element) => element.backgroundColor,\n          appState.currentItemBackgroundColor,\n        )}\n        onChange={updateData}\n      />\n    </>\n  ),\n});\n\nexport const actionChangeFillStyle = register({\n  name: \"changeFillStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          fillStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemFillStyle: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fill\")}</legend>\n      <ButtonIconSelect\n        options={[\n          {\n            value: \"hachure\",\n            text: t(\"labels.hachure\"),\n            icon: <FillHachureIcon appearance={appState.appearance} />,\n          },\n          {\n            value: \"cross-hatch\",\n            text: t(\"labels.crossHatch\"),\n            icon: <FillCrossHatchIcon appearance={appState.appearance} />,\n          },\n          {\n            value: \"solid\",\n            text: t(\"labels.solid\"),\n            icon: <FillSolidIcon appearance={appState.appearance} />,\n          },\n        ]}\n        group=\"fill\"\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.fillStyle,\n          appState.currentItemFillStyle,\n        )}\n        onChange={(value) => {\n          updateData(value);\n        }}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeWidth = register({\n  name: \"changeStrokeWidth\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeWidth: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeWidth: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeWidth\")}</legend>\n      <ButtonIconSelect\n        group=\"stroke-width\"\n        options={[\n          {\n            value: 1,\n            text: t(\"labels.thin\"),\n            icon: (\n              <StrokeWidthIcon\n                appearance={appState.appearance}\n                strokeWidth={2}\n              />\n            ),\n          },\n          {\n            value: 2,\n            text: t(\"labels.bold\"),\n            icon: (\n              <StrokeWidthIcon\n                appearance={appState.appearance}\n                strokeWidth={6}\n              />\n            ),\n          },\n          {\n            value: 4,\n            text: t(\"labels.extraBold\"),\n            icon: (\n              <StrokeWidthIcon\n                appearance={appState.appearance}\n                strokeWidth={10}\n              />\n            ),\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeWidth,\n          appState.currentItemStrokeWidth,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSloppiness = register({\n  name: \"changeSloppiness\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          seed: randomInteger(),\n          roughness: value,\n        }),\n      ),\n      appState: { ...appState, currentItemRoughness: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.sloppiness\")}</legend>\n      <ButtonIconSelect\n        group=\"sloppiness\"\n        options={[\n          {\n            value: 0,\n            text: t(\"labels.architect\"),\n            icon: <SloppinessArchitectIcon appearance={appState.appearance} />,\n          },\n          {\n            value: 1,\n            text: t(\"labels.artist\"),\n            icon: <SloppinessArtistIcon appearance={appState.appearance} />,\n          },\n          {\n            value: 2,\n            text: t(\"labels.cartoonist\"),\n            icon: <SloppinessCartoonistIcon appearance={appState.appearance} />,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.roughness,\n          appState.currentItemRoughness,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeStrokeStyle = register({\n  name: \"changeStrokeStyle\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeStyle: value,\n        }),\n      ),\n      appState: { ...appState, currentItemStrokeStyle: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.strokeStyle\")}</legend>\n      <ButtonIconSelect\n        group=\"strokeStyle\"\n        options={[\n          {\n            value: \"solid\",\n            text: t(\"labels.strokeStyle_solid\"),\n            icon: <StrokeStyleSolidIcon appearance={appState.appearance} />,\n          },\n          {\n            value: \"dashed\",\n            text: t(\"labels.strokeStyle_dashed\"),\n            icon: <StrokeStyleDashedIcon appearance={appState.appearance} />,\n          },\n          {\n            value: \"dotted\",\n            text: t(\"labels.strokeStyle_dotted\"),\n            icon: <StrokeStyleDottedIcon appearance={appState.appearance} />,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeStyle,\n          appState.currentItemStrokeStyle,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeOpacity = register({\n  name: \"changeOpacity\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          opacity: value,\n        }),\n      ),\n      appState: { ...appState, currentItemOpacity: value },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <label className=\"control-label\">\n      {t(\"labels.opacity\")}\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        step=\"10\"\n        onChange={(event) => updateData(+event.target.value)}\n        onWheel={(event) => {\n          event.stopPropagation();\n          const target = event.target as HTMLInputElement;\n          const STEP = 10;\n          const MAX = 100;\n          const MIN = 0;\n          const value = +target.value;\n\n          if (event.deltaY < 0 && value < MAX) {\n            updateData(value + STEP);\n          } else if (event.deltaY > 0 && value > MIN) {\n            updateData(value - STEP);\n          }\n        }}\n        value={\n          getFormValue(\n            elements,\n            appState,\n            (element) => element.opacity,\n            appState.currentItemOpacity,\n          ) ?? undefined\n        }\n      />\n    </label>\n  ),\n});\n\nexport const actionChangeFontSize = register({\n  name: \"changeFontSize\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            fontSize: value,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFontSize: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.fontSize\")}</legend>\n      <ButtonSelect\n        group=\"font-size\"\n        options={[\n          { value: 16, text: t(\"labels.small\") },\n          { value: 20, text: t(\"labels.medium\") },\n          { value: 28, text: t(\"labels.large\") },\n          { value: 36, text: t(\"labels.veryLarge\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => isTextElement(element) && element.fontSize,\n          appState.currentItemFontSize || DEFAULT_FONT_SIZE,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeFontFamily = register({\n  name: \"changeFontFamily\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            fontFamily: value,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemFontFamily: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const options: { value: FontFamily; text: string }[] = [\n      { value: 1, text: t(\"labels.handDrawn\") },\n      { value: 2, text: t(\"labels.normal\") },\n      { value: 3, text: t(\"labels.code\") },\n    ];\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.fontFamily\")}</legend>\n        <ButtonSelect<FontFamily | false>\n          group=\"font-family\"\n          options={options}\n          value={getFormValue(\n            elements,\n            appState,\n            (element) => isTextElement(element) && element.fontFamily,\n            appState.currentItemFontFamily || DEFAULT_FONT_FAMILY,\n          )}\n          onChange={(value) => updateData(value)}\n        />\n      </fieldset>\n    );\n  },\n});\n\nexport const actionChangeTextAlign = register({\n  name: \"changeTextAlign\",\n  perform: (elements, appState, value) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isTextElement(el)) {\n          const element: ExcalidrawTextElement = newElementWith(el, {\n            textAlign: value,\n          });\n          redrawTextBoundingBox(element);\n          return element;\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        currentItemTextAlign: value,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.textAlign\")}</legend>\n      <ButtonSelect<TextAlign | false>\n        group=\"text-align\"\n        options={[\n          { value: \"left\", text: t(\"labels.left\") },\n          { value: \"center\", text: t(\"labels.center\") },\n          { value: \"right\", text: t(\"labels.right\") },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => isTextElement(element) && element.textAlign,\n          appState.currentItemTextAlign,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeSharpness = register({\n  name: \"changeSharpness\",\n  perform: (elements, appState, value) => {\n    const targetElements = getTargetElements(\n      getNonDeletedElements(elements),\n      appState,\n    );\n    const shouldUpdateForNonLinearElements = targetElements.length\n      ? targetElements.every((el) => !isLinearElement(el))\n      : !isLinearElementType(appState.elementType);\n    const shouldUpdateForLinearElements = targetElements.length\n      ? targetElements.every(isLinearElement)\n      : isLinearElementType(appState.elementType);\n    return {\n      elements: changeProperty(elements, appState, (el) =>\n        newElementWith(el, {\n          strokeSharpness: value,\n        }),\n      ),\n      appState: {\n        ...appState,\n        currentItemStrokeSharpness: shouldUpdateForNonLinearElements\n          ? value\n          : appState.currentItemStrokeSharpness,\n        currentItemLinearStrokeSharpness: shouldUpdateForLinearElements\n          ? value\n          : appState.currentItemLinearStrokeSharpness,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <fieldset>\n      <legend>{t(\"labels.edges\")}</legend>\n      <ButtonIconSelect\n        group=\"edges\"\n        options={[\n          {\n            value: \"sharp\",\n            text: t(\"labels.sharp\"),\n            icon: <EdgeSharpIcon appearance={appState.appearance} />,\n          },\n          {\n            value: \"round\",\n            text: t(\"labels.round\"),\n            icon: <EdgeRoundIcon appearance={appState.appearance} />,\n          },\n        ]}\n        value={getFormValue(\n          elements,\n          appState,\n          (element) => element.strokeSharpness,\n          (canChangeSharpness(appState.elementType) &&\n            (isLinearElementType(appState.elementType)\n              ? appState.currentItemLinearStrokeSharpness\n              : appState.currentItemStrokeSharpness)) ||\n            null,\n        )}\n        onChange={(value) => updateData(value)}\n      />\n    </fieldset>\n  ),\n});\n\nexport const actionChangeArrowhead = register({\n  name: \"changeArrowhead\",\n  perform: (\n    elements,\n    appState,\n    value: { position: \"start\" | \"end\"; type: Arrowhead },\n  ) => {\n    return {\n      elements: changeProperty(elements, appState, (el) => {\n        if (isLinearElement(el)) {\n          const { position, type } = value;\n\n          if (position === \"start\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              startArrowhead: type,\n            });\n            return element;\n          } else if (position === \"end\") {\n            const element: ExcalidrawLinearElement = newElementWith(el, {\n              endArrowhead: type,\n            });\n            return element;\n          }\n        }\n\n        return el;\n      }),\n      appState: {\n        ...appState,\n        [value.position === \"start\"\n          ? \"currentItemStartArrowhead\"\n          : \"currentItemEndArrowhead\"]: value.type,\n      },\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => {\n    const isRTL = getLanguage().rtl;\n\n    return (\n      <fieldset>\n        <legend>{t(\"labels.arrowheads\")}</legend>\n        <div className=\"iconSelectList\">\n          <IconPicker\n            label=\"arrowhead_start\"\n            options={[\n              {\n                value: null,\n                text: t(\"labels.arrowhead_none\"),\n                icon: <ArrowheadNoneIcon appearance={appState.appearance} />,\n                keyBinding: \"q\",\n              },\n              {\n                value: \"arrow\",\n                text: t(\"labels.arrowhead_arrow\"),\n                icon: (\n                  <ArrowheadArrowIcon\n                    appearance={appState.appearance}\n                    flip={!isRTL}\n                  />\n                ),\n                keyBinding: \"w\",\n              },\n              {\n                value: \"bar\",\n                text: t(\"labels.arrowhead_bar\"),\n                icon: (\n                  <ArrowheadBarIcon\n                    appearance={appState.appearance}\n                    flip={!isRTL}\n                  />\n                ),\n                keyBinding: \"e\",\n              },\n              {\n                value: \"dot\",\n                text: t(\"labels.arrowhead_dot\"),\n                icon: (\n                  <ArrowheadDotIcon\n                    appearance={appState.appearance}\n                    flip={!isRTL}\n                  />\n                ),\n                keyBinding: \"r\",\n              },\n            ]}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.startArrowhead\n                  : appState.currentItemStartArrowhead,\n              appState.currentItemStartArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"start\", type: value })}\n          />\n          <IconPicker\n            label=\"arrowhead_end\"\n            group=\"arrowheads\"\n            options={[\n              {\n                value: null,\n                text: t(\"labels.arrowhead_none\"),\n                keyBinding: \"q\",\n                icon: <ArrowheadNoneIcon appearance={appState.appearance} />,\n              },\n              {\n                value: \"arrow\",\n                text: t(\"labels.arrowhead_arrow\"),\n                keyBinding: \"w\",\n                icon: (\n                  <ArrowheadArrowIcon\n                    appearance={appState.appearance}\n                    flip={isRTL}\n                  />\n                ),\n              },\n              {\n                value: \"bar\",\n                text: t(\"labels.arrowhead_bar\"),\n                keyBinding: \"e\",\n                icon: (\n                  <ArrowheadBarIcon\n                    appearance={appState.appearance}\n                    flip={isRTL}\n                  />\n                ),\n              },\n              {\n                value: \"dot\",\n                text: t(\"labels.arrowhead_dot\"),\n                keyBinding: \"r\",\n                icon: (\n                  <ArrowheadDotIcon\n                    appearance={appState.appearance}\n                    flip={isRTL}\n                  />\n                ),\n              },\n            ]}\n            value={getFormValue<Arrowhead | null>(\n              elements,\n              appState,\n              (element) =>\n                isLinearElement(element) && canHaveArrowheads(element.type)\n                  ? element.endArrowhead\n                  : appState.currentItemEndArrowhead,\n              appState.currentItemEndArrowhead,\n            )}\n            onChange={(value) => updateData({ position: \"end\", type: value })}\n          />\n        </div>\n      </fieldset>\n    );\n  },\n});\n"]},"metadata":{},"sourceType":"module"}