{"ast":null,"code":"import { getGlobalObject, isInstanceOf, logger } from '@sentry/utils';\n/** JSDoc */\n\nvar Ember =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function Ember(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Ember.id; // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n\n    this._Ember = options.Ember || getGlobalObject().Ember;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Ember.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n\n    if (!this._Ember) {\n      logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n\n    var oldOnError = this._Ember.onerror;\n\n    this._Ember.onerror = function (error) {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().captureException(error, {\n          originalException: error\n        });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(_this._Ember, error);\n      } else if (_this._Ember.testing) {\n        throw error;\n      }\n    }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n    this._Ember.RSVP.on('error', function (reason) {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().withScope(function (scope) {\n          if (isInstanceOf(reason, Error)) {\n            scope.setExtra('context', 'Unhandled Promise error detected');\n            getCurrentHub().captureException(reason, {\n              originalException: reason\n            });\n          } else {\n            scope.setExtra('reason', reason);\n            getCurrentHub().captureMessage('Unhandled Promise error detected');\n          }\n        });\n      }\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Ember.id = 'Ember';\n  return Ember;\n}();\n\nexport { Ember };","map":{"version":3,"sources":["../src/ember.ts"],"names":[],"mappings":"AACA,SAAS,eAAT,EAA0B,YAA1B,EAAwC,MAAxC,QAAsD,eAAtD;AAEA;;AACA,IAAA,KAAA;AAAA;AAAA,YAAA;AAiBE;;AAEG;AACH;AACA,WAAA,KAAA,CAAmB,OAAnB,EAAgD;AAA7B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA6B;AAfhD;;AAEG;;;AACI,SAAA,IAAA,GAAe,KAAK,CAAC,EAArB,CAYyC,CAC9C;;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,KAAR,IAAiB,eAAe,GAAQ,KAAtD;AACD;AAED;;AAEG;;;AACI,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,CAAjB,EAAwD,aAAxD,EAAgF;AAAhF,QAAA,KAAA,GAAA,IAAA;;AACE,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,MAAA,MAAM,CAAC,KAAP,CAAa,+CAAb;AACA;AACD;AAED;;;AACA,QAAM,UAAU,GAAG,KAAK,MAAL,CAAY,OAA/B;;AAEA,SAAK,MAAL,CAAY,OAAZ,GAAsB,UAAC,KAAD,EAAa;AACjC,UAAI,aAAa,GAAG,cAAhB,CAA+B,KAA/B,CAAJ,EAA2C;AACzC,QAAA,aAAa,GAAG,gBAAhB,CAAiC,KAAjC,EAAwC;AAAE,UAAA,iBAAiB,EAAE;AAArB,SAAxC;AACD;;AAED,UAAI,OAAO,UAAP,KAAsB,UAA1B,EAAsC;AACpC,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAI,CAAC,MAArB,EAA6B,KAA7B;AACD,OAFD,MAEO,IAAI,KAAI,CAAC,MAAL,CAAY,OAAhB,EAAyB;AAC9B,cAAM,KAAN;AACD;AACF,KAVD,CAT8E,CAqB9E;;;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,EAAjB,CAAoB,OAApB,EAA6B,UAAC,MAAD,EAAgB;AAC3C,UAAI,aAAa,GAAG,cAAhB,CAA+B,KAA/B,CAAJ,EAA2C;AACzC,QAAA,aAAa,GAAG,SAAhB,CAA0B,UAAA,KAAA,EAAK;AAC7B,cAAI,YAAY,CAAC,MAAD,EAAS,KAAT,CAAhB,EAAiC;AAC/B,YAAA,KAAK,CAAC,QAAN,CAAe,SAAf,EAA0B,kCAA1B;AACA,YAAA,aAAa,GAAG,gBAAhB,CAAiC,MAAjC,EAAyC;AAAE,cAAA,iBAAiB,EAAE;AAArB,aAAzC;AACD,WAHD,MAGO;AACL,YAAA,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB,MAAzB;AACA,YAAA,aAAa,GAAG,cAAhB,CAA+B,kCAA/B;AACD;AACF,SARD;AASD;AACF,KAZD;AAaD,GAnCM;AA5BP;;AAEG;;;AACW,EAAA,KAAA,CAAA,EAAA,GAAa,OAAb;AA8DhB,SAAA,KAAA;AAAC,CAlED,EAAA;;SAAa,K","sourcesContent":["import { EventProcessor, Hub, Integration } from '@sentry/types';\nimport { getGlobalObject, isInstanceOf, logger } from '@sentry/utils';\n\n/** JSDoc */\nexport class Ember implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Ember';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Ember.id;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  private readonly _Ember: any;\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(options: { Ember?: any } = {}) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n    this._Ember = options.Ember || getGlobalObject<any>().Ember;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._Ember) {\n      logger.error('EmberIntegration is missing an Ember instance');\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n    const oldOnError = this._Ember.onerror;\n\n    this._Ember.onerror = (error: Error): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().captureException(error, { originalException: error });\n      }\n\n      if (typeof oldOnError === 'function') {\n        oldOnError.call(this._Ember, error);\n      } else if (this._Ember.testing) {\n        throw error;\n      }\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._Ember.RSVP.on('error', (reason: unknown): void => {\n      if (getCurrentHub().getIntegration(Ember)) {\n        getCurrentHub().withScope(scope => {\n          if (isInstanceOf(reason, Error)) {\n            scope.setExtra('context', 'Unhandled Promise error detected');\n            getCurrentHub().captureException(reason, { originalException: reason as Error });\n          } else {\n            scope.setExtra('reason', reason);\n            getCurrentHub().captureMessage('Unhandled Promise error detected');\n          }\n        });\n      }\n    });\n  }\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}