{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionNavigate.tsx\";\nimport React from \"react\";\nimport { getClientColors, getClientInitials } from \"../clients\";\nimport { Avatar } from \"../components/Avatar\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { register } from \"./register\";\nexport const actionGoToCollaborator = register({\n  name: \"goToCollaborator\",\n  perform: (_elements, appState, value) => {\n    const point = value;\n\n    if (!point) {\n      return {\n        appState,\n        commitToHistory: false\n      };\n    }\n\n    return {\n      appState: { ...appState,\n        ...centerScrollOn({\n          scenePoint: point,\n          viewportDimensions: {\n            width: appState.width,\n            height: appState.height\n          },\n          zoom: appState.zoom\n        }),\n        // Close mobile menu\n        openMenu: appState.openMenu === \"canvas\" ? null : appState.openMenu\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData,\n    id\n  }) => {\n    const clientId = id;\n\n    if (!clientId) {\n      return null;\n    }\n\n    const collaborator = appState.collaborators.get(clientId);\n\n    if (!collaborator) {\n      return null;\n    }\n\n    const {\n      background,\n      stroke\n    } = getClientColors(clientId);\n    const shortName = getClientInitials(collaborator.username);\n    return /*#__PURE__*/_jsxDEV(Avatar, {\n      color: background,\n      border: stroke,\n      onClick: () => updateData(collaborator.pointer),\n      children: shortName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionNavigate.tsx"],"names":["React","getClientColors","getClientInitials","Avatar","centerScrollOn","register","actionGoToCollaborator","name","perform","_elements","appState","value","point","commitToHistory","scenePoint","viewportDimensions","width","height","zoom","openMenu","PanelComponent","updateData","id","clientId","collaborator","collaborators","get","background","stroke","shortName","username","pointer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,iBAA1B,QAAmD,YAAnD;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AAEA,SAASC,QAAT,QAAyB,YAAzB;AAEA,OAAO,MAAMC,sBAAsB,GAAGD,QAAQ,CAAC;AAC7CE,EAAAA,IAAI,EAAE,kBADuC;AAE7CC,EAAAA,OAAO,EAAE,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,KAAtB,KAAgC;AACvC,UAAMC,KAAK,GAAGD,KAAd;;AACA,QAAI,CAACC,KAAL,EAAY;AACV,aAAO;AAAEF,QAAAA,QAAF;AAAYG,QAAAA,eAAe,EAAE;AAA7B,OAAP;AACD;;AAED,WAAO;AACLH,MAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAER,WAAGN,cAAc,CAAC;AAChBU,UAAAA,UAAU,EAAEF,KADI;AAEhBG,UAAAA,kBAAkB,EAAE;AAClBC,YAAAA,KAAK,EAAEN,QAAQ,CAACM,KADE;AAElBC,YAAAA,MAAM,EAAEP,QAAQ,CAACO;AAFC,WAFJ;AAMhBC,UAAAA,IAAI,EAAER,QAAQ,CAACQ;AANC,SAAD,CAFT;AAUR;AACAC,QAAAA,QAAQ,EAAET,QAAQ,CAACS,QAAT,KAAsB,QAAtB,GAAiC,IAAjC,GAAwCT,QAAQ,CAACS;AAXnD,OADL;AAcLN,MAAAA,eAAe,EAAE;AAdZ,KAAP;AAgBD,GAxB4C;AAyB7CO,EAAAA,cAAc,EAAE,CAAC;AAAEV,IAAAA,QAAF;AAAYW,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,GAAD,KAAkC;AAChD,UAAMC,QAAQ,GAAGD,EAAjB;;AACA,QAAI,CAACC,QAAL,EAAe;AACb,aAAO,IAAP;AACD;;AAED,UAAMC,YAAY,GAAGd,QAAQ,CAACe,aAAT,CAAuBC,GAAvB,CAA2BH,QAA3B,CAArB;;AAEA,QAAI,CAACC,YAAL,EAAmB;AACjB,aAAO,IAAP;AACD;;AAED,UAAM;AAAEG,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAAyB3B,eAAe,CAACsB,QAAD,CAA9C;AACA,UAAMM,SAAS,GAAG3B,iBAAiB,CAACsB,YAAY,CAACM,QAAd,CAAnC;AAEA,wBACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEH,UADT;AAEE,MAAA,MAAM,EAAEC,MAFV;AAGE,MAAA,OAAO,EAAE,MAAMP,UAAU,CAACG,YAAY,CAACO,OAAd,CAH3B;AAAA,gBAKGF;AALH;AAAA;AAAA;AAAA;AAAA,YADF;AASD;AAjD4C,CAAD,CAAvC","sourcesContent":["import React from \"react\";\nimport { getClientColors, getClientInitials } from \"../clients\";\nimport { Avatar } from \"../components/Avatar\";\nimport { centerScrollOn } from \"../scene/scroll\";\nimport { Collaborator } from \"../types\";\nimport { register } from \"./register\";\n\nexport const actionGoToCollaborator = register({\n  name: \"goToCollaborator\",\n  perform: (_elements, appState, value) => {\n    const point = value as Collaborator[\"pointer\"];\n    if (!point) {\n      return { appState, commitToHistory: false };\n    }\n\n    return {\n      appState: {\n        ...appState,\n        ...centerScrollOn({\n          scenePoint: point,\n          viewportDimensions: {\n            width: appState.width,\n            height: appState.height,\n          },\n          zoom: appState.zoom,\n        }),\n        // Close mobile menu\n        openMenu: appState.openMenu === \"canvas\" ? null : appState.openMenu,\n      },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData, id }) => {\n    const clientId = id;\n    if (!clientId) {\n      return null;\n    }\n\n    const collaborator = appState.collaborators.get(clientId);\n\n    if (!collaborator) {\n      return null;\n    }\n\n    const { background, stroke } = getClientColors(clientId);\n    const shortName = getClientInitials(collaborator.username);\n\n    return (\n      <Avatar\n        color={background}\n        border={stroke}\n        onClick={() => updateData(collaborator.pointer)}\n      >\n        {shortName}\n      </Avatar>\n    );\n  },\n});\n"]},"metadata":{},"sourceType":"module"}