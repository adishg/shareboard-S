{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/Dialog.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { KEYS } from \"../keys\";\nimport \"./Dialog.scss\";\nimport { back, close } from \"./icons\";\nimport { Island } from \"./Island\";\nimport { Modal } from \"./Modal\";\n\nconst useRefState = () => {\n  _s();\n\n  const [refValue, setRefValue] = useState(null);\n  const refCallback = useCallback(value => {\n    setRefValue(value);\n  }, []);\n  return [refValue, refCallback];\n};\n\n_s(useRefState, \"vBN3ljNIb8eWRbWq9RZvFD71byw=\");\n\nexport const Dialog = props => {\n  _s2();\n\n  const [islandNode, setIslandNode] = useRefState();\n  useEffect(() => {\n    if (!islandNode) {\n      return;\n    }\n\n    const focusableElements = queryFocusableElements(islandNode);\n\n    if (focusableElements.length > 0 && props.autofocus !== false) {\n      // If there's an element other than close, focus it.\n      (focusableElements[1] || focusableElements[0]).focus();\n    }\n\n    const handleKeyDown = event => {\n      if (event.key === KEYS.TAB) {\n        const focusableElements = queryFocusableElements(islandNode);\n        const {\n          activeElement\n        } = document;\n        const currentIndex = focusableElements.findIndex(element => element === activeElement);\n\n        if (currentIndex === 0 && event.shiftKey) {\n          focusableElements[focusableElements.length - 1].focus();\n          event.preventDefault();\n        } else if (currentIndex === focusableElements.length - 1 && !event.shiftKey) {\n          focusableElements[0].focus();\n          event.preventDefault();\n        }\n      }\n    };\n\n    islandNode.addEventListener(\"keydown\", handleKeyDown);\n    return () => islandNode.removeEventListener(\"keydown\", handleKeyDown);\n  }, [islandNode, props.autofocus]);\n\n  const queryFocusableElements = node => {\n    const focusableElements = node.querySelectorAll(\"button, a, input, select, textarea, div[tabindex]\");\n    return focusableElements ? Array.from(focusableElements) : [];\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    className: clsx(\"Dialog\", props.className),\n    labelledBy: \"dialog-title\",\n    maxWidth: props.small ? 550 : 800,\n    onCloseRequest: props.onCloseRequest,\n    children: /*#__PURE__*/_jsxDEV(Island, {\n      ref: setIslandNode,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"dialog-title\",\n        className: \"Dialog__title\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"Dialog__titleContent\",\n          children: props.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"Modal__close\",\n          onClick: props.onCloseRequest,\n          \"aria-label\": t(\"buttons.close\"),\n          children: useIsMobile() ? back : close\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Dialog__content\",\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Dialog, \"1IOj66jvhVOjDUK8Dc/KOaSBrzs=\", false, function () {\n  return [useRefState, useIsMobile];\n});\n\n_c = Dialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialog\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/Dialog.tsx"],"names":["clsx","React","useCallback","useEffect","useState","t","useIsMobile","KEYS","back","close","Island","Modal","useRefState","refValue","setRefValue","refCallback","value","Dialog","props","islandNode","setIslandNode","focusableElements","queryFocusableElements","length","autofocus","focus","handleKeyDown","event","key","TAB","activeElement","document","currentIndex","findIndex","element","shiftKey","preventDefault","addEventListener","removeEventListener","node","querySelectorAll","Array","from","className","small","onCloseRequest","title","children"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,CAAT,QAAkB,SAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,OAAO,eAAP;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,SAA5B;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,KAAT,QAAsB,SAAtB;;AAEA,MAAMC,WAAW,GAAG,MAAU;AAAA;;AAC5B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAW,IAAX,CAAxC;AACA,QAAMW,WAAW,GAAGb,WAAW,CAAEc,KAAD,IAAc;AAC5CF,IAAAA,WAAW,CAACE,KAAD,CAAX;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAGA,SAAO,CAACH,QAAD,EAAWE,WAAX,CAAP;AACD,CAND;;GAAMH,W;;AAQN,OAAO,MAAMK,MAAM,GAAIC,KAAD,IAOhB;AAAA;;AACJ,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,WAAW,EAA/C;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACgB,UAAL,EAAiB;AACf;AACD;;AAED,UAAME,iBAAiB,GAAGC,sBAAsB,CAACH,UAAD,CAAhD;;AAEA,QAAIE,iBAAiB,CAACE,MAAlB,GAA2B,CAA3B,IAAgCL,KAAK,CAACM,SAAN,KAAoB,KAAxD,EAA+D;AAC7D;AACA,OAACH,iBAAiB,CAAC,CAAD,CAAjB,IAAwBA,iBAAiB,CAAC,CAAD,CAA1C,EAA+CI,KAA/C;AACD;;AAED,UAAMC,aAAa,GAAIC,KAAD,IAA0B;AAC9C,UAAIA,KAAK,CAACC,GAAN,KAAcrB,IAAI,CAACsB,GAAvB,EAA4B;AAC1B,cAAMR,iBAAiB,GAAGC,sBAAsB,CAACH,UAAD,CAAhD;AACA,cAAM;AAAEW,UAAAA;AAAF,YAAoBC,QAA1B;AACA,cAAMC,YAAY,GAAGX,iBAAiB,CAACY,SAAlB,CAClBC,OAAD,IAAaA,OAAO,KAAKJ,aADN,CAArB;;AAIA,YAAIE,YAAY,KAAK,CAAjB,IAAsBL,KAAK,CAACQ,QAAhC,EAA0C;AACxCd,UAAAA,iBAAiB,CAACA,iBAAiB,CAACE,MAAlB,GAA2B,CAA5B,CAAjB,CAAgDE,KAAhD;AACAE,UAAAA,KAAK,CAACS,cAAN;AACD,SAHD,MAGO,IACLJ,YAAY,KAAKX,iBAAiB,CAACE,MAAlB,GAA2B,CAA5C,IACA,CAACI,KAAK,CAACQ,QAFF,EAGL;AACAd,UAAAA,iBAAiB,CAAC,CAAD,CAAjB,CAAqBI,KAArB;AACAE,UAAAA,KAAK,CAACS,cAAN;AACD;AACF;AACF,KAnBD;;AAqBAjB,IAAAA,UAAU,CAACkB,gBAAX,CAA4B,SAA5B,EAAuCX,aAAvC;AAEA,WAAO,MAAMP,UAAU,CAACmB,mBAAX,CAA+B,SAA/B,EAA0CZ,aAA1C,CAAb;AACD,GApCQ,EAoCN,CAACP,UAAD,EAAaD,KAAK,CAACM,SAAnB,CApCM,CAAT;;AAsCA,QAAMF,sBAAsB,GAAIiB,IAAD,IAAuB;AACpD,UAAMlB,iBAAiB,GAAGkB,IAAI,CAACC,gBAAL,CACxB,mDADwB,CAA1B;AAIA,WAAOnB,iBAAiB,GAAGoB,KAAK,CAACC,IAAN,CAAWrB,iBAAX,CAAH,GAAmC,EAA3D;AACD,GAND;;AAQA,sBACE,QAAC,KAAD;AACE,IAAA,SAAS,EAAErB,IAAI,CAAC,QAAD,EAAWkB,KAAK,CAACyB,SAAjB,CADjB;AAEE,IAAA,UAAU,EAAC,cAFb;AAGE,IAAA,QAAQ,EAAEzB,KAAK,CAAC0B,KAAN,GAAc,GAAd,GAAoB,GAHhC;AAIE,IAAA,cAAc,EAAE1B,KAAK,CAAC2B,cAJxB;AAAA,2BAME,QAAC,MAAD;AAAQ,MAAA,GAAG,EAAEzB,aAAb;AAAA,8BACE;AAAI,QAAA,EAAE,EAAC,cAAP;AAAsB,QAAA,SAAS,EAAC,eAAhC;AAAA,gCACE;AAAM,UAAA,SAAS,EAAC,sBAAhB;AAAA,oBAAwCF,KAAK,CAAC4B;AAA9C;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,cADZ;AAEE,UAAA,OAAO,EAAE5B,KAAK,CAAC2B,cAFjB;AAGE,wBAAYxC,CAAC,CAAC,eAAD,CAHf;AAAA,oBAKGC,WAAW,KAAKE,IAAL,GAAYC;AAL1B;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,kBAAkCS,KAAK,CAAC6B;AAAxC;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA9EM;;IAAM9B,M;UAQyBL,W,EA+DzBN,W;;;KAvEAW,M","sourcesContent":["import clsx from \"clsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { KEYS } from \"../keys\";\nimport \"./Dialog.scss\";\nimport { back, close } from \"./icons\";\nimport { Island } from \"./Island\";\nimport { Modal } from \"./Modal\";\n\nconst useRefState = <T,>() => {\n  const [refValue, setRefValue] = useState<T | null>(null);\n  const refCallback = useCallback((value: T) => {\n    setRefValue(value);\n  }, []);\n  return [refValue, refCallback] as const;\n};\n\nexport const Dialog = (props: {\n  children: React.ReactNode;\n  className?: string;\n  small?: boolean;\n  onCloseRequest(): void;\n  title: React.ReactNode;\n  autofocus?: boolean;\n}) => {\n  const [islandNode, setIslandNode] = useRefState<HTMLDivElement>();\n\n  useEffect(() => {\n    if (!islandNode) {\n      return;\n    }\n\n    const focusableElements = queryFocusableElements(islandNode);\n\n    if (focusableElements.length > 0 && props.autofocus !== false) {\n      // If there's an element other than close, focus it.\n      (focusableElements[1] || focusableElements[0]).focus();\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === KEYS.TAB) {\n        const focusableElements = queryFocusableElements(islandNode);\n        const { activeElement } = document;\n        const currentIndex = focusableElements.findIndex(\n          (element) => element === activeElement,\n        );\n\n        if (currentIndex === 0 && event.shiftKey) {\n          focusableElements[focusableElements.length - 1].focus();\n          event.preventDefault();\n        } else if (\n          currentIndex === focusableElements.length - 1 &&\n          !event.shiftKey\n        ) {\n          focusableElements[0].focus();\n          event.preventDefault();\n        }\n      }\n    };\n\n    islandNode.addEventListener(\"keydown\", handleKeyDown);\n\n    return () => islandNode.removeEventListener(\"keydown\", handleKeyDown);\n  }, [islandNode, props.autofocus]);\n\n  const queryFocusableElements = (node: HTMLElement) => {\n    const focusableElements = node.querySelectorAll<HTMLElement>(\n      \"button, a, input, select, textarea, div[tabindex]\",\n    );\n\n    return focusableElements ? Array.from(focusableElements) : [];\n  };\n\n  return (\n    <Modal\n      className={clsx(\"Dialog\", props.className)}\n      labelledBy=\"dialog-title\"\n      maxWidth={props.small ? 550 : 800}\n      onCloseRequest={props.onCloseRequest}\n    >\n      <Island ref={setIslandNode}>\n        <h3 id=\"dialog-title\" className=\"Dialog__title\">\n          <span className=\"Dialog__titleContent\">{props.title}</span>\n          <button\n            className=\"Modal__close\"\n            onClick={props.onCloseRequest}\n            aria-label={t(\"buttons.close\")}\n          >\n            {useIsMobile() ? back : close}\n          </button>\n        </h3>\n        <div className=\"Dialog__content\">{props.children}</div>\n      </Island>\n    </Modal>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}