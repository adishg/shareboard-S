{"ast":null,"code":"import * as GA from \"./ga\";\nimport * as GADirection from \"./gadirections\";\n/**\n * TODO: docs\n */\n\nexport const rotation = (pivot, angle) => GA.add(GA.mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));\nexport const translation = direction => [1, 0, 0, 0, -(0.5 * direction[5]), 0.5 * direction[4], 0, 0];\nexport const translationOrthogonal = (direction, distance) => {\n  const scale = 0.5 * distance;\n  return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];\n};\nexport const translationAlong = (line, distance) => GA.add(GA.mul(GADirection.orthogonalToLine(line), 0.5 * distance), 1);\nexport const compose = (motor1, motor2) => GA.mul(motor2, motor1);\nexport const apply = (motor, nvector) => GA.normalized(GA.mul(GA.mul(motor, nvector), GA.reverse(motor)));","map":{"version":3,"sources":["/var/www/html/excalidraw/src/gatransforms.ts"],"names":["GA","GADirection","rotation","pivot","angle","add","mul","Math","sin","cos","translation","direction","translationOrthogonal","distance","scale","translationAlong","line","orthogonalToLine","compose","motor1","motor2","apply","motor","nvector","normalized","reverse"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,MAApB;AAEA,OAAO,KAAKC,WAAZ,MAA6B,gBAA7B;AAEA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAeC,KAAf,KACtBJ,EAAE,CAACK,GAAH,CAAOL,EAAE,CAACM,GAAH,CAAOH,KAAP,EAAcI,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAG,CAAjB,CAAd,CAAP,EAA2CG,IAAI,CAACE,GAAL,CAASL,KAAK,GAAG,CAAjB,CAA3C,CADK;AAGP,OAAO,MAAMM,WAAW,GAAIC,SAAD,IAAqC,CAC9D,CAD8D,EAE9D,CAF8D,EAG9D,CAH8D,EAI9D,CAJ8D,EAK9D,EAAE,MAAMA,SAAS,CAAC,CAAD,CAAjB,CAL8D,EAM9D,MAAMA,SAAS,CAAC,CAAD,CAN+C,EAO9D,CAP8D,EAQ9D,CAR8D,CAAzD;AAWP,OAAO,MAAMC,qBAAqB,GAAG,CACnCD,SADmC,EAEnCE,QAFmC,KAGrB;AACd,QAAMC,KAAK,GAAG,MAAMD,QAApB;AACA,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaC,KAAK,GAAGH,SAAS,CAAC,CAAD,CAA9B,EAAmCG,KAAK,GAAGH,SAAS,CAAC,CAAD,CAApD,EAAyD,CAAzD,EAA4D,CAA5D,CAAP;AACD,CANM;AAQP,OAAO,MAAMI,gBAAgB,GAAG,CAACC,IAAD,EAAaH,QAAb,KAC9Bb,EAAE,CAACK,GAAH,CAAOL,EAAE,CAACM,GAAH,CAAOL,WAAW,CAACgB,gBAAZ,CAA6BD,IAA7B,CAAP,EAA2C,MAAMH,QAAjD,CAAP,EAAmE,CAAnE,CADK;AAGP,OAAO,MAAMK,OAAO,GAAG,CAACC,MAAD,EAAoBC,MAApB,KACrBpB,EAAE,CAACM,GAAH,CAAOc,MAAP,EAAeD,MAAf,CADK;AAGP,OAAO,MAAME,KAAK,GAAG,CACnBC,KADmB,EAEnBC,OAFmB,KAInBvB,EAAE,CAACwB,UAAH,CAAcxB,EAAE,CAACM,GAAH,CAAON,EAAE,CAACM,GAAH,CAAOgB,KAAP,EAAcC,OAAd,CAAP,EAA+BvB,EAAE,CAACyB,OAAH,CAAWH,KAAX,CAA/B,CAAd,CAJK","sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Direction, Point, Transform } from \"./ga\";\nimport * as GADirection from \"./gadirections\";\n\n/**\n * TODO: docs\n */\n\nexport const rotation = (pivot: Point, angle: number): Transform =>\n  GA.add(GA.mul(pivot, Math.sin(angle / 2)), Math.cos(angle / 2));\n\nexport const translation = (direction: Direction): Transform => [\n  1,\n  0,\n  0,\n  0,\n  -(0.5 * direction[5]),\n  0.5 * direction[4],\n  0,\n  0,\n];\n\nexport const translationOrthogonal = (\n  direction: Direction,\n  distance: number,\n): Transform => {\n  const scale = 0.5 * distance;\n  return [1, 0, 0, 0, scale * direction[4], scale * direction[5], 0, 0];\n};\n\nexport const translationAlong = (line: Line, distance: number): Transform =>\n  GA.add(GA.mul(GADirection.orthogonalToLine(line), 0.5 * distance), 1);\n\nexport const compose = (motor1: Transform, motor2: Transform): Transform =>\n  GA.mul(motor2, motor1);\n\nexport const apply = (\n  motor: Transform,\n  nvector: Point | Direction | Line,\n): Point | Direction | Line =>\n  GA.normalized(GA.mul(GA.mul(motor, nvector), GA.reverse(motor)));\n"]},"metadata":{},"sourceType":"module"}