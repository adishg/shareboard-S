{"ast":null,"code":"import { fileOpen, fileSave } from \"browser-nativefs\";\nimport { cleanAppStateForExport } from \"../appState\";\nimport { MIME_TYPES } from \"../constants\";\nimport { clearElementsForExport } from \"../element\";\nimport { loadFromBlob } from \"./blob\";\nimport { Library } from \"./library\";\nexport const serializeAsJSON = (elements, appState) => JSON.stringify({\n  type: \"excalidraw\",\n  version: 2,\n  source: window.location.origin,\n  elements: clearElementsForExport(elements),\n  appState: cleanAppStateForExport(appState)\n}, null, 2);\nexport const saveAsJSON = async (elements, appState) => {\n  const serialized = serializeAsJSON(elements, appState);\n  const blob = new Blob([serialized], {\n    type: \"application/json\"\n  });\n  const fileHandle = await fileSave(blob, {\n    fileName: appState.name,\n    description: \"Excalidraw file\",\n    extensions: [\".excalidraw\"]\n  }, appState.fileHandle);\n  return {\n    fileHandle\n  };\n};\nexport const loadFromJSON = async localAppState => {\n  const blob = await fileOpen({\n    description: \"Excalidraw files\",\n    extensions: [\".json\", \".excalidraw\", \".png\", \".svg\"],\n    mimeTypes: [\"application/json\", \"image/png\", \"image/svg+xml\"]\n  });\n  return loadFromBlob(blob, localAppState);\n};\nexport const isValidLibrary = json => {\n  return typeof json === \"object\" && json && json.type === \"excalidrawlib\" && json.version === 1;\n};\nexport const saveLibraryAsJSON = async () => {\n  const library = await Library.loadLibrary();\n  const serialized = JSON.stringify({\n    type: \"excalidrawlib\",\n    version: 1,\n    library\n  }, null, 2);\n  const fileName = \"library.excalidrawlib\";\n  const blob = new Blob([serialized], {\n    type: MIME_TYPES.excalidrawlib\n  });\n  await fileSave(blob, {\n    fileName,\n    description: \"Excalidraw library file\",\n    extensions: [\".excalidrawlib\"]\n  });\n};\nexport const importLibraryFromJSON = async () => {\n  const blob = await fileOpen({\n    description: \"Excalidraw library files\",\n    extensions: [\".json\", \".excalidrawlib\"],\n    mimeTypes: [\"application/json\"]\n  });\n  Library.importLibrary(blob);\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/data/json.ts"],"names":["fileOpen","fileSave","cleanAppStateForExport","MIME_TYPES","clearElementsForExport","loadFromBlob","Library","serializeAsJSON","elements","appState","JSON","stringify","type","version","source","window","location","origin","saveAsJSON","serialized","blob","Blob","fileHandle","fileName","name","description","extensions","loadFromJSON","localAppState","mimeTypes","isValidLibrary","json","saveLibraryAsJSON","library","loadLibrary","excalidrawlib","importLibraryFromJSON","importLibrary"],"mappings":"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","sourcesContent":["import { fileOpen, fileSave } from \"browser-nativefs\";\nimport { cleanAppStateForExport } from \"../appState\";\nimport { MIME_TYPES } from \"../constants\";\nimport { clearElementsForExport } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { loadFromBlob } from \"./blob\";\nimport { Library } from \"./library\";\n\nexport const serializeAsJSON = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n): string =>\n  JSON.stringify(\n    {\n      type: \"excalidraw\",\n      version: 2,\n      source: window.location.origin,\n      elements: clearElementsForExport(elements),\n      appState: cleanAppStateForExport(appState),\n    },\n    null,\n    2,\n  );\n\nexport const saveAsJSON = async (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => {\n  const serialized = serializeAsJSON(elements, appState);\n  const blob = new Blob([serialized], {\n    type: \"application/json\",\n  });\n\n  const fileHandle = await fileSave(\n    blob,\n    {\n      fileName: appState.name,\n      description: \"Excalidraw file\",\n      extensions: [\".excalidraw\"],\n    },\n    appState.fileHandle,\n  );\n  return { fileHandle };\n};\n\nexport const loadFromJSON = async (localAppState: AppState) => {\n  const blob = await fileOpen({\n    description: \"Excalidraw files\",\n    extensions: [\".json\", \".excalidraw\", \".png\", \".svg\"],\n    mimeTypes: [\"application/json\", \"image/png\", \"image/svg+xml\"],\n  });\n  return loadFromBlob(blob, localAppState);\n};\n\nexport const isValidLibrary = (json: any) => {\n  return (\n    typeof json === \"object\" &&\n    json &&\n    json.type === \"excalidrawlib\" &&\n    json.version === 1\n  );\n};\n\nexport const saveLibraryAsJSON = async () => {\n  const library = await Library.loadLibrary();\n  const serialized = JSON.stringify(\n    {\n      type: \"excalidrawlib\",\n      version: 1,\n      library,\n    },\n    null,\n    2,\n  );\n  const fileName = \"library.excalidrawlib\";\n  const blob = new Blob([serialized], {\n    type: MIME_TYPES.excalidrawlib,\n  });\n  await fileSave(blob, {\n    fileName,\n    description: \"Excalidraw library file\",\n    extensions: [\".excalidrawlib\"],\n  });\n};\n\nexport const importLibraryFromJSON = async () => {\n  const blob = await fileOpen({\n    description: \"Excalidraw library files\",\n    extensions: [\".json\", \".excalidrawlib\"],\n    mimeTypes: [\"application/json\"],\n  });\n  Library.importLibrary(blob);\n};\n"]},"metadata":{},"sourceType":"module"}