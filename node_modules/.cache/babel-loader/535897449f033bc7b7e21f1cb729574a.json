{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionHistory.tsx\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { getElementMap } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { fixBindingsAfterDeletion } from \"../element/binding\";\n\nconst writeData = (prevElements, appState, updater) => {\n  const commitToHistory = false;\n\n  if (!appState.multiElement && !appState.resizingElement && !appState.editingElement && !appState.draggingElement) {\n    const data = updater();\n\n    if (data === null) {\n      return {\n        commitToHistory\n      };\n    }\n\n    const prevElementMap = getElementMap(prevElements);\n    const nextElements = data.elements;\n    const nextElementMap = getElementMap(nextElements);\n    const deletedElements = prevElements.filter(prevElement => !nextElementMap.hasOwnProperty(prevElement.id));\n    const elements = nextElements.map(nextElement => newElementWith(prevElementMap[nextElement.id] || nextElement, nextElement)).concat(deletedElements.map(prevElement => newElementWith(prevElement, {\n      isDeleted: true\n    })));\n    fixBindingsAfterDeletion(elements, deletedElements);\n    return {\n      elements,\n      appState: { ...appState,\n        ...data.appState\n      },\n      commitToHistory,\n      syncHistory: true\n    };\n  }\n\n  return {\n    commitToHistory\n  };\n};\n\nconst testUndo = shift => event => event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n\nexport const createUndoAction = history => ({\n  name: \"undo\",\n  perform: (elements, appState) => writeData(elements, appState, () => history.undoOnce()),\n  keyTest: testUndo(false),\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    type: \"button\",\n    icon: undo,\n    \"aria-label\": t(\"buttons.undo\"),\n    onClick: updateData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this),\n  commitToHistory: () => false\n});\nexport const createRedoAction = history => ({\n  name: \"redo\",\n  perform: (elements, appState) => writeData(elements, appState, () => history.redoOnce()),\n  keyTest: testUndo(true),\n  PanelComponent: ({\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    type: \"button\",\n    icon: redo,\n    \"aria-label\": t(\"buttons.redo\"),\n    onClick: updateData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this),\n  commitToHistory: () => false\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionHistory.tsx"],"names":["React","undo","redo","ToolButton","t","KEYS","getElementMap","newElementWith","fixBindingsAfterDeletion","writeData","prevElements","appState","updater","commitToHistory","multiElement","resizingElement","editingElement","draggingElement","data","prevElementMap","nextElements","elements","nextElementMap","deletedElements","filter","prevElement","hasOwnProperty","id","map","nextElement","concat","isDeleted","syncHistory","testUndo","shift","event","CTRL_OR_CMD","test","key","shiftKey","createUndoAction","history","name","perform","undoOnce","keyTest","PanelComponent","updateData","createRedoAction","redoOnce"],"mappings":"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","sourcesContent":["import { Action, ActionResult } from \"./types\";\nimport React from \"react\";\nimport { undo, redo } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { t } from \"../i18n\";\nimport { SceneHistory, HistoryEntry } from \"../history\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { KEYS } from \"../keys\";\nimport { getElementMap } from \"../element\";\nimport { newElementWith } from \"../element/mutateElement\";\nimport { fixBindingsAfterDeletion } from \"../element/binding\";\n\nconst writeData = (\n  prevElements: readonly ExcalidrawElement[],\n  appState: AppState,\n  updater: () => HistoryEntry | null,\n): ActionResult => {\n  const commitToHistory = false;\n  if (\n    !appState.multiElement &&\n    !appState.resizingElement &&\n    !appState.editingElement &&\n    !appState.draggingElement\n  ) {\n    const data = updater();\n    if (data === null) {\n      return { commitToHistory };\n    }\n\n    const prevElementMap = getElementMap(prevElements);\n    const nextElements = data.elements;\n    const nextElementMap = getElementMap(nextElements);\n\n    const deletedElements = prevElements.filter(\n      (prevElement) => !nextElementMap.hasOwnProperty(prevElement.id),\n    );\n    const elements = nextElements\n      .map((nextElement) =>\n        newElementWith(\n          prevElementMap[nextElement.id] || nextElement,\n          nextElement,\n        ),\n      )\n      .concat(\n        deletedElements.map((prevElement) =>\n          newElementWith(prevElement, { isDeleted: true }),\n        ),\n      );\n    fixBindingsAfterDeletion(elements, deletedElements);\n\n    return {\n      elements,\n      appState: { ...appState, ...data.appState },\n      commitToHistory,\n      syncHistory: true,\n    };\n  }\n  return { commitToHistory };\n};\n\nconst testUndo = (shift: boolean) => (event: KeyboardEvent) =>\n  event[KEYS.CTRL_OR_CMD] && /z/i.test(event.key) && event.shiftKey === shift;\n\ntype ActionCreator = (history: SceneHistory) => Action;\n\nexport const createUndoAction: ActionCreator = (history) => ({\n  name: \"undo\",\n  perform: (elements, appState) =>\n    writeData(elements, appState, () => history.undoOnce()),\n  keyTest: testUndo(false),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={undo}\n      aria-label={t(\"buttons.undo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n\nexport const createRedoAction: ActionCreator = (history) => ({\n  name: \"redo\",\n  perform: (elements, appState) =>\n    writeData(elements, appState, () => history.redoOnce()),\n  keyTest: testUndo(true),\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={redo}\n      aria-label={t(\"buttons.redo\")}\n      onClick={updateData}\n    />\n  ),\n  commitToHistory: () => false,\n});\n"]},"metadata":{},"sourceType":"module"}