{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionAlign.tsx\";\nimport React from \"react\";\nimport { alignElements } from \"../align\";\nimport { AlignBottomIcon, AlignLeftIcon, AlignRightIcon, AlignTopIcon, CenterHorizontallyIcon, CenterVerticallyIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { getElementMap, getNonDeletedElements } from \"../element\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (elements, appState) => getSelectedElements(getNonDeletedElements(elements), appState).length > 1;\n\nconst alignSelectedElements = (elements, appState, alignment) => {\n  const selectedElements = getSelectedElements(getNonDeletedElements(elements), appState);\n  const updatedElements = alignElements(selectedElements, alignment);\n  const updatedElementsMap = getElementMap(updatedElements);\n  return elements.map(element => updatedElementsMap[element.id] || element);\n};\n\nexport const actionAlignTop = register({\n  name: \"alignTop\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"start\",\n        axis: \"y\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_UP,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(AlignTopIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.alignTop\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+Up\")}`,\n    \"aria-label\": t(\"labels.alignTop\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n});\nexport const actionAlignBottom = register({\n  name: \"alignBottom\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"end\",\n        axis: \"y\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_DOWN,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(AlignBottomIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.alignBottom\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+Down\")}`,\n    \"aria-label\": t(\"labels.alignBottom\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this)\n});\nexport const actionAlignLeft = register({\n  name: \"alignLeft\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"start\",\n        axis: \"x\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_LEFT,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(AlignLeftIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.alignLeft\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+Left\")}`,\n    \"aria-label\": t(\"labels.alignLeft\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this)\n});\nexport const actionAlignRight = register({\n  name: \"alignRight\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"end\",\n        axis: \"x\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_RIGHT,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(AlignRightIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.alignRight\")} — ${getShortcutKey(\"CtrlOrCmd+Shift+Right\")}`,\n    \"aria-label\": t(\"labels.alignRight\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this)\n});\nexport const actionAlignVerticallyCentered = register({\n  name: \"alignVerticallyCentered\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"center\",\n        axis: \"y\"\n      }),\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(CenterVerticallyIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: t(\"labels.centerVertically\"),\n    \"aria-label\": t(\"labels.centerVertically\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this)\n});\nexport const actionAlignHorizontallyCentered = register({\n  name: \"alignHorizontallyCentered\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"center\",\n        axis: \"x\"\n      }),\n      commitToHistory: true\n    };\n  },\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(CenterHorizontallyIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: t(\"labels.centerHorizontally\"),\n    \"aria-label\": t(\"labels.centerHorizontally\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this)\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionAlign.tsx"],"names":["React","alignElements","AlignBottomIcon","AlignLeftIcon","AlignRightIcon","AlignTopIcon","CenterHorizontallyIcon","CenterVerticallyIcon","ToolButton","getElementMap","getNonDeletedElements","t","KEYS","getSelectedElements","isSomeElementSelected","getShortcutKey","register","enableActionGroup","elements","appState","length","alignSelectedElements","alignment","selectedElements","updatedElements","updatedElementsMap","map","element","id","actionAlignTop","name","perform","position","axis","commitToHistory","keyTest","event","CTRL_OR_CMD","shiftKey","key","ARROW_UP","PanelComponent","updateData","appearance","actionAlignBottom","ARROW_DOWN","actionAlignLeft","ARROW_LEFT","actionAlignRight","ARROW_RIGHT","actionAlignVerticallyCentered","actionAlignHorizontallyCentered"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { alignElements, Alignment } from \"../align\";\nimport {\n  AlignBottomIcon,\n  AlignLeftIcon,\n  AlignRightIcon,\n  AlignTopIcon,\n  CenterHorizontallyIcon,\n  CenterVerticallyIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { getElementMap, getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { KEYS } from \"../keys\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { AppState } from \"../types\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => getSelectedElements(getNonDeletedElements(elements), appState).length > 1;\n\nconst alignSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  alignment: Alignment,\n) => {\n  const selectedElements = getSelectedElements(\n    getNonDeletedElements(elements),\n    appState,\n  );\n\n  const updatedElements = alignElements(selectedElements, alignment);\n\n  const updatedElementsMap = getElementMap(updatedElements);\n\n  return elements.map((element) => updatedElementsMap[element.id] || element);\n};\n\nexport const actionAlignTop = register({\n  name: \"alignTop\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"start\",\n        axis: \"y\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_UP,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<AlignTopIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignTop\")} — ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Up\",\n      )}`}\n      aria-label={t(\"labels.alignTop\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignBottom = register({\n  name: \"alignBottom\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"end\",\n        axis: \"y\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_DOWN,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<AlignBottomIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignBottom\")} — ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Down\",\n      )}`}\n      aria-label={t(\"labels.alignBottom\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignLeft = register({\n  name: \"alignLeft\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"start\",\n        axis: \"x\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_LEFT,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<AlignLeftIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignLeft\")} — ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Left\",\n      )}`}\n      aria-label={t(\"labels.alignLeft\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignRight = register({\n  name: \"alignRight\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"end\",\n        axis: \"x\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.shiftKey && event.key === KEYS.ARROW_RIGHT,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<AlignRightIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.alignRight\")} — ${getShortcutKey(\n        \"CtrlOrCmd+Shift+Right\",\n      )}`}\n      aria-label={t(\"labels.alignRight\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignVerticallyCentered = register({\n  name: \"alignVerticallyCentered\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"center\",\n        axis: \"y\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<CenterVerticallyIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={t(\"labels.centerVertically\")}\n      aria-label={t(\"labels.centerVertically\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const actionAlignHorizontallyCentered = register({\n  name: \"alignHorizontallyCentered\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: alignSelectedElements(elements, appState, {\n        position: \"center\",\n        axis: \"x\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<CenterHorizontallyIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={t(\"labels.centerHorizontally\")}\n      aria-label={t(\"labels.centerHorizontally\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}