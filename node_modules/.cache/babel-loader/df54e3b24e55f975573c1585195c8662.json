{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/packages/excalidraw/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, forwardRef } from \"react\";\nimport { InitializeApp } from \"../../components/InitializeApp\";\nimport App from \"../../components/App\";\nimport \"../../css/app.scss\";\nimport \"../../css/styles.scss\";\nimport { IsMobileProvider } from \"../../is-mobile\";\nimport { defaultLang } from \"../../i18n\";\n\nconst Excalidraw = props => {\n  _s();\n\n  const {\n    width,\n    height,\n    offsetLeft,\n    offsetTop,\n    onChange,\n    initialData,\n    user,\n    excalidrawRef,\n    onCollabButtonClick,\n    isCollaborating,\n    onPointerUpdate,\n    onExportToBackend,\n    renderFooter,\n    langCode = defaultLang.code\n  } = props;\n  useEffect(() => {\n    // Block pinch-zooming on iOS outside of the content area\n    const handleTouchMove = event => {\n      // @ts-ignore\n      if (typeof event.scale === \"number\" && event.scale !== 1) {\n        event.preventDefault();\n      }\n    };\n\n    document.addEventListener(\"touchmove\", handleTouchMove, {\n      passive: false\n    });\n    return () => {\n      document.removeEventListener(\"touchmove\", handleTouchMove);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(InitializeApp, {\n    langCode: langCode,\n    children: /*#__PURE__*/_jsxDEV(IsMobileProvider, {\n      children: /*#__PURE__*/_jsxDEV(App, {\n        width: width,\n        height: height,\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        onChange: onChange,\n        initialData: initialData,\n        user: user,\n        excalidrawRef: excalidrawRef,\n        onCollabButtonClick: onCollabButtonClick,\n        isCollaborating: isCollaborating,\n        onPointerUpdate: onPointerUpdate,\n        onExportToBackend: onExportToBackend,\n        renderFooter: renderFooter,\n        langCode: langCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Excalidraw, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Excalidraw;\n\nconst areEqual = (prevProps, nextProps) => {\n  const {\n    initialData: prevInitialData,\n    user: prevUser,\n    ...prev\n  } = prevProps;\n  const {\n    initialData: nextInitialData,\n    user: nextUser,\n    ...next\n  } = nextProps;\n  const prevKeys = Object.keys(prevProps);\n  const nextKeys = Object.keys(nextProps);\n  return (prevUser === null || prevUser === void 0 ? void 0 : prevUser.name) === (nextUser === null || nextUser === void 0 ? void 0 : nextUser.name) && prevKeys.length === nextKeys.length && prevKeys.every(key => prev[key] === next[key]);\n};\n\nconst forwardedRefComp = /*#__PURE__*/forwardRef((props, ref) => /*#__PURE__*/_jsxDEV(Excalidraw, { ...props,\n  excalidrawRef: ref\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 19\n}, this));\nexport default /*#__PURE__*/React.memo(forwardedRefComp, areEqual);\nexport { getSceneVersion, getSyncableElements, getElementMap } from \"../../element\";\nexport { defaultLang, languages } from \"../../i18n\";\n\nvar _c;\n\n$RefreshReg$(_c, \"Excalidraw\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/packages/excalidraw/index.tsx"],"names":["React","useEffect","forwardRef","InitializeApp","App","IsMobileProvider","defaultLang","Excalidraw","props","width","height","offsetLeft","offsetTop","onChange","initialData","user","excalidrawRef","onCollabButtonClick","isCollaborating","onPointerUpdate","onExportToBackend","renderFooter","langCode","code","handleTouchMove","event","scale","preventDefault","document","addEventListener","passive","removeEventListener","areEqual","prevProps","nextProps","prevInitialData","prevUser","prev","nextInitialData","nextUser","next","prevKeys","Object","keys","nextKeys","name","length","every","key","forwardedRefComp","ref","memo","getSceneVersion","getSyncableElements","getElementMap","languages"],"mappings":"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","sourcesContent":["import React, { useEffect, forwardRef } from \"react\";\n\nimport { InitializeApp } from \"../../components/InitializeApp\";\nimport App from \"../../components/App\";\n\nimport \"../../css/app.scss\";\nimport \"../../css/styles.scss\";\n\nimport { ExcalidrawAPIRefValue, ExcalidrawProps } from \"../../types\";\nimport { IsMobileProvider } from \"../../is-mobile\";\nimport { defaultLang } from \"../../i18n\";\n\nconst Excalidraw = (props: ExcalidrawProps) => {\n  const {\n    width,\n    height,\n    offsetLeft,\n    offsetTop,\n    onChange,\n    initialData,\n    user,\n    excalidrawRef,\n    onCollabButtonClick,\n    isCollaborating,\n    onPointerUpdate,\n    onExportToBackend,\n    renderFooter,\n    langCode = defaultLang.code,\n  } = props;\n\n  useEffect(() => {\n    // Block pinch-zooming on iOS outside of the content area\n    const handleTouchMove = (event: TouchEvent) => {\n      // @ts-ignore\n      if (typeof event.scale === \"number\" && event.scale !== 1) {\n        event.preventDefault();\n      }\n    };\n\n    document.addEventListener(\"touchmove\", handleTouchMove, {\n      passive: false,\n    });\n\n    return () => {\n      document.removeEventListener(\"touchmove\", handleTouchMove);\n    };\n  }, []);\n\n  return (\n    <InitializeApp langCode={langCode}>\n      <IsMobileProvider>\n        <App\n          width={width}\n          height={height}\n          offsetLeft={offsetLeft}\n          offsetTop={offsetTop}\n          onChange={onChange}\n          initialData={initialData}\n          user={user}\n          excalidrawRef={excalidrawRef}\n          onCollabButtonClick={onCollabButtonClick}\n          isCollaborating={isCollaborating}\n          onPointerUpdate={onPointerUpdate}\n          onExportToBackend={onExportToBackend}\n          renderFooter={renderFooter}\n          langCode={langCode}\n        />\n      </IsMobileProvider>\n    </InitializeApp>\n  );\n};\n\ntype PublicExcalidrawProps = Omit<ExcalidrawProps, \"forwardedRef\">;\n\nconst areEqual = (\n  prevProps: PublicExcalidrawProps,\n  nextProps: PublicExcalidrawProps,\n) => {\n  const { initialData: prevInitialData, user: prevUser, ...prev } = prevProps;\n  const { initialData: nextInitialData, user: nextUser, ...next } = nextProps;\n\n  const prevKeys = Object.keys(prevProps) as (keyof typeof prev)[];\n  const nextKeys = Object.keys(nextProps) as (keyof typeof next)[];\n\n  return (\n    prevUser?.name === nextUser?.name &&\n    prevKeys.length === nextKeys.length &&\n    prevKeys.every((key) => prev[key] === next[key])\n  );\n};\n\nconst forwardedRefComp = forwardRef<\n  ExcalidrawAPIRefValue,\n  PublicExcalidrawProps\n>((props, ref) => <Excalidraw {...props} excalidrawRef={ref} />);\nexport default React.memo(forwardedRefComp, areEqual);\nexport {\n  getSceneVersion,\n  getSyncableElements,\n  getElementMap,\n} from \"../../element\";\nexport { defaultLang, languages } from \"../../i18n\";\n"]},"metadata":{},"sourceType":"module"}