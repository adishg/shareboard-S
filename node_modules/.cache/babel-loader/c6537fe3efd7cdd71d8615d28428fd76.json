{"ast":null,"code":"export const isGenericElement = element => {\n  return element != null && (element.type === \"selection\" || element.type === \"rectangle\" || element.type === \"diamond\" || element.type === \"ellipse\");\n};\nexport const isTextElement = element => {\n  return element != null && element.type === \"text\";\n};\nexport const isLinearElement = element => {\n  return element != null && isLinearElementType(element.type);\n};\nexport const isLinearElementType = elementType => {\n  return elementType === \"arrow\" || elementType === \"line\" || elementType === \"draw\";\n};\nexport const isBindingElement = element => {\n  return element != null && isBindingElementType(element.type);\n};\nexport const isBindingElementType = elementType => {\n  return elementType === \"arrow\";\n};\nexport const isBindableElement = element => {\n  return element != null && (element.type === \"rectangle\" || element.type === \"diamond\" || element.type === \"ellipse\" || element.type === \"text\");\n};\nexport const isExcalidrawElement = element => {\n  return (element === null || element === void 0 ? void 0 : element.type) === \"text\" || (element === null || element === void 0 ? void 0 : element.type) === \"diamond\" || (element === null || element === void 0 ? void 0 : element.type) === \"rectangle\" || (element === null || element === void 0 ? void 0 : element.type) === \"ellipse\" || (element === null || element === void 0 ? void 0 : element.type) === \"arrow\" || (element === null || element === void 0 ? void 0 : element.type) === \"draw\" || (element === null || element === void 0 ? void 0 : element.type) === \"line\";\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/element/typeChecks.ts"],"names":["isGenericElement","element","type","isTextElement","isLinearElement","isLinearElementType","elementType","isBindingElement","isBindingElementType","isBindableElement","isExcalidrawElement"],"mappings":"AAQA,OAAO,MAAMA,gBAAgB,GAC3BC,OAD8B,IAEU;AACxC,SACEA,OAAO,IAAI,IAAX,KACCA,OAAO,CAACC,IAAR,KAAiB,WAAjB,IACCD,OAAO,CAACC,IAAR,KAAiB,WADlB,IAECD,OAAO,CAACC,IAAR,KAAiB,SAFlB,IAGCD,OAAO,CAACC,IAAR,KAAiB,SAJnB,CADF;AAOD,CAVM;AAYP,OAAO,MAAMC,aAAa,GACxBF,OAD2B,IAEU;AACrC,SAAOA,OAAO,IAAI,IAAX,IAAmBA,OAAO,CAACC,IAAR,KAAiB,MAA3C;AACD,CAJM;AAMP,OAAO,MAAME,eAAe,GAC1BH,OAD6B,IAEU;AACvC,SAAOA,OAAO,IAAI,IAAX,IAAmBI,mBAAmB,CAACJ,OAAO,CAACC,IAAT,CAA7C;AACD,CAJM;AAMP,OAAO,MAAMG,mBAAmB,GAC9BC,WADiC,IAErB;AACZ,SACEA,WAAW,KAAK,OAAhB,IAA2BA,WAAW,KAAK,MAA3C,IAAqDA,WAAW,KAAK,MADvE;AAGD,CANM;AAQP,OAAO,MAAMC,gBAAgB,GAC3BN,OAD8B,IAES;AACvC,SAAOA,OAAO,IAAI,IAAX,IAAmBO,oBAAoB,CAACP,OAAO,CAACC,IAAT,CAA9C;AACD,CAJM;AAMP,OAAO,MAAMM,oBAAoB,GAC/BF,WADkC,IAEtB;AACZ,SAAOA,WAAW,KAAK,OAAvB;AACD,CAJM;AAMP,OAAO,MAAMG,iBAAiB,GAC5BR,OAD+B,IAEU;AACzC,SACEA,OAAO,IAAI,IAAX,KACCA,OAAO,CAACC,IAAR,KAAiB,WAAjB,IACCD,OAAO,CAACC,IAAR,KAAiB,SADlB,IAECD,OAAO,CAACC,IAAR,KAAiB,SAFlB,IAGCD,OAAO,CAACC,IAAR,KAAiB,MAJnB,CADF;AAOD,CAVM;AAYP,OAAO,MAAMQ,mBAAmB,GAAIT,OAAD,IAA2B;AAC5D,SACE,CAAAA,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,MAAlB,IACA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,SADlB,IAEA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,WAFlB,IAGA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,SAHlB,IAIA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,OAJlB,IAKA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,MALlB,IAMA,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,IAAT,MAAkB,MAPpB;AASD,CAVM","sourcesContent":["import {\n  ExcalidrawElement,\n  ExcalidrawTextElement,\n  ExcalidrawLinearElement,\n  ExcalidrawBindableElement,\n  ExcalidrawGenericElement,\n} from \"./types\";\n\nexport const isGenericElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawGenericElement => {\n  return (\n    element != null &&\n    (element.type === \"selection\" ||\n      element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\")\n  );\n};\n\nexport const isTextElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawTextElement => {\n  return element != null && element.type === \"text\";\n};\n\nexport const isLinearElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return element != null && isLinearElementType(element.type);\n};\n\nexport const isLinearElementType = (\n  elementType: ExcalidrawElement[\"type\"],\n): boolean => {\n  return (\n    elementType === \"arrow\" || elementType === \"line\" || elementType === \"draw\"\n  );\n};\n\nexport const isBindingElement = (\n  element?: ExcalidrawElement | null,\n): element is ExcalidrawLinearElement => {\n  return element != null && isBindingElementType(element.type);\n};\n\nexport const isBindingElementType = (\n  elementType: ExcalidrawElement[\"type\"],\n): boolean => {\n  return elementType === \"arrow\";\n};\n\nexport const isBindableElement = (\n  element: ExcalidrawElement | null,\n): element is ExcalidrawBindableElement => {\n  return (\n    element != null &&\n    (element.type === \"rectangle\" ||\n      element.type === \"diamond\" ||\n      element.type === \"ellipse\" ||\n      element.type === \"text\")\n  );\n};\n\nexport const isExcalidrawElement = (element: any): boolean => {\n  return (\n    element?.type === \"text\" ||\n    element?.type === \"diamond\" ||\n    element?.type === \"rectangle\" ||\n    element?.type === \"ellipse\" ||\n    element?.type === \"arrow\" ||\n    element?.type === \"draw\" ||\n    element?.type === \"line\"\n  );\n};\n"]},"metadata":{},"sourceType":"module"}