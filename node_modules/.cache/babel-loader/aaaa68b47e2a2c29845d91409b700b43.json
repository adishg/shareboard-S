{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/excalidraw-app/index.tsx\",\n    _s = $RefreshSig$();\n\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport React, { useCallback, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ErrorDialog } from \"../components/ErrorDialog\";\nimport { TopErrorBoundary } from \"../components/TopErrorBoundary\";\nimport { APP_NAME, EVENT, TITLE_TIMEOUT, VERSION_TIMEOUT } from \"../constants\";\nimport { t } from \"../i18n\";\nimport Excalidraw, { defaultLang, languages } from \"../packages/excalidraw/index\";\nimport { debounce, getVersion, resolvablePromise } from \"../utils\";\nimport { SAVE_TO_LOCAL_STORAGE_TIMEOUT } from \"./app_constants\";\nimport CollabWrapper from \"./collab/CollabWrapper\";\nimport { LanguageList } from \"./components/LanguageList\";\nimport { exportToBackend, getCollaborationLinkData, loadScene } from \"./data\";\nimport { loadFromFirebase } from \"./data/firebase\";\nimport { importFromLocalStorage, saveToLocalStorage, STORAGE_KEYS } from \"./data/localStorage\";\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: langCode => langCode,\n    isWhitelisted: () => true\n  },\n  checkWhitelist: false\n});\nconst excalidrawRef = {\n  current: {\n    readyPromise: resolvablePromise(),\n    ready: false\n  }\n};\nconst saveDebounced = debounce((elements, state) => {\n  saveToLocalStorage(elements, state);\n}, SAVE_TO_LOCAL_STORAGE_TIMEOUT);\n\nconst onBlur = () => {\n  saveDebounced.flush();\n};\n\nconst shouldForceLoadScene = scene => {\n  if (!scene.elements.length) {\n    return true;\n  }\n\n  const roomMatch = getCollaborationLinkData(window.location.href);\n\n  if (!roomMatch) {\n    return false;\n  }\n\n  const roomId = roomMatch[1];\n  let collabForceLoadFlag;\n\n  try {\n    var _localStorage;\n\n    collabForceLoadFlag = (_localStorage = localStorage) === null || _localStorage === void 0 ? void 0 : _localStorage.getItem(STORAGE_KEYS.LOCAL_STORAGE_KEY_COLLAB_FORCE_FLAG);\n  } catch {}\n\n  if (collabForceLoadFlag) {\n    try {\n      const {\n        room: previousRoom,\n        timestamp\n      } = JSON.parse(collabForceLoadFlag); // if loading same room as the one previously unloaded within 15sec\n      //  force reload without prompting\n\n      if (previousRoom === roomId && Date.now() - timestamp < 15000) {\n        return true;\n      }\n    } catch {}\n  }\n\n  return false;\n};\n\nconst initializeScene = async (opts) => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const id = searchParams.get(\"id\");\n  const jsonMatch = window.location.hash.match(/^#json=([0-9]+),([a-zA-Z0-9_-]+)$/);\n  const initialData = importFromLocalStorage();\n  let scene = await loadScene(null, null, initialData);\n  let isCollabScene = !!getCollaborationLinkData(window.location.href);\n  const isExternalScene = !!(id || jsonMatch || isCollabScene);\n\n  if (isExternalScene) {\n    if (shouldForceLoadScene(scene) || window.confirm(t(\"alerts.loadSceneOverridePrompt\"))) {\n      // Backwards compatibility with legacy url format\n      if (id) {\n        scene = await loadScene(id, null, initialData);\n      } else if (jsonMatch) {\n        scene = await loadScene(jsonMatch[1], jsonMatch[2], initialData);\n      }\n\n      if (!isCollabScene) {\n        window.history.replaceState({}, APP_NAME, window.location.origin);\n      }\n    } else {\n      // https://github.com/excalidraw/excalidraw/issues/1919\n      if (document.hidden) {\n        return new Promise((resolve, reject) => {\n          window.addEventListener(\"focus\", () => initializeScene(opts).then(resolve).catch(reject), {\n            once: true\n          });\n        });\n      }\n\n      isCollabScene = false;\n      window.history.replaceState({}, APP_NAME, window.location.origin);\n    }\n  }\n\n  if (isCollabScene) {\n    // when joining a room we don't want user's local scene data to be merged\n    // into the remote scene\n    opts.resetScene();\n    const scenePromise = opts.initializeSocketClient();\n\n    try {\n      const [, roomId, roomKey] = getCollaborationLinkData(window.location.href);\n      const elements = await loadFromFirebase(roomId, roomKey);\n\n      if (elements) {\n        return {\n          elements,\n          commitToHistory: true\n        };\n      }\n\n      return { ...(await scenePromise),\n        commitToHistory: true\n      };\n    } catch (error) {\n      // log the error and move on. other peers will sync us the scene.\n      console.error(error);\n    }\n\n    return null;\n  } else if (scene) {\n    return scene;\n  }\n\n  return null;\n};\n\nfunction ExcalidrawWrapper(props) {\n  _s();\n\n  // dimensions\n  // ---------------------------------------------------------------------------\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const currentLangCode = languageDetector.detect() || defaultLang.code;\n  const [langCode, setLangCode] = useState(currentLangCode);\n  useLayoutEffect(() => {\n    const onResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    window.addEventListener(\"resize\", onResize);\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []); // initial state\n  // ---------------------------------------------------------------------------\n\n  const initialStatePromiseRef = useRef({\n    promise: null\n  });\n\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise();\n  }\n\n  const {\n    collab\n  } = props;\n  useEffect(() => {\n    // Delayed so that the app has a time to load the latest SW\n    setTimeout(() => {\n      trackEvent(\"load\", \"version\", getVersion());\n    }, VERSION_TIMEOUT);\n    excalidrawRef.current.readyPromise.then(excalidrawApi => {\n      initializeScene({\n        resetScene: excalidrawApi.resetScene,\n        initializeSocketClient: collab.initializeSocketClient\n      }).then(scene => {\n        initialStatePromiseRef.current.promise.resolve(scene);\n      });\n    });\n\n    const onHashChange = _ => {\n      const api = excalidrawRef.current;\n\n      if (!api.ready) {\n        return;\n      }\n\n      if (window.location.hash.length > 1) {\n        initializeScene({\n          resetScene: api.resetScene,\n          initializeSocketClient: collab.initializeSocketClient\n        }).then(scene => {\n          if (scene) {\n            api.updateScene(scene);\n          }\n        });\n      }\n    };\n\n    const titleTimeout = setTimeout(() => document.title = APP_NAME, TITLE_TIMEOUT);\n    window.addEventListener(EVENT.HASHCHANGE, onHashChange, false);\n    window.addEventListener(EVENT.UNLOAD, onBlur, false);\n    window.addEventListener(EVENT.BLUR, onBlur, false);\n    return () => {\n      window.removeEventListener(EVENT.HASHCHANGE, onHashChange, false);\n      window.removeEventListener(EVENT.UNLOAD, onBlur, false);\n      window.removeEventListener(EVENT.BLUR, onBlur, false);\n      clearTimeout(titleTimeout);\n    };\n  }, [collab.initializeSocketClient]);\n  useEffect(() => {\n    languageDetector.cacheUserLanguage(langCode);\n  }, [langCode]);\n\n  const onChange = (elements, appState) => {\n    saveDebounced(elements, appState);\n\n    if (collab.isCollaborating) {\n      collab.broadcastElements(elements, appState);\n    }\n  };\n\n  const onExportToBackend = async (exportedElements, appState, canvas) => {\n    if (exportedElements.length === 0) {\n      return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n    }\n\n    if (canvas) {\n      try {\n        await exportToBackend(exportedElements, { ...appState,\n          viewBackgroundColor: appState.exportBackground ? appState.viewBackgroundColor : getDefaultAppState().viewBackgroundColor\n        });\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          const {\n            width,\n            height\n          } = canvas;\n          console.error(error, {\n            width,\n            height\n          });\n          setErrorMessage(error.message);\n        }\n      }\n    }\n  };\n\n  const renderFooter = useCallback(isMobile => {\n    const renderLanguageList = () => /*#__PURE__*/_jsxDEV(LanguageList, {\n      onChange: langCode => {\n        setLangCode(langCode);\n      },\n      languages: languages,\n      floating: !isMobile,\n      currentLangCode: langCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }, this);\n\n    if (isMobile) {\n      return /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n          children: t(\"labels.language\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), renderLanguageList()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this);\n    }\n\n    return renderLanguageList();\n  }, [langCode]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Excalidraw, {\n      ref: excalidrawRef,\n      onChange: onChange,\n      width: dimensions.width,\n      height: dimensions.height,\n      initialData: initialStatePromiseRef.current.promise,\n      user: {\n        name: collab.username\n      },\n      onCollabButtonClick: collab.onCollabButtonClick,\n      isCollaborating: collab.isCollaborating,\n      onPointerUpdate: collab.onPointerUpdate,\n      onExportToBackend: onExportToBackend,\n      renderFooter: renderFooter,\n      langCode: langCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorDialog, {\n      message: errorMessage,\n      onClose: () => setErrorMessage(\"\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(ExcalidrawWrapper, \"UB0fxek/32ic9XZHgMYc3gQXlDY=\");\n\n_c = ExcalidrawWrapper;\nexport default function ExcalidrawApp() {\n  return /*#__PURE__*/_jsxDEV(TopErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(CollabWrapper, {\n      excalidrawRef: excalidrawRef,\n      children: collab => /*#__PURE__*/_jsxDEV(ExcalidrawWrapper, {\n        collab: collab\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 371,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ExcalidrawApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ExcalidrawWrapper\");\n$RefreshReg$(_c2, \"ExcalidrawApp\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/excalidraw-app/index.tsx"],"names":["LanguageDetector","React","useCallback","useEffect","useLayoutEffect","useRef","useState","trackEvent","getDefaultAppState","ErrorDialog","TopErrorBoundary","APP_NAME","EVENT","TITLE_TIMEOUT","VERSION_TIMEOUT","t","Excalidraw","defaultLang","languages","debounce","getVersion","resolvablePromise","SAVE_TO_LOCAL_STORAGE_TIMEOUT","CollabWrapper","LanguageList","exportToBackend","getCollaborationLinkData","loadScene","loadFromFirebase","importFromLocalStorage","saveToLocalStorage","STORAGE_KEYS","languageDetector","init","languageUtils","formatLanguageCode","langCode","isWhitelisted","checkWhitelist","excalidrawRef","current","readyPromise","ready","saveDebounced","elements","state","onBlur","flush","shouldForceLoadScene","scene","length","roomMatch","window","location","href","roomId","collabForceLoadFlag","localStorage","getItem","LOCAL_STORAGE_KEY_COLLAB_FORCE_FLAG","room","previousRoom","timestamp","JSON","parse","Date","now","initializeScene","opts","searchParams","URLSearchParams","search","id","get","jsonMatch","hash","match","initialData","isCollabScene","isExternalScene","confirm","history","replaceState","origin","document","hidden","Promise","resolve","reject","addEventListener","then","catch","once","resetScene","scenePromise","initializeSocketClient","roomKey","commitToHistory","error","console","ExcalidrawWrapper","props","dimensions","setDimensions","width","innerWidth","height","innerHeight","errorMessage","setErrorMessage","currentLangCode","detect","code","setLangCode","onResize","removeEventListener","initialStatePromiseRef","promise","collab","setTimeout","excalidrawApi","onHashChange","_","api","updateScene","titleTimeout","title","HASHCHANGE","UNLOAD","BLUR","clearTimeout","cacheUserLanguage","onChange","appState","isCollaborating","broadcastElements","onExportToBackend","exportedElements","canvas","alert","viewBackgroundColor","exportBackground","name","message","renderFooter","isMobile","renderLanguageList","username","onCollabButtonClick","onPointerUpdate","ExcalidrawApp"],"mappings":"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","sourcesContent":["import LanguageDetector from \"i18next-browser-languagedetector\";\nimport React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { getDefaultAppState } from \"../appState\";\nimport { ExcalidrawImperativeAPI } from \"../components/App\";\nimport { ErrorDialog } from \"../components/ErrorDialog\";\nimport { TopErrorBoundary } from \"../components/TopErrorBoundary\";\nimport { APP_NAME, EVENT, TITLE_TIMEOUT, VERSION_TIMEOUT } from \"../constants\";\nimport { ImportedDataState } from \"../data/types\";\nimport {\n  ExcalidrawElement,\n  NonDeletedExcalidrawElement,\n} from \"../element/types\";\nimport { Language, t } from \"../i18n\";\nimport Excalidraw, {\n  defaultLang,\n  languages,\n} from \"../packages/excalidraw/index\";\nimport { AppState, ExcalidrawAPIRefValue } from \"../types\";\nimport {\n  debounce,\n  getVersion,\n  ResolvablePromise,\n  resolvablePromise,\n} from \"../utils\";\nimport { SAVE_TO_LOCAL_STORAGE_TIMEOUT } from \"./app_constants\";\nimport CollabWrapper, { CollabAPI } from \"./collab/CollabWrapper\";\nimport { LanguageList } from \"./components/LanguageList\";\nimport { exportToBackend, getCollaborationLinkData, loadScene } from \"./data\";\nimport { loadFromFirebase } from \"./data/firebase\";\nimport {\n  importFromLocalStorage,\n  saveToLocalStorage,\n  STORAGE_KEYS,\n} from \"./data/localStorage\";\n\nconst languageDetector = new LanguageDetector();\nlanguageDetector.init({\n  languageUtils: {\n    formatLanguageCode: (langCode: Language[\"code\"]) => langCode,\n    isWhitelisted: () => true,\n  },\n  checkWhitelist: false,\n});\n\nconst excalidrawRef: React.MutableRefObject<\n  MarkRequired<ExcalidrawAPIRefValue, \"ready\" | \"readyPromise\">\n> = {\n  current: {\n    readyPromise: resolvablePromise(),\n    ready: false,\n  },\n};\n\nconst saveDebounced = debounce(\n  (elements: readonly ExcalidrawElement[], state: AppState) => {\n    saveToLocalStorage(elements, state);\n  },\n  SAVE_TO_LOCAL_STORAGE_TIMEOUT,\n);\n\nconst onBlur = () => {\n  saveDebounced.flush();\n};\n\nconst shouldForceLoadScene = (\n  scene: ResolutionType<typeof loadScene>,\n): boolean => {\n  if (!scene.elements.length) {\n    return true;\n  }\n\n  const roomMatch = getCollaborationLinkData(window.location.href);\n\n  if (!roomMatch) {\n    return false;\n  }\n\n  const roomId = roomMatch[1];\n\n  let collabForceLoadFlag;\n  try {\n    collabForceLoadFlag = localStorage?.getItem(\n      STORAGE_KEYS.LOCAL_STORAGE_KEY_COLLAB_FORCE_FLAG,\n    );\n  } catch {}\n\n  if (collabForceLoadFlag) {\n    try {\n      const {\n        room: previousRoom,\n        timestamp,\n      }: { room: string; timestamp: number } = JSON.parse(collabForceLoadFlag);\n      // if loading same room as the one previously unloaded within 15sec\n      //  force reload without prompting\n      if (previousRoom === roomId && Date.now() - timestamp < 15000) {\n        return true;\n      }\n    } catch {}\n  }\n  return false;\n};\n\ntype Scene = ImportedDataState & { commitToHistory: boolean };\n\nconst initializeScene = async (opts: {\n  resetScene: ExcalidrawImperativeAPI[\"resetScene\"];\n  initializeSocketClient: CollabAPI[\"initializeSocketClient\"];\n}): Promise<Scene | null> => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const id = searchParams.get(\"id\");\n  const jsonMatch = window.location.hash.match(\n    /^#json=([0-9]+),([a-zA-Z0-9_-]+)$/,\n  );\n\n  const initialData = importFromLocalStorage();\n\n  let scene = await loadScene(null, null, initialData);\n\n  let isCollabScene = !!getCollaborationLinkData(window.location.href);\n  const isExternalScene = !!(id || jsonMatch || isCollabScene);\n  if (isExternalScene) {\n    if (\n      shouldForceLoadScene(scene) ||\n      window.confirm(t(\"alerts.loadSceneOverridePrompt\"))\n    ) {\n      // Backwards compatibility with legacy url format\n      if (id) {\n        scene = await loadScene(id, null, initialData);\n      } else if (jsonMatch) {\n        scene = await loadScene(jsonMatch[1], jsonMatch[2], initialData);\n      }\n      if (!isCollabScene) {\n        window.history.replaceState({}, APP_NAME, window.location.origin);\n      }\n    } else {\n      // https://github.com/excalidraw/excalidraw/issues/1919\n      if (document.hidden) {\n        return new Promise((resolve, reject) => {\n          window.addEventListener(\n            \"focus\",\n            () => initializeScene(opts).then(resolve).catch(reject),\n            {\n              once: true,\n            },\n          );\n        });\n      }\n\n      isCollabScene = false;\n      window.history.replaceState({}, APP_NAME, window.location.origin);\n    }\n  }\n  if (isCollabScene) {\n    // when joining a room we don't want user's local scene data to be merged\n    // into the remote scene\n    opts.resetScene();\n    const scenePromise = opts.initializeSocketClient();\n\n    try {\n      const [, roomId, roomKey] = getCollaborationLinkData(\n        window.location.href,\n      )!;\n      const elements = await loadFromFirebase(roomId, roomKey);\n      if (elements) {\n        return {\n          elements,\n          commitToHistory: true,\n        };\n      }\n\n      return {\n        ...(await scenePromise),\n        commitToHistory: true,\n      };\n    } catch (error) {\n      // log the error and move on. other peers will sync us the scene.\n      console.error(error);\n    }\n\n    return null;\n  } else if (scene) {\n    return scene;\n  }\n  return null;\n};\n\nfunction ExcalidrawWrapper(props: { collab: CollabAPI }) {\n  // dimensions\n  // ---------------------------------------------------------------------------\n\n  const [dimensions, setDimensions] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  });\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const currentLangCode = languageDetector.detect() || defaultLang.code;\n  const [langCode, setLangCode] = useState(currentLangCode);\n\n  useLayoutEffect(() => {\n    const onResize = () => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener(\"resize\", onResize);\n\n    return () => window.removeEventListener(\"resize\", onResize);\n  }, []);\n\n  // initial state\n  // ---------------------------------------------------------------------------\n\n  const initialStatePromiseRef = useRef<{\n    promise: ResolvablePromise<ImportedDataState | null>;\n  }>({ promise: null! });\n  if (!initialStatePromiseRef.current.promise) {\n    initialStatePromiseRef.current.promise = resolvablePromise<ImportedDataState | null>();\n  }\n\n  const { collab } = props;\n\n  useEffect(() => {\n    // Delayed so that the app has a time to load the latest SW\n    setTimeout(() => {\n      trackEvent(\"load\", \"version\", getVersion());\n    }, VERSION_TIMEOUT);\n\n    excalidrawRef.current!.readyPromise.then((excalidrawApi) => {\n      initializeScene({\n        resetScene: excalidrawApi.resetScene,\n        initializeSocketClient: collab.initializeSocketClient,\n      }).then((scene) => {\n        initialStatePromiseRef.current.promise.resolve(scene);\n      });\n    });\n\n    const onHashChange = (_: HashChangeEvent) => {\n      const api = excalidrawRef.current!;\n      if (!api.ready) {\n        return;\n      }\n      if (window.location.hash.length > 1) {\n        initializeScene({\n          resetScene: api.resetScene,\n          initializeSocketClient: collab.initializeSocketClient,\n        }).then((scene) => {\n          if (scene) {\n            api.updateScene(scene);\n          }\n        });\n      }\n    };\n\n    const titleTimeout = setTimeout(\n      () => (document.title = APP_NAME),\n      TITLE_TIMEOUT,\n    );\n    window.addEventListener(EVENT.HASHCHANGE, onHashChange, false);\n    window.addEventListener(EVENT.UNLOAD, onBlur, false);\n    window.addEventListener(EVENT.BLUR, onBlur, false);\n    return () => {\n      window.removeEventListener(EVENT.HASHCHANGE, onHashChange, false);\n      window.removeEventListener(EVENT.UNLOAD, onBlur, false);\n      window.removeEventListener(EVENT.BLUR, onBlur, false);\n      clearTimeout(titleTimeout);\n    };\n  }, [collab.initializeSocketClient]);\n\n  useEffect(() => {\n    languageDetector.cacheUserLanguage(langCode);\n  }, [langCode]);\n\n  const onChange = (\n    elements: readonly ExcalidrawElement[],\n    appState: AppState,\n  ) => {\n    saveDebounced(elements, appState);\n    if (collab.isCollaborating) {\n      collab.broadcastElements(elements, appState);\n    }\n  };\n\n  const onExportToBackend = async (\n    exportedElements: readonly NonDeletedExcalidrawElement[],\n    appState: AppState,\n    canvas: HTMLCanvasElement | null,\n  ) => {\n    if (exportedElements.length === 0) {\n      return window.alert(t(\"alerts.cannotExportEmptyCanvas\"));\n    }\n    if (canvas) {\n      try {\n        await exportToBackend(exportedElements, {\n          ...appState,\n          viewBackgroundColor: appState.exportBackground\n            ? appState.viewBackgroundColor\n            : getDefaultAppState().viewBackgroundColor,\n        });\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          const { width, height } = canvas;\n          console.error(error, { width, height });\n          setErrorMessage(error.message);\n        }\n      }\n    }\n  };\n\n  const renderFooter = useCallback(\n    (isMobile: boolean) => {\n      const renderLanguageList = () => (\n        <LanguageList\n          onChange={(langCode) => {\n            setLangCode(langCode);\n          }}\n          languages={languages}\n          floating={!isMobile}\n          currentLangCode={langCode}\n        />\n      );\n      if (isMobile) {\n        return (\n          <fieldset>\n            <legend>{t(\"labels.language\")}</legend>\n            {renderLanguageList()}\n          </fieldset>\n        );\n      }\n      return renderLanguageList();\n    },\n    [langCode],\n  );\n\n  return (\n    <>\n      <Excalidraw\n        ref={excalidrawRef}\n        onChange={onChange}\n        width={dimensions.width}\n        height={dimensions.height}\n        initialData={initialStatePromiseRef.current.promise}\n        user={{ name: collab.username }}\n        onCollabButtonClick={collab.onCollabButtonClick}\n        isCollaborating={collab.isCollaborating}\n        onPointerUpdate={collab.onPointerUpdate}\n        onExportToBackend={onExportToBackend}\n        renderFooter={renderFooter}\n        langCode={langCode}\n      />\n      {errorMessage && (\n        <ErrorDialog\n          message={errorMessage}\n          onClose={() => setErrorMessage(\"\")}\n        />\n      )}\n    </>\n  );\n}\n\nexport default function ExcalidrawApp() {\n  return (\n    <TopErrorBoundary>\n      <CollabWrapper\n        excalidrawRef={\n          excalidrawRef as React.MutableRefObject<ExcalidrawImperativeAPI>\n        }\n      >\n        {(collab) => <ExcalidrawWrapper collab={collab} />}\n      </CollabWrapper>\n    </TopErrorBoundary>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}