{"ast":null,"code":"export const getNewZoom = (newZoomValue, prevZoom, canvasOffset, zoomOnViewportPoint = {\n  x: 0,\n  y: 0\n}) => {\n  return {\n    value: newZoomValue,\n    translation: {\n      x: zoomOnViewportPoint.x - canvasOffset.left - (zoomOnViewportPoint.x - canvasOffset.left - prevZoom.translation.x) * (newZoomValue / prevZoom.value),\n      y: zoomOnViewportPoint.y - canvasOffset.top - (zoomOnViewportPoint.y - canvasOffset.top - prevZoom.translation.y) * (newZoomValue / prevZoom.value)\n    }\n  };\n};\nexport const getNormalizedZoom = zoom => {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom;\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/scene/zoom.ts"],"names":["getNewZoom","newZoomValue","prevZoom","canvasOffset","zoomOnViewportPoint","x","y","value","translation","left","top","getNormalizedZoom","zoom","normalizedZoom","parseFloat","toFixed","clampedZoom","Math","max","min"],"mappings":"AAEA,OAAO,MAAMA,UAAU,GAAG,CACxBC,YADwB,EAExBC,QAFwB,EAGxBC,YAHwB,EAIxBC,mBAAkC,GAAG;AAAEC,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE;AAAX,CAJb,KAKf;AACT,SAAO;AACLC,IAAAA,KAAK,EAAEN,YADF;AAELO,IAAAA,WAAW,EAAE;AACXH,MAAAA,CAAC,EACCD,mBAAmB,CAACC,CAApB,GACAF,YAAY,CAACM,IADb,GAEA,CAACL,mBAAmB,CAACC,CAApB,GAAwBF,YAAY,CAACM,IAArC,GAA4CP,QAAQ,CAACM,WAAT,CAAqBH,CAAlE,KACGJ,YAAY,GAAGC,QAAQ,CAACK,KAD3B,CAJS;AAMXD,MAAAA,CAAC,EACCF,mBAAmB,CAACE,CAApB,GACAH,YAAY,CAACO,GADb,GAEA,CAACN,mBAAmB,CAACE,CAApB,GAAwBH,YAAY,CAACO,GAArC,GAA2CR,QAAQ,CAACM,WAAT,CAAqBF,CAAjE,KACGL,YAAY,GAAGC,QAAQ,CAACK,KAD3B;AATS;AAFR,GAAP;AAeD,CArBM;AAuBP,OAAO,MAAMI,iBAAiB,GAAIC,IAAD,IAAuC;AACtE,QAAMC,cAAc,GAAGC,UAAU,CAACF,IAAI,CAACG,OAAL,CAAa,CAAb,CAAD,CAAjC;AACA,QAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAT,EAAcD,IAAI,CAACE,GAAL,CAASN,cAAT,EAAyB,CAAzB,CAAd,CAApB;AACA,SAAOG,WAAP;AACD,CAJM","sourcesContent":["import { NormalizedZoomValue, PointerCoords, Zoom } from \"../types\";\n\nexport const getNewZoom = (\n  newZoomValue: NormalizedZoomValue,\n  prevZoom: Zoom,\n  canvasOffset: { left: number; top: number },\n  zoomOnViewportPoint: PointerCoords = { x: 0, y: 0 },\n): Zoom => {\n  return {\n    value: newZoomValue,\n    translation: {\n      x:\n        zoomOnViewportPoint.x -\n        canvasOffset.left -\n        (zoomOnViewportPoint.x - canvasOffset.left - prevZoom.translation.x) *\n          (newZoomValue / prevZoom.value),\n      y:\n        zoomOnViewportPoint.y -\n        canvasOffset.top -\n        (zoomOnViewportPoint.y - canvasOffset.top - prevZoom.translation.y) *\n          (newZoomValue / prevZoom.value),\n    },\n  };\n};\n\nexport const getNormalizedZoom = (zoom: number): NormalizedZoomValue => {\n  const normalizedZoom = parseFloat(zoom.toFixed(2));\n  const clampedZoom = Math.max(0.1, Math.min(normalizedZoom, 2));\n  return clampedZoom as NormalizedZoomValue;\n};\n"]},"metadata":{},"sourceType":"module"}