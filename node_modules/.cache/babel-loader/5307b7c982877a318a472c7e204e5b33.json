{"ast":null,"code":"import { fileSave } from \"browser-nativefs\";\nimport { copyCanvasToClipboardAsPng, copyTextToSystemClipboard } from \"../clipboard\";\nimport { t } from \"../i18n\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { canvasToBlob } from \"./blob\";\nimport { serializeAsJSON } from \"./json\";\nexport { loadFromBlob } from \"./blob\";\nexport { loadFromJSON, saveAsJSON } from \"./json\";\nexport const exportCanvas = async (type, elements, appState, canvas, {\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor,\n  name,\n  scale = 1,\n  shouldAddWatermark\n}) => {\n  if (elements.length === 0) {\n    throw new Error(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = exportToSvg(elements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      scale,\n      shouldAddWatermark,\n      metadata: appState.exportEmbedScene && type === \"svg\" ? await (await import(\n      /* webpackChunkName: \"image\" */\n      \"./image\")).encodeSvgMetadata({\n        text: serializeAsJSON(elements, appState)\n      }) : undefined\n    });\n\n    if (type === \"svg\") {\n      await fileSave(new Blob([tempSvg.outerHTML], {\n        type: \"image/svg+xml\"\n      }), {\n        fileName: `${name}.svg`,\n        extensions: [\".svg\"]\n      });\n      return;\n    } else if (type === \"clipboard-svg\") {\n      copyTextToSystemClipboard(tempSvg.outerHTML);\n      return;\n    }\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    scale,\n    shouldAddWatermark\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    const fileName = `${name}.png`;\n    let blob = await canvasToBlob(tempCanvas);\n\n    if (appState.exportEmbedScene) {\n      blob = await (await import(\n      /* webpackChunkName: \"image\" */\n      \"./image\")).encodePngMetadata({\n        blob,\n        metadata: serializeAsJSON(elements, appState)\n      });\n    }\n\n    await fileSave(blob, {\n      fileName,\n      extensions: [\".png\"]\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      await copyCanvasToClipboardAsPng(tempCanvas);\n    } catch (error) {\n      if (error.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw error;\n      }\n\n      throw new Error(t(\"alerts.couldNotCopyToClipboard\"));\n    }\n  } // clean up the DOM\n\n\n  if (tempCanvas !== canvas) {\n    tempCanvas.remove();\n  }\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/data/index.ts"],"names":["fileSave","copyCanvasToClipboardAsPng","copyTextToSystemClipboard","t","exportToCanvas","exportToSvg","canvasToBlob","serializeAsJSON","loadFromBlob","loadFromJSON","saveAsJSON","exportCanvas","type","elements","appState","canvas","exportBackground","exportPadding","viewBackgroundColor","name","scale","shouldAddWatermark","length","Error","tempSvg","metadata","exportEmbedScene","encodeSvgMetadata","text","undefined","Blob","outerHTML","fileName","extensions","tempCanvas","style","display","document","body","appendChild","blob","encodePngMetadata","error","remove"],"mappings":"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","sourcesContent":["import { fileSave } from \"browser-nativefs\";\nimport {\n  copyCanvasToClipboardAsPng,\n  copyTextToSystemClipboard,\n} from \"../clipboard\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { exportToCanvas, exportToSvg } from \"../scene/export\";\nimport { ExportType } from \"../scene/types\";\nimport { AppState } from \"../types\";\nimport { canvasToBlob } from \"./blob\";\nimport { serializeAsJSON } from \"./json\";\n\nexport { loadFromBlob } from \"./blob\";\nexport { loadFromJSON, saveAsJSON } from \"./json\";\n\nexport const exportCanvas = async (\n  type: ExportType,\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  canvas: HTMLCanvasElement,\n  {\n    exportBackground,\n    exportPadding = 10,\n    viewBackgroundColor,\n    name,\n    scale = 1,\n    shouldAddWatermark,\n  }: {\n    exportBackground: boolean;\n    exportPadding?: number;\n    viewBackgroundColor: string;\n    name: string;\n    scale?: number;\n    shouldAddWatermark: boolean;\n  },\n) => {\n  if (elements.length === 0) {\n    throw new Error(t(\"alerts.cannotExportEmptyCanvas\"));\n  }\n  if (type === \"svg\" || type === \"clipboard-svg\") {\n    const tempSvg = exportToSvg(elements, {\n      exportBackground,\n      viewBackgroundColor,\n      exportPadding,\n      scale,\n      shouldAddWatermark,\n      metadata:\n        appState.exportEmbedScene && type === \"svg\"\n          ? await (\n              await import(/* webpackChunkName: \"image\" */ \"./image\")\n            ).encodeSvgMetadata({\n              text: serializeAsJSON(elements, appState),\n            })\n          : undefined,\n    });\n    if (type === \"svg\") {\n      await fileSave(new Blob([tempSvg.outerHTML], { type: \"image/svg+xml\" }), {\n        fileName: `${name}.svg`,\n        extensions: [\".svg\"],\n      });\n      return;\n    } else if (type === \"clipboard-svg\") {\n      copyTextToSystemClipboard(tempSvg.outerHTML);\n      return;\n    }\n  }\n\n  const tempCanvas = exportToCanvas(elements, appState, {\n    exportBackground,\n    viewBackgroundColor,\n    exportPadding,\n    scale,\n    shouldAddWatermark,\n  });\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n\n  if (type === \"png\") {\n    const fileName = `${name}.png`;\n    let blob = await canvasToBlob(tempCanvas);\n    if (appState.exportEmbedScene) {\n      blob = await (\n        await import(/* webpackChunkName: \"image\" */ \"./image\")\n      ).encodePngMetadata({\n        blob,\n        metadata: serializeAsJSON(elements, appState),\n      });\n    }\n\n    await fileSave(blob, {\n      fileName,\n      extensions: [\".png\"],\n    });\n  } else if (type === \"clipboard\") {\n    try {\n      await copyCanvasToClipboardAsPng(tempCanvas);\n    } catch (error) {\n      if (error.name === \"CANVAS_POSSIBLY_TOO_BIG\") {\n        throw error;\n      }\n      throw new Error(t(\"alerts.couldNotCopyToClipboard\"));\n    }\n  }\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) {\n    tempCanvas.remove();\n  }\n};\n"]},"metadata":{},"sourceType":"module"}