{"ast":null,"code":"import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n  constructor(svg, config) {\n    this.svg = svg;\n    this.gen = new RoughGenerator(config);\n  }\n\n  draw(drawable) {\n    const sets = drawable.sets || [];\n    const o = drawable.options || this.getDefaultOptions();\n    const doc = this.svg.ownerDocument || window.document;\n    const g = doc.createElementNS(SVGNS, 'g');\n\n    for (const drawing of sets) {\n      let path = null;\n\n      switch (drawing.type) {\n        case 'path':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing));\n            path.setAttribute('stroke', o.stroke);\n            path.setAttribute('stroke-width', o.strokeWidth + '');\n            path.setAttribute('fill', 'none');\n\n            if (o.strokeLineDash) {\n              path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n            }\n\n            if (o.strokeLineDashOffset) {\n              path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n            }\n\n            break;\n          }\n\n        case 'fillPath':\n          {\n            path = doc.createElementNS(SVGNS, 'path');\n            path.setAttribute('d', this.opsToPath(drawing));\n            path.setAttribute('stroke', 'none');\n            path.setAttribute('stroke-width', '0');\n            path.setAttribute('fill', o.fill || '');\n\n            if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n              path.setAttribute('fill-rule', 'evenodd');\n            }\n\n            break;\n          }\n\n        case 'fillSketch':\n          {\n            path = this.fillSketch(doc, drawing, o);\n            break;\n          }\n      }\n\n      if (path) {\n        g.appendChild(path);\n      }\n    }\n\n    return g;\n  }\n\n  fillSketch(doc, drawing, o) {\n    let fweight = o.fillWeight;\n\n    if (fweight < 0) {\n      fweight = o.strokeWidth / 2;\n    }\n\n    const path = doc.createElementNS(SVGNS, 'path');\n    path.setAttribute('d', this.opsToPath(drawing));\n    path.setAttribute('stroke', o.fill || '');\n    path.setAttribute('stroke-width', fweight + '');\n    path.setAttribute('fill', 'none');\n\n    if (o.fillLineDash) {\n      path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n    }\n\n    if (o.fillLineDashOffset) {\n      path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n    }\n\n    return path;\n  }\n\n  get generator() {\n    return this.gen;\n  }\n\n  getDefaultOptions() {\n    return this.gen.defaultOptions;\n  }\n\n  opsToPath(drawing) {\n    return this.gen.opsToPath(drawing);\n  }\n\n  line(x1, y1, x2, y2, options) {\n    const d = this.gen.line(x1, y1, x2, y2, options);\n    return this.draw(d);\n  }\n\n  rectangle(x, y, width, height, options) {\n    const d = this.gen.rectangle(x, y, width, height, options);\n    return this.draw(d);\n  }\n\n  ellipse(x, y, width, height, options) {\n    const d = this.gen.ellipse(x, y, width, height, options);\n    return this.draw(d);\n  }\n\n  circle(x, y, diameter, options) {\n    const d = this.gen.circle(x, y, diameter, options);\n    return this.draw(d);\n  }\n\n  linearPath(points, options) {\n    const d = this.gen.linearPath(points, options);\n    return this.draw(d);\n  }\n\n  polygon(points, options) {\n    const d = this.gen.polygon(points, options);\n    return this.draw(d);\n  }\n\n  arc(x, y, width, height, start, stop, closed = false, options) {\n    const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n    return this.draw(d);\n  }\n\n  curve(points, options) {\n    const d = this.gen.curve(points, options);\n    return this.draw(d);\n  }\n\n  path(d, options) {\n    const drawing = this.gen.path(d, options);\n    return this.draw(drawing);\n  }\n\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/roughjs/bin/svg.js"],"names":["SVGNS","RoughGenerator","RoughSVG","constructor","svg","config","gen","draw","drawable","sets","o","options","getDefaultOptions","doc","ownerDocument","window","document","g","createElementNS","drawing","path","type","setAttribute","opsToPath","stroke","strokeWidth","strokeLineDash","join","trim","strokeLineDashOffset","fill","shape","fillSketch","appendChild","fweight","fillWeight","fillLineDash","fillLineDashOffset","generator","defaultOptions","line","x1","y1","x2","y2","d","rectangle","x","y","width","height","ellipse","circle","diameter","linearPath","points","polygon","arc","start","stop","closed","curve"],"mappings":"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","sourcesContent":["import { SVGNS } from './core';\nimport { RoughGenerator } from './generator';\nexport class RoughSVG {\n    constructor(svg, config) {\n        this.svg = svg;\n        this.gen = new RoughGenerator(config);\n    }\n    draw(drawable) {\n        const sets = drawable.sets || [];\n        const o = drawable.options || this.getDefaultOptions();\n        const doc = this.svg.ownerDocument || window.document;\n        const g = doc.createElementNS(SVGNS, 'g');\n        for (const drawing of sets) {\n            let path = null;\n            switch (drawing.type) {\n                case 'path': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.setAttribute('stroke', o.stroke);\n                    path.setAttribute('stroke-width', o.strokeWidth + '');\n                    path.setAttribute('fill', 'none');\n                    if (o.strokeLineDash) {\n                        path.setAttribute('stroke-dasharray', o.strokeLineDash.join(' ').trim());\n                    }\n                    if (o.strokeLineDashOffset) {\n                        path.setAttribute('stroke-dashoffset', `${o.strokeLineDashOffset}`);\n                    }\n                    break;\n                }\n                case 'fillPath': {\n                    path = doc.createElementNS(SVGNS, 'path');\n                    path.setAttribute('d', this.opsToPath(drawing));\n                    path.setAttribute('stroke', 'none');\n                    path.setAttribute('stroke-width', '0');\n                    path.setAttribute('fill', o.fill || '');\n                    if (drawable.shape === 'curve' || drawable.shape === 'polygon') {\n                        path.setAttribute('fill-rule', 'evenodd');\n                    }\n                    break;\n                }\n                case 'fillSketch': {\n                    path = this.fillSketch(doc, drawing, o);\n                    break;\n                }\n            }\n            if (path) {\n                g.appendChild(path);\n            }\n        }\n        return g;\n    }\n    fillSketch(doc, drawing, o) {\n        let fweight = o.fillWeight;\n        if (fweight < 0) {\n            fweight = o.strokeWidth / 2;\n        }\n        const path = doc.createElementNS(SVGNS, 'path');\n        path.setAttribute('d', this.opsToPath(drawing));\n        path.setAttribute('stroke', o.fill || '');\n        path.setAttribute('stroke-width', fweight + '');\n        path.setAttribute('fill', 'none');\n        if (o.fillLineDash) {\n            path.setAttribute('stroke-dasharray', o.fillLineDash.join(' ').trim());\n        }\n        if (o.fillLineDashOffset) {\n            path.setAttribute('stroke-dashoffset', `${o.fillLineDashOffset}`);\n        }\n        return path;\n    }\n    get generator() {\n        return this.gen;\n    }\n    getDefaultOptions() {\n        return this.gen.defaultOptions;\n    }\n    opsToPath(drawing) {\n        return this.gen.opsToPath(drawing);\n    }\n    line(x1, y1, x2, y2, options) {\n        const d = this.gen.line(x1, y1, x2, y2, options);\n        return this.draw(d);\n    }\n    rectangle(x, y, width, height, options) {\n        const d = this.gen.rectangle(x, y, width, height, options);\n        return this.draw(d);\n    }\n    ellipse(x, y, width, height, options) {\n        const d = this.gen.ellipse(x, y, width, height, options);\n        return this.draw(d);\n    }\n    circle(x, y, diameter, options) {\n        const d = this.gen.circle(x, y, diameter, options);\n        return this.draw(d);\n    }\n    linearPath(points, options) {\n        const d = this.gen.linearPath(points, options);\n        return this.draw(d);\n    }\n    polygon(points, options) {\n        const d = this.gen.polygon(points, options);\n        return this.draw(d);\n    }\n    arc(x, y, width, height, start, stop, closed = false, options) {\n        const d = this.gen.arc(x, y, width, height, start, stop, closed, options);\n        return this.draw(d);\n    }\n    curve(points, options) {\n        const d = this.gen.curve(points, options);\n        return this.draw(d);\n    }\n    path(d, options) {\n        const drawing = this.gen.path(d, options);\n        return this.draw(drawing);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}