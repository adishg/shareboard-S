{"ast":null,"code":"import * as GA from \"./ga\";\nimport * as GALine from \"./galines\";\nimport { join } from \"./ga\";\nexport const from = ([x, y]) => [0, 0, 0, 0, y, x, 1, 0];\nexport const toTuple = point => [point[5], point[4]];\nexport const abs = point => [0, 0, 0, 0, Math.abs(point[4]), Math.abs(point[5]), 1, 0];\nexport const intersect = (line1, line2) => GA.normalized(GA.meet(line1, line2)); // Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\n\nexport const project = (point, line) => intersect(GALine.orthogonal(line, point), line);\nexport const distance = (point1, point2) => GA.norm(join(point1, point2));\nexport const distanceToLine = (point, line) => GA.joinScalar(point, line);","map":{"version":3,"sources":["/var/www/html/excalidraw/src/gapoints.ts"],"names":["GA","GALine","join","from","x","y","toTuple","point","abs","Math","intersect","line1","line2","normalized","meet","project","line","orthogonal","distance","point1","point2","norm","distanceToLine","joinScalar"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,MAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;AACA,SAAsBC,IAAtB,QAAkC,MAAlC;AAEA,OAAO,MAAMC,IAAI,GAAG,CAAC,CAACC,CAAD,EAAIC,CAAJ,CAAD,KAA8C,CAChE,CADgE,EAEhE,CAFgE,EAGhE,CAHgE,EAIhE,CAJgE,EAKhEA,CALgE,EAMhED,CANgE,EAOhE,CAPgE,EAQhE,CARgE,CAA3D;AAWP,OAAO,MAAME,OAAO,GAAIC,KAAD,IAAoC,CAACA,KAAK,CAAC,CAAD,CAAN,EAAWA,KAAK,CAAC,CAAD,CAAhB,CAApD;AAEP,OAAO,MAAMC,GAAG,GAAID,KAAD,IAAyB,CAC1C,CAD0C,EAE1C,CAF0C,EAG1C,CAH0C,EAI1C,CAJ0C,EAK1CE,IAAI,CAACD,GAAL,CAASD,KAAK,CAAC,CAAD,CAAd,CAL0C,EAM1CE,IAAI,CAACD,GAAL,CAASD,KAAK,CAAC,CAAD,CAAd,CAN0C,EAO1C,CAP0C,EAQ1C,CAR0C,CAArC;AAWP,OAAO,MAAMG,SAAS,GAAG,CAACC,KAAD,EAAcC,KAAd,KACvBZ,EAAE,CAACa,UAAH,CAAcb,EAAE,CAACc,IAAH,CAAQH,KAAR,EAAeC,KAAf,CAAd,CADK,C,CAGP;AACA;;AACA,OAAO,MAAMG,OAAO,GAAG,CAACR,KAAD,EAAeS,IAAf,KACrBN,SAAS,CAACT,MAAM,CAACgB,UAAP,CAAkBD,IAAlB,EAAwBT,KAAxB,CAAD,EAAiCS,IAAjC,CADJ;AAGP,OAAO,MAAME,QAAQ,GAAG,CAACC,MAAD,EAAgBC,MAAhB,KACtBpB,EAAE,CAACqB,IAAH,CAAQnB,IAAI,CAACiB,MAAD,EAASC,MAAT,CAAZ,CADK;AAGP,OAAO,MAAME,cAAc,GAAG,CAACf,KAAD,EAAeS,IAAf,KAC5BhB,EAAE,CAACuB,UAAH,CAAchB,KAAd,EAAqBS,IAArB,CADK","sourcesContent":["import * as GA from \"./ga\";\nimport * as GALine from \"./galines\";\nimport { Point, Line, join } from \"./ga\";\n\nexport const from = ([x, y]: readonly [number, number]): Point => [\n  0,\n  0,\n  0,\n  0,\n  y,\n  x,\n  1,\n  0,\n];\n\nexport const toTuple = (point: Point): [number, number] => [point[5], point[4]];\n\nexport const abs = (point: Point): Point => [\n  0,\n  0,\n  0,\n  0,\n  Math.abs(point[4]),\n  Math.abs(point[5]),\n  1,\n  0,\n];\n\nexport const intersect = (line1: Line, line2: Line): Point =>\n  GA.normalized(GA.meet(line1, line2));\n\n// Projects `point` onto the `line`.\n// The returned point is the closest point on the `line` to the `point`.\nexport const project = (point: Point, line: Line): Point =>\n  intersect(GALine.orthogonal(line, point), line);\n\nexport const distance = (point1: Point, point2: Point): number =>\n  GA.norm(join(point1, point2));\n\nexport const distanceToLine = (point: Point, line: Line): number =>\n  GA.joinScalar(point, line);\n"]},"metadata":{},"sourceType":"module"}