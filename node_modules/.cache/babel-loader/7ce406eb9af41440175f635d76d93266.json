{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/ExportDialog.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { canvasToBlob } from \"../data/blob\";\nimport { CanvasError } from \"../errors\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas, getExportSize } from \"../scene/export\";\nimport { Dialog } from \"./Dialog\";\nimport \"./ExportDialog.scss\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport Stack from \"./Stack\";\nimport { ToolButton } from \"./ToolButton\";\nconst scales = [1, 2, 3];\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\nexport const ErrorCanvasPreview = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: t(\"canvasError.cannotShowPreview\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: t(\"canvasError.canvasTooBig\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n      children: [\"(\", t(\"canvasError.canvasTooBigTip\"), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = ErrorCanvasPreview;\n\nconst renderPreview = (content, previewNode) => {\n  unmountComponentAtNode(previewNode);\n  previewNode.innerHTML = \"\";\n\n  if (content instanceof HTMLCanvasElement) {\n    previewNode.appendChild(content);\n  } else {\n    render( /*#__PURE__*/_jsxDEV(ErrorCanvasPreview, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this), previewNode);\n  }\n};\n\nconst ExportModal = ({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend\n}) => {\n  _s();\n\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [scale, setScale] = useState(defaultScale);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previewRef = useRef(null);\n  const {\n    exportBackground,\n    viewBackgroundColor,\n    shouldAddWatermark\n  } = appState;\n  const exportedElements = exportSelected ? getSelectedElements(elements, appState) : elements;\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n  useEffect(() => {\n    const previewNode = previewRef.current;\n\n    if (!previewNode) {\n      return;\n    }\n\n    try {\n      const canvas = exportToCanvas(exportedElements, appState, {\n        exportBackground,\n        viewBackgroundColor,\n        exportPadding,\n        scale,\n        shouldAddWatermark\n      }); // if converting to blob fails, there's some problem that will\n      // likely prevent preview and export (e.g. canvas too big)\n\n      canvasToBlob(canvas).then(() => {\n        renderPreview(canvas, previewNode);\n      }).catch(error => {\n        console.error(error);\n        renderPreview(new CanvasError(), previewNode);\n      });\n    } catch (error) {\n      console.error(error);\n      renderPreview(new CanvasError(), previewNode);\n    }\n  }, [appState, exportedElements, exportBackground, exportPadding, viewBackgroundColor, scale, shouldAddWatermark]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"ExportDialog\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ExportDialog__preview\",\n      ref: previewRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack.Col, {\n      gap: 2,\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ExportDialog__actions\",\n        children: [/*#__PURE__*/_jsxDEV(Stack.Row, {\n          gap: 2,\n          children: [/*#__PURE__*/_jsxDEV(ToolButton, {\n            type: \"button\",\n            label: \"PNG\",\n            title: t(\"buttons.exportToPng\"),\n            \"aria-label\": t(\"buttons.exportToPng\"),\n            onClick: () => onExportToPng(exportedElements, scale)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToolButton, {\n            type: \"button\",\n            label: \"SVG\",\n            title: t(\"buttons.exportToSvg\"),\n            \"aria-label\": t(\"buttons.exportToSvg\"),\n            onClick: () => onExportToSvg(exportedElements, scale)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), probablySupportsClipboardBlob && /*#__PURE__*/_jsxDEV(ToolButton, {\n            type: \"button\",\n            icon: clipboard,\n            title: t(\"buttons.copyPngToClipboard\"),\n            \"aria-label\": t(\"buttons.copyPngToClipboard\"),\n            onClick: () => onExportToClipboard(exportedElements, scale)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), onExportToBackend && /*#__PURE__*/_jsxDEV(ToolButton, {\n            type: \"button\",\n            icon: link,\n            title: t(\"buttons.getShareableLink\"),\n            \"aria-label\": t(\"buttons.getShareableLink\"),\n            onClick: () => onExportToBackend(exportedElements)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ExportDialog__name\",\n          children: actionManager.renderAction(\"changeProjectName\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Stack.Row, {\n          gap: 2,\n          children: scales.map(s => {\n            const [width, height] = getExportSize(exportedElements, exportPadding, shouldAddWatermark, s);\n            const scaleButtonTitle = `${t(\"buttons.scale\")} ${s}x (${width}x${height})`;\n            return /*#__PURE__*/_jsxDEV(ToolButton, {\n              size: \"s\",\n              type: \"radio\",\n              icon: `${s}x`,\n              name: \"export-canvas-scale\",\n              title: scaleButtonTitle,\n              \"aria-label\": scaleButtonTitle,\n              id: \"export-canvas-scale\",\n              checked: s === scale,\n              onChange: () => setScale(s)\n            }, s, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), actionManager.renderAction(\"changeExportBackground\"), someElementIsSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: exportSelected,\n            onChange: event => setExportSelected(event.currentTarget.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this), \" \", t(\"labels.onlySelected\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), actionManager.renderAction(\"changeExportEmbedScene\"), actionManager.renderAction(\"changeShouldAddWatermark\")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExportModal, \"SCsTnrKmlu1RYpse4Qydy/oK9UQ=\");\n\n_c2 = ExportModal;\nexport const ExportDialog = ({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend\n}) => {\n  _s2();\n\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const triggerButton = useRef(null);\n  const handleClose = React.useCallback(() => {\n    var _triggerButton$curren;\n\n    setModalIsShown(false);\n    (_triggerButton$curren = triggerButton.current) === null || _triggerButton$curren === void 0 ? void 0 : _triggerButton$curren.focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToolButton, {\n      onClick: () => {\n        setModalIsShown(true);\n      },\n      icon: exportFile,\n      type: \"button\",\n      \"aria-label\": t(\"buttons.export\"),\n      showAriaLabel: useIsMobile(),\n      title: t(\"buttons.export\"),\n      ref: triggerButton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), modalIsShown && /*#__PURE__*/_jsxDEV(Dialog, {\n      onCloseRequest: handleClose,\n      title: t(\"buttons.export\"),\n      children: /*#__PURE__*/_jsxDEV(ExportModal, {\n        elements: elements,\n        appState: appState,\n        exportPadding: exportPadding,\n        actionManager: actionManager,\n        onExportToPng: onExportToPng,\n        onExportToSvg: onExportToSvg,\n        onExportToClipboard: onExportToClipboard,\n        onExportToBackend: onExportToBackend,\n        onCloseRequest: handleClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s2(ExportDialog, \"00s8zDwUByxekVlrjDMuAAim2io=\", false, function () {\n  return [useIsMobile];\n});\n\n_c3 = ExportDialog;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ErrorCanvasPreview\");\n$RefreshReg$(_c2, \"ExportModal\");\n$RefreshReg$(_c3, \"ExportDialog\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/ExportDialog.tsx"],"names":["React","useEffect","useRef","useState","render","unmountComponentAtNode","probablySupportsClipboardBlob","canvasToBlob","CanvasError","t","useIsMobile","getSelectedElements","isSomeElementSelected","exportToCanvas","getExportSize","Dialog","clipboard","exportFile","link","Stack","ToolButton","scales","defaultScale","includes","devicePixelRatio","ErrorCanvasPreview","renderPreview","content","previewNode","innerHTML","HTMLCanvasElement","appendChild","ExportModal","elements","appState","exportPadding","actionManager","onExportToPng","onExportToSvg","onExportToClipboard","onExportToBackend","someElementIsSelected","scale","setScale","exportSelected","setExportSelected","previewRef","exportBackground","viewBackgroundColor","shouldAddWatermark","exportedElements","current","canvas","then","catch","error","console","renderAction","map","s","width","height","scaleButtonTitle","event","currentTarget","checked","ExportDialog","modalIsShown","setModalIsShown","triggerButton","handleClose","useCallback","focus"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { render, unmountComponentAtNode } from \"react-dom\";\nimport { ActionsManagerInterface } from \"../actions/types\";\nimport { probablySupportsClipboardBlob } from \"../clipboard\";\nimport { canvasToBlob } from \"../data/blob\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { CanvasError } from \"../errors\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { exportToCanvas, getExportSize } from \"../scene/export\";\nimport { AppState } from \"../types\";\nimport { Dialog } from \"./Dialog\";\nimport \"./ExportDialog.scss\";\nimport { clipboard, exportFile, link } from \"./icons\";\nimport Stack from \"./Stack\";\nimport { ToolButton } from \"./ToolButton\";\n\nconst scales = [1, 2, 3];\nconst defaultScale = scales.includes(devicePixelRatio) ? devicePixelRatio : 1;\n\nexport const ErrorCanvasPreview = () => {\n  return (\n    <div>\n      <h3>{t(\"canvasError.cannotShowPreview\")}</h3>\n      <p>\n        <span>{t(\"canvasError.canvasTooBig\")}</span>\n      </p>\n      <em>({t(\"canvasError.canvasTooBigTip\")})</em>\n    </div>\n  );\n};\n\nconst renderPreview = (\n  content: HTMLCanvasElement | Error,\n  previewNode: HTMLDivElement,\n) => {\n  unmountComponentAtNode(previewNode);\n  previewNode.innerHTML = \"\";\n  if (content instanceof HTMLCanvasElement) {\n    previewNode.appendChild(content);\n  } else {\n    render(<ErrorCanvasPreview />, previewNode);\n  }\n};\n\nexport type ExportCB = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  scale?: number,\n) => void;\n\nconst ExportModal = ({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n}: {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend?: ExportCB;\n  onCloseRequest: () => void;\n}) => {\n  const someElementIsSelected = isSomeElementSelected(elements, appState);\n  const [scale, setScale] = useState(defaultScale);\n  const [exportSelected, setExportSelected] = useState(someElementIsSelected);\n  const previewRef = useRef<HTMLDivElement>(null);\n  const {\n    exportBackground,\n    viewBackgroundColor,\n    shouldAddWatermark,\n  } = appState;\n\n  const exportedElements = exportSelected\n    ? getSelectedElements(elements, appState)\n    : elements;\n\n  useEffect(() => {\n    setExportSelected(someElementIsSelected);\n  }, [someElementIsSelected]);\n\n  useEffect(() => {\n    const previewNode = previewRef.current;\n    if (!previewNode) {\n      return;\n    }\n    try {\n      const canvas = exportToCanvas(exportedElements, appState, {\n        exportBackground,\n        viewBackgroundColor,\n        exportPadding,\n        scale,\n        shouldAddWatermark,\n      });\n\n      // if converting to blob fails, there's some problem that will\n      // likely prevent preview and export (e.g. canvas too big)\n      canvasToBlob(canvas)\n        .then(() => {\n          renderPreview(canvas, previewNode);\n        })\n        .catch((error) => {\n          console.error(error);\n          renderPreview(new CanvasError(), previewNode);\n        });\n    } catch (error) {\n      console.error(error);\n      renderPreview(new CanvasError(), previewNode);\n    }\n  }, [\n    appState,\n    exportedElements,\n    exportBackground,\n    exportPadding,\n    viewBackgroundColor,\n    scale,\n    shouldAddWatermark,\n  ]);\n\n  return (\n    <div className=\"ExportDialog\">\n      <div className=\"ExportDialog__preview\" ref={previewRef} />\n      <Stack.Col gap={2} align=\"center\">\n        <div className=\"ExportDialog__actions\">\n          <Stack.Row gap={2}>\n            <ToolButton\n              type=\"button\"\n              label=\"PNG\"\n              title={t(\"buttons.exportToPng\")}\n              aria-label={t(\"buttons.exportToPng\")}\n              onClick={() => onExportToPng(exportedElements, scale)}\n            />\n            <ToolButton\n              type=\"button\"\n              label=\"SVG\"\n              title={t(\"buttons.exportToSvg\")}\n              aria-label={t(\"buttons.exportToSvg\")}\n              onClick={() => onExportToSvg(exportedElements, scale)}\n            />\n            {probablySupportsClipboardBlob && (\n              <ToolButton\n                type=\"button\"\n                icon={clipboard}\n                title={t(\"buttons.copyPngToClipboard\")}\n                aria-label={t(\"buttons.copyPngToClipboard\")}\n                onClick={() => onExportToClipboard(exportedElements, scale)}\n              />\n            )}\n            {onExportToBackend && (\n              <ToolButton\n                type=\"button\"\n                icon={link}\n                title={t(\"buttons.getShareableLink\")}\n                aria-label={t(\"buttons.getShareableLink\")}\n                onClick={() => onExportToBackend(exportedElements)}\n              />\n            )}\n          </Stack.Row>\n          <div className=\"ExportDialog__name\">\n            {actionManager.renderAction(\"changeProjectName\")}\n          </div>\n          <Stack.Row gap={2}>\n            {scales.map((s) => {\n              const [width, height] = getExportSize(\n                exportedElements,\n                exportPadding,\n                shouldAddWatermark,\n                s,\n              );\n\n              const scaleButtonTitle = `${t(\n                \"buttons.scale\",\n              )} ${s}x (${width}x${height})`;\n\n              return (\n                <ToolButton\n                  key={s}\n                  size=\"s\"\n                  type=\"radio\"\n                  icon={`${s}x`}\n                  name=\"export-canvas-scale\"\n                  title={scaleButtonTitle}\n                  aria-label={scaleButtonTitle}\n                  id=\"export-canvas-scale\"\n                  checked={s === scale}\n                  onChange={() => setScale(s)}\n                />\n              );\n            })}\n          </Stack.Row>\n        </div>\n        {actionManager.renderAction(\"changeExportBackground\")}\n        {someElementIsSelected && (\n          <div>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={exportSelected}\n                onChange={(event) =>\n                  setExportSelected(event.currentTarget.checked)\n                }\n              />{\" \"}\n              {t(\"labels.onlySelected\")}\n            </label>\n          </div>\n        )}\n        {actionManager.renderAction(\"changeExportEmbedScene\")}\n        {actionManager.renderAction(\"changeShouldAddWatermark\")}\n      </Stack.Col>\n    </div>\n  );\n};\n\nexport const ExportDialog = ({\n  elements,\n  appState,\n  exportPadding = 10,\n  actionManager,\n  onExportToPng,\n  onExportToSvg,\n  onExportToClipboard,\n  onExportToBackend,\n}: {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n  exportPadding?: number;\n  actionManager: ActionsManagerInterface;\n  onExportToPng: ExportCB;\n  onExportToSvg: ExportCB;\n  onExportToClipboard: ExportCB;\n  onExportToBackend?: ExportCB;\n}) => {\n  const [modalIsShown, setModalIsShown] = useState(false);\n  const triggerButton = useRef<HTMLButtonElement>(null);\n\n  const handleClose = React.useCallback(() => {\n    setModalIsShown(false);\n    triggerButton.current?.focus();\n  }, []);\n\n  return (\n    <>\n      <ToolButton\n        onClick={() => {\n          setModalIsShown(true);\n        }}\n        icon={exportFile}\n        type=\"button\"\n        aria-label={t(\"buttons.export\")}\n        showAriaLabel={useIsMobile()}\n        title={t(\"buttons.export\")}\n        ref={triggerButton}\n      />\n      {modalIsShown && (\n        <Dialog onCloseRequest={handleClose} title={t(\"buttons.export\")}>\n          <ExportModal\n            elements={elements}\n            appState={appState}\n            exportPadding={exportPadding}\n            actionManager={actionManager}\n            onExportToPng={onExportToPng}\n            onExportToSvg={onExportToSvg}\n            onExportToClipboard={onExportToClipboard}\n            onExportToBackend={onExportToBackend}\n            onCloseRequest={handleClose}\n          />\n        </Dialog>\n      )}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}