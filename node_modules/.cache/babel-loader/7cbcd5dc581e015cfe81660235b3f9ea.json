{"ast":null,"code":"// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n  let cx = 0,\n      cy = 0;\n  let subx = 0,\n      suby = 0;\n  const out = [];\n\n  for (const {\n    key,\n    data\n  } of segments) {\n    switch (key) {\n      case 'M':\n        out.push({\n          key: 'M',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        [subx, suby] = data;\n        break;\n\n      case 'm':\n        cx += data[0];\n        cy += data[1];\n        out.push({\n          key: 'M',\n          data: [cx, cy]\n        });\n        subx = cx;\n        suby = cy;\n        break;\n\n      case 'L':\n        out.push({\n          key: 'L',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        break;\n\n      case 'l':\n        cx += data[0];\n        cy += data[1];\n        out.push({\n          key: 'L',\n          data: [cx, cy]\n        });\n        break;\n\n      case 'C':\n        out.push({\n          key: 'C',\n          data: [...data]\n        });\n        cx = data[4];\n        cy = data[5];\n        break;\n\n      case 'c':\n        {\n          const newdata = data.map((d, i) => i % 2 ? d + cy : d + cx);\n          out.push({\n            key: 'C',\n            data: newdata\n          });\n          cx = newdata[4];\n          cy = newdata[5];\n          break;\n        }\n\n      case 'Q':\n        out.push({\n          key: 'Q',\n          data: [...data]\n        });\n        cx = data[2];\n        cy = data[3];\n        break;\n\n      case 'q':\n        {\n          const newdata = data.map((d, i) => i % 2 ? d + cy : d + cx);\n          out.push({\n            key: 'Q',\n            data: newdata\n          });\n          cx = newdata[2];\n          cy = newdata[3];\n          break;\n        }\n\n      case 'A':\n        out.push({\n          key: 'A',\n          data: [...data]\n        });\n        cx = data[5];\n        cy = data[6];\n        break;\n\n      case 'a':\n        cx += data[5];\n        cy += data[6];\n        out.push({\n          key: 'A',\n          data: [data[0], data[1], data[2], data[3], data[4], cx, cy]\n        });\n        break;\n\n      case 'H':\n        out.push({\n          key: 'H',\n          data: [...data]\n        });\n        cx = data[0];\n        break;\n\n      case 'h':\n        cx += data[0];\n        out.push({\n          key: 'H',\n          data: [cx]\n        });\n        break;\n\n      case 'V':\n        out.push({\n          key: 'V',\n          data: [...data]\n        });\n        cy = data[0];\n        break;\n\n      case 'v':\n        cy += data[0];\n        out.push({\n          key: 'V',\n          data: [cy]\n        });\n        break;\n\n      case 'S':\n        out.push({\n          key: 'S',\n          data: [...data]\n        });\n        cx = data[2];\n        cy = data[3];\n        break;\n\n      case 's':\n        {\n          const newdata = data.map((d, i) => i % 2 ? d + cy : d + cx);\n          out.push({\n            key: 'S',\n            data: newdata\n          });\n          cx = newdata[2];\n          cy = newdata[3];\n          break;\n        }\n\n      case 'T':\n        out.push({\n          key: 'T',\n          data: [...data]\n        });\n        cx = data[0];\n        cy = data[1];\n        break;\n\n      case 't':\n        cx += data[0];\n        cy += data[1];\n        out.push({\n          key: 'T',\n          data: [cx, cy]\n        });\n        break;\n\n      case 'Z':\n      case 'z':\n        out.push({\n          key: 'Z',\n          data: []\n        });\n        cx = subx;\n        cy = suby;\n        break;\n    }\n  }\n\n  return out;\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/path-data-parser/lib/absolutize.js"],"names":["absolutize","segments","cx","cy","subx","suby","out","key","data","push","newdata","map","d","i"],"mappings":"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","sourcesContent":["// Translate relative commands to absolute commands\nexport function absolutize(segments) {\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    const out = [];\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'm':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'M', data: [cx, cy] });\n                subx = cx;\n                suby = cy;\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'l':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                break;\n            case 'c': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'C', data: newdata });\n                cx = newdata[4];\n                cy = newdata[5];\n                break;\n            }\n            case 'Q':\n                out.push({ key: 'Q', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 'q': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'Q', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'A':\n                out.push({ key: 'A', data: [...data] });\n                cx = data[5];\n                cy = data[6];\n                break;\n            case 'a':\n                cx += data[5];\n                cy += data[6];\n                out.push({ key: 'A', data: [data[0], data[1], data[2], data[3], data[4], cx, cy] });\n                break;\n            case 'H':\n                out.push({ key: 'H', data: [...data] });\n                cx = data[0];\n                break;\n            case 'h':\n                cx += data[0];\n                out.push({ key: 'H', data: [cx] });\n                break;\n            case 'V':\n                out.push({ key: 'V', data: [...data] });\n                cy = data[0];\n                break;\n            case 'v':\n                cy += data[0];\n                out.push({ key: 'V', data: [cy] });\n                break;\n            case 'S':\n                out.push({ key: 'S', data: [...data] });\n                cx = data[2];\n                cy = data[3];\n                break;\n            case 's': {\n                const newdata = data.map((d, i) => (i % 2) ? (d + cy) : (d + cx));\n                out.push({ key: 'S', data: newdata });\n                cx = newdata[2];\n                cy = newdata[3];\n                break;\n            }\n            case 'T':\n                out.push({ key: 'T', data: [...data] });\n                cx = data[0];\n                cy = data[1];\n                break;\n            case 't':\n                cx += data[0];\n                cy += data[1];\n                out.push({ key: 'T', data: [cx, cy] });\n                break;\n            case 'Z':\n            case 'z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n    }\n    return out;\n}\n"]},"metadata":{},"sourceType":"module"}