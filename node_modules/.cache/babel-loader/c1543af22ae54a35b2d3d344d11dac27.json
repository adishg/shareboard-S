{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { basename, getGlobalObject, logger, timestampWithMs } from '@sentry/utils';\n/**\n * Used to extract Tracing integration from the current client,\n * without the need to import `Tracing` itself from the @sentry/apm package.\n * @deprecated as @sentry/tracing should be used over @sentry/apm.\n */\n\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\n/**\n * Used to extract BrowserTracing integration from @sentry/tracing\n */\n\nvar BROWSER_TRACING_GETTER = {\n  id: 'BrowserTracing'\n}; // Mappings from operation to corresponding lifecycle hook.\n\nvar HOOKS = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated']\n};\nvar COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\\w)/g;\nvar ROOT_COMPONENT_NAME = 'root';\nvar ANONYMOUS_COMPONENT_NAME = 'anonymous component';\n/** JSDoc */\n\nvar Vue =\n/** @class */\nfunction () {\n  /**\n   * @inheritDoc\n   */\n  function Vue(options) {\n    var _this = this;\n    /**\n     * @inheritDoc\n     */\n\n\n    this.name = Vue.id;\n    /**\n     * Cache holding already processed component names\n     */\n\n    this._componentsCache = {};\n    /** Keep it as attribute function, to keep correct `this` binding inside the hooks callbacks  */\n    // eslint-disable-next-line @typescript-eslint/typedef\n\n    this._applyTracingHooks = function (vm, getCurrentHub) {\n      // Don't attach twice, just in case\n      if (vm.$options.$_sentryPerfHook) {\n        return;\n      }\n\n      vm.$options.$_sentryPerfHook = true;\n\n      var name = _this._getComponentName(vm);\n\n      var rootMount = name === ROOT_COMPONENT_NAME;\n      var spans = {}; // Render hook starts after once event is emitted,\n      // but it ends before the second event of the same type.\n      //\n      // Because of this, we start measuring inside the first event,\n      // but finish it before it triggers, to skip the event emitter timing itself.\n\n      var rootHandler = function (hook) {\n        var now = timestampWithMs(); // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n\n        if (_this._rootSpan) {\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            // Create an activity on the first event call. There'll be no second call, as rootSpan will be in place,\n            // thus new event handler won't be attached.\n            // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n            // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n\n            /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n            // eslint-disable-next-line deprecation/deprecation\n            var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n\n            if (tracingIntegration) {\n              _this._tracingActivity = tracingIntegration.constructor.pushActivity('Vue Application Render');\n              var transaction = tracingIntegration.constructor.getTransaction();\n\n              if (transaction) {\n                _this._rootSpan = transaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              } // Use functionality from @sentry/tracing\n\n            } else {\n              var activeTransaction = getActiveTransaction(getCurrentHub());\n\n              if (activeTransaction) {\n                _this._rootSpan = activeTransaction.startChild({\n                  description: 'Application Render',\n                  op: 'Vue'\n                });\n              }\n            }\n            /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n\n          });\n        }\n      };\n\n      var childHandler = function (hook, operation) {\n        // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n        var shouldTrack = Array.isArray(_this._options.tracingOptions.trackComponents) ? _this._options.tracingOptions.trackComponents.indexOf(name) > -1 : _this._options.tracingOptions.trackComponents;\n\n        if (!_this._rootSpan || !shouldTrack) {\n          return;\n        }\n\n        var now = timestampWithMs();\n        var span = spans[operation]; // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n        // However, on the second call (after), it'll be already in place.\n\n        if (span) {\n          span.finish();\n\n          _this._finishRootSpan(now, getCurrentHub);\n        } else {\n          vm.$once(\"hook:\" + hook, function () {\n            if (_this._rootSpan) {\n              spans[operation] = _this._rootSpan.startChild({\n                description: \"Vue <\" + name + \">\",\n                op: operation\n              });\n            }\n          });\n        }\n      }; // Each component has it's own scope, so all activities are only related to one of them\n\n\n      _this._options.tracingOptions.hooks.forEach(function (operation) {\n        // Retrieve corresponding hooks from Vue lifecycle.\n        // eg. mount => ['beforeMount', 'mounted']\n        var internalHooks = HOOKS[operation];\n\n        if (!internalHooks) {\n          logger.warn(\"Unknown hook: \" + operation);\n          return;\n        }\n\n        internalHooks.forEach(function (internalHook) {\n          var handler = rootMount ? rootHandler.bind(_this, internalHook) : childHandler.bind(_this, internalHook, operation);\n          var currentValue = vm.$options[internalHook];\n\n          if (Array.isArray(currentValue)) {\n            vm.$options[internalHook] = __spread([handler], currentValue);\n          } else if (typeof currentValue === 'function') {\n            vm.$options[internalHook] = [handler, currentValue];\n          } else {\n            vm.$options[internalHook] = [handler];\n          }\n        });\n      });\n    };\n\n    logger.log('You are still using the Vue.js integration, consider moving to @sentry/vue');\n    this._options = __assign(__assign({\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Vue: getGlobalObject().Vue,\n      attachProps: true,\n      logErrors: false,\n      tracing: false\n    }, options), {\n      tracingOptions: __assign({\n        hooks: ['mount', 'update'],\n        timeout: 2000,\n        trackComponents: false\n      }, options.tracingOptions)\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  Vue.prototype.setupOnce = function (_, getCurrentHub) {\n    if (!this._options.Vue) {\n      logger.error('Vue integration is missing a Vue instance');\n      return;\n    }\n\n    this._attachErrorHandler(getCurrentHub);\n\n    if (this._options.tracing) {\n      this._startTracing(getCurrentHub);\n    }\n  };\n  /**\n   * Extract component name from the ViewModel\n   */\n\n\n  Vue.prototype._getComponentName = function (vm) {\n    // Such level of granularity is most likely not necessary, but better safe than sorry. â€” Kamil\n    if (!vm) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$root === vm) {\n      return ROOT_COMPONENT_NAME;\n    }\n\n    if (!vm.$options) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$options.name) {\n      return vm.$options.name;\n    }\n\n    if (vm.$options._componentTag) {\n      return vm.$options._componentTag;\n    } // injected by vue-loader\n\n\n    if (vm.$options.__file) {\n      var unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/');\n\n      var filename = basename(unifiedFile, '.vue');\n      return this._componentsCache[filename] || (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, function (_, c) {\n        return c ? c.toUpperCase() : '';\n      }));\n    }\n\n    return ANONYMOUS_COMPONENT_NAME;\n  };\n  /** Finish top-level span and activity with a debounce configured using `timeout` option */\n\n\n  Vue.prototype._finishRootSpan = function (timestamp, getCurrentHub) {\n    var _this = this;\n\n    if (this._rootSpanTimer) {\n      clearTimeout(this._rootSpanTimer);\n    }\n\n    this._rootSpanTimer = setTimeout(function () {\n      if (_this._tracingActivity) {\n        // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n        // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n        // eslint-disable-next-line deprecation/deprecation\n        var tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n\n        if (tracingIntegration) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          tracingIntegration.constructor.popActivity(_this._tracingActivity);\n        }\n      } // We should always finish the span, only should pop activity if using @sentry/apm\n\n\n      if (_this._rootSpan) {\n        _this._rootSpan.finish(timestamp);\n      }\n    }, this._options.tracingOptions.timeout);\n  };\n  /** Inject configured tracing hooks into Vue's component lifecycles */\n\n\n  Vue.prototype._startTracing = function (getCurrentHub) {\n    var applyTracingHooks = this._applyTracingHooks;\n\n    this._options.Vue.mixin({\n      beforeCreate: function () {\n        // eslint-disable-next-line deprecation/deprecation\n        if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {\n          // `this` points to currently rendered component\n          applyTracingHooks(this, getCurrentHub);\n        } else {\n          logger.error('Vue integration has tracing enabled, but Tracing integration is not configured');\n        }\n      }\n    });\n  };\n  /** Inject Sentry's handler into owns Vue's error handler  */\n\n\n  Vue.prototype._attachErrorHandler = function (getCurrentHub) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/unbound-method\n\n\n    var currentErrorHandler = this._options.Vue.config.errorHandler;\n\n    this._options.Vue.config.errorHandler = function (error, vm, info) {\n      var metadata = {};\n\n      if (vm) {\n        try {\n          metadata.componentName = _this._getComponentName(vm);\n\n          if (_this._options.attachProps) {\n            metadata.propsData = vm.$options.propsData;\n          }\n        } catch (_oO) {\n          logger.warn('Unable to extract metadata from Vue component.');\n        }\n      }\n\n      if (info) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n        setTimeout(function () {\n          getCurrentHub().withScope(function (scope) {\n            scope.setContext('vue', metadata);\n            getCurrentHub().captureException(error);\n          });\n        });\n      }\n\n      if (typeof currentErrorHandler === 'function') {\n        currentErrorHandler.call(_this._options.Vue, error, vm, info);\n      }\n\n      if (_this._options.logErrors) {\n        if (_this._options.Vue.util) {\n          _this._options.Vue.util.warn(\"Error in \" + info + \": \\\"\" + error.toString() + \"\\\"\", vm);\n        } // eslint-disable-next-line no-console\n\n\n        console.error(error);\n      }\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  Vue.id = 'Vue';\n  return Vue;\n}();\n\nexport { Vue };\n/** Grabs active transaction off scope */\n\nexport function getActiveTransaction(hub) {\n  if (hub && hub.getScope) {\n    var scope = hub.getScope();\n\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../src/vue.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { EventProcessor, Hub, Integration, IntegrationClass, Scope, Span, Transaction } from '@sentry/types';\nimport { basename, getGlobalObject, logger, timestampWithMs } from '@sentry/utils';\n\n/**\n * Used to extract Tracing integration from the current client,\n * without the need to import `Tracing` itself from the @sentry/apm package.\n * @deprecated as @sentry/tracing should be used over @sentry/apm.\n */\nconst TRACING_GETTER = ({\n  id: 'Tracing',\n} as any) as IntegrationClass<Integration>;\n\n/**\n * Used to extract BrowserTracing integration from @sentry/tracing\n */\nconst BROWSER_TRACING_GETTER = ({\n  id: 'BrowserTracing',\n} as any) as IntegrationClass<Integration>;\n\n/** Global Vue object limited to the methods/attributes we require */\ninterface VueInstance {\n  config: {\n    errorHandler?(error: Error, vm?: ViewModel, info?: string): void;\n  };\n  util?: {\n    warn(...input: any): void;\n  };\n  mixin(hooks: { [key: string]: () => void }): void;\n}\n\n/** Representation of Vue component internals */\ninterface ViewModel {\n  [key: string]: any;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  $root: object;\n  $options: {\n    [key: string]: any;\n    name?: string;\n    propsData?: { [key: string]: any };\n    _componentTag?: string;\n    __file?: string;\n    $_sentryPerfHook?: boolean;\n  };\n  $once(hook: string, cb: () => void): void;\n}\n\n/** Vue Integration configuration */\ninterface IntegrationOptions {\n  /** Vue instance to be used inside the integration */\n  Vue: VueInstance;\n\n  /**\n   * When set to `false`, Sentry will suppress reporting of all props data\n   * from your Vue components for privacy concerns.\n   */\n  attachProps: boolean;\n  /**\n   * When set to `true`, original Vue's `logError` will be called as well.\n   * https://github.com/vuejs/vue/blob/c2b1cfe9ccd08835f2d99f6ce60f67b4de55187f/src/core/util/error.js#L38-L48\n   */\n  logErrors: boolean;\n\n  /**\n   * When set to `true`, enables tracking of components lifecycle performance.\n   * It requires `Tracing` integration to be also enabled.\n   */\n  tracing: boolean;\n\n  /** {@link TracingOptions} */\n  tracingOptions: TracingOptions;\n}\n\n/** Vue specific configuration for Tracing Integration  */\ninterface TracingOptions {\n  /**\n   * Decides whether to track components by hooking into its lifecycle methods.\n   * Can be either set to `boolean` to enable/disable tracking for all of them.\n   * Or to an array of specific component names (case-sensitive).\n   */\n  trackComponents: boolean | string[];\n  /** How long to wait until the tracked root activity is marked as finished and sent of to Sentry */\n  timeout: number;\n  /**\n   * List of hooks to keep track of during component lifecycle.\n   * Available hooks: 'activate' | 'create' | 'destroy' | 'mount' | 'update'\n   * Based on https://vuejs.org/v2/api/#Options-Lifecycle-Hooks\n   */\n  hooks: Operation[];\n}\n\n/** Optional metadata attached to Sentry Event */\ninterface Metadata {\n  [key: string]: any;\n  componentName?: string;\n  propsData?: { [key: string]: any };\n  lifecycleHook?: string;\n}\n\n// https://vuejs.org/v2/api/#Options-Lifecycle-Hooks\ntype Hook =\n  | 'activated'\n  | 'beforeCreate'\n  | 'beforeDestroy'\n  | 'beforeMount'\n  | 'beforeUpdate'\n  | 'created'\n  | 'deactivated'\n  | 'destroyed'\n  | 'mounted'\n  | 'updated';\n\ntype Operation = 'activate' | 'create' | 'destroy' | 'mount' | 'update';\n\n// Mappings from operation to corresponding lifecycle hook.\nconst HOOKS: { [key in Operation]: Hook[] } = {\n  activate: ['activated', 'deactivated'],\n  create: ['beforeCreate', 'created'],\n  destroy: ['beforeDestroy', 'destroyed'],\n  mount: ['beforeMount', 'mounted'],\n  update: ['beforeUpdate', 'updated'],\n};\n\nconst COMPONENT_NAME_REGEXP = /(?:^|[-_/])(\\w)/g;\nconst ROOT_COMPONENT_NAME = 'root';\nconst ANONYMOUS_COMPONENT_NAME = 'anonymous component';\n\n/** JSDoc */\nexport class Vue implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Vue';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Vue.id;\n\n  private readonly _options: IntegrationOptions;\n\n  /**\n   * Cache holding already processed component names\n   */\n  private readonly _componentsCache: { [key: string]: string } = {};\n  private _rootSpan?: Span;\n  private _rootSpanTimer?: ReturnType<typeof setTimeout>;\n  private _tracingActivity?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(\n    options: Partial<Omit<IntegrationOptions, 'tracingOptions'> & { tracingOptions: Partial<TracingOptions> }>,\n  ) {\n    logger.log('You are still using the Vue.js integration, consider moving to @sentry/vue');\n    this._options = {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Vue: getGlobalObject<any>().Vue,\n      attachProps: true,\n      logErrors: false,\n      tracing: false,\n      ...options,\n      tracingOptions: {\n        hooks: ['mount', 'update'],\n        timeout: 2000,\n        trackComponents: false,\n        ...options.tracingOptions,\n      },\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    if (!this._options.Vue) {\n      logger.error('Vue integration is missing a Vue instance');\n      return;\n    }\n\n    this._attachErrorHandler(getCurrentHub);\n\n    if (this._options.tracing) {\n      this._startTracing(getCurrentHub);\n    }\n  }\n\n  /**\n   * Extract component name from the ViewModel\n   */\n  private _getComponentName(vm: ViewModel): string {\n    // Such level of granularity is most likely not necessary, but better safe than sorry. â€” Kamil\n    if (!vm) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$root === vm) {\n      return ROOT_COMPONENT_NAME;\n    }\n\n    if (!vm.$options) {\n      return ANONYMOUS_COMPONENT_NAME;\n    }\n\n    if (vm.$options.name) {\n      return vm.$options.name;\n    }\n\n    if (vm.$options._componentTag) {\n      return vm.$options._componentTag;\n    }\n\n    // injected by vue-loader\n    if (vm.$options.__file) {\n      const unifiedFile = vm.$options.__file.replace(/^[a-zA-Z]:/, '').replace(/\\\\/g, '/');\n      const filename = basename(unifiedFile, '.vue');\n      return (\n        this._componentsCache[filename] ||\n        (this._componentsCache[filename] = filename.replace(COMPONENT_NAME_REGEXP, (_, c: string) =>\n          c ? c.toUpperCase() : '',\n        ))\n      );\n    }\n\n    return ANONYMOUS_COMPONENT_NAME;\n  }\n\n  /** Keep it as attribute function, to keep correct `this` binding inside the hooks callbacks  */\n  // eslint-disable-next-line @typescript-eslint/typedef\n  private readonly _applyTracingHooks = (vm: ViewModel, getCurrentHub: () => Hub): void => {\n    // Don't attach twice, just in case\n    if (vm.$options.$_sentryPerfHook) {\n      return;\n    }\n    vm.$options.$_sentryPerfHook = true;\n\n    const name = this._getComponentName(vm);\n    const rootMount = name === ROOT_COMPONENT_NAME;\n    const spans: { [key: string]: Span } = {};\n\n    // Render hook starts after once event is emitted,\n    // but it ends before the second event of the same type.\n    //\n    // Because of this, we start measuring inside the first event,\n    // but finish it before it triggers, to skip the event emitter timing itself.\n    const rootHandler = (hook: Hook): void => {\n      const now = timestampWithMs();\n\n      // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n      // However, on the second call (after), it'll be already in place.\n      if (this._rootSpan) {\n        this._finishRootSpan(now, getCurrentHub);\n      } else {\n        vm.$once(`hook:${hook}`, () => {\n          // Create an activity on the first event call. There'll be no second call, as rootSpan will be in place,\n          // thus new event handler won't be attached.\n\n          // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n          // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n          /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n          // eslint-disable-next-line deprecation/deprecation\n          const tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n          if (tracingIntegration) {\n            this._tracingActivity = (tracingIntegration as any).constructor.pushActivity('Vue Application Render');\n            const transaction = (tracingIntegration as any).constructor.getTransaction();\n            if (transaction) {\n              this._rootSpan = transaction.startChild({\n                description: 'Application Render',\n                op: 'Vue',\n              });\n            }\n            // Use functionality from @sentry/tracing\n          } else {\n            const activeTransaction = getActiveTransaction(getCurrentHub());\n            if (activeTransaction) {\n              this._rootSpan = activeTransaction.startChild({\n                description: 'Application Render',\n                op: 'Vue',\n              });\n            }\n          }\n          /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n        });\n      }\n    };\n\n    const childHandler = (hook: Hook, operation: Operation): void => {\n      // Skip components that we don't want to track to minimize the noise and give a more granular control to the user\n      const shouldTrack = Array.isArray(this._options.tracingOptions.trackComponents)\n        ? this._options.tracingOptions.trackComponents.indexOf(name) > -1\n        : this._options.tracingOptions.trackComponents;\n\n      if (!this._rootSpan || !shouldTrack) {\n        return;\n      }\n\n      const now = timestampWithMs();\n      const span = spans[operation];\n\n      // On the first handler call (before), it'll be undefined, as `$once` will add it in the future.\n      // However, on the second call (after), it'll be already in place.\n      if (span) {\n        span.finish();\n        this._finishRootSpan(now, getCurrentHub);\n      } else {\n        vm.$once(`hook:${hook}`, () => {\n          if (this._rootSpan) {\n            spans[operation] = this._rootSpan.startChild({\n              description: `Vue <${name}>`,\n              op: operation,\n            });\n          }\n        });\n      }\n    };\n\n    // Each component has it's own scope, so all activities are only related to one of them\n    this._options.tracingOptions.hooks.forEach(operation => {\n      // Retrieve corresponding hooks from Vue lifecycle.\n      // eg. mount => ['beforeMount', 'mounted']\n      const internalHooks = HOOKS[operation];\n\n      if (!internalHooks) {\n        logger.warn(`Unknown hook: ${operation}`);\n        return;\n      }\n\n      internalHooks.forEach(internalHook => {\n        const handler = rootMount\n          ? rootHandler.bind(this, internalHook)\n          : childHandler.bind(this, internalHook, operation);\n        const currentValue = vm.$options[internalHook];\n\n        if (Array.isArray(currentValue)) {\n          vm.$options[internalHook] = [handler, ...currentValue];\n        } else if (typeof currentValue === 'function') {\n          vm.$options[internalHook] = [handler, currentValue];\n        } else {\n          vm.$options[internalHook] = [handler];\n        }\n      });\n    });\n  };\n\n  /** Finish top-level span and activity with a debounce configured using `timeout` option */\n  private _finishRootSpan(timestamp: number, getCurrentHub: () => Hub): void {\n    if (this._rootSpanTimer) {\n      clearTimeout(this._rootSpanTimer);\n    }\n\n    this._rootSpanTimer = setTimeout(() => {\n      if (this._tracingActivity) {\n        // We do this whole dance with `TRACING_GETTER` to prevent `@sentry/apm` from becoming a peerDependency.\n        // We also need to ask for the `.constructor`, as `pushActivity` and `popActivity` are static, not instance methods.\n        // eslint-disable-next-line deprecation/deprecation\n        const tracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n        if (tracingIntegration) {\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          (tracingIntegration as any).constructor.popActivity(this._tracingActivity);\n        }\n      }\n\n      // We should always finish the span, only should pop activity if using @sentry/apm\n      if (this._rootSpan) {\n        this._rootSpan.finish(timestamp);\n      }\n    }, this._options.tracingOptions.timeout);\n  }\n\n  /** Inject configured tracing hooks into Vue's component lifecycles */\n  private _startTracing(getCurrentHub: () => Hub): void {\n    const applyTracingHooks = this._applyTracingHooks;\n\n    this._options.Vue.mixin({\n      beforeCreate(this: ViewModel): void {\n        // eslint-disable-next-line deprecation/deprecation\n        if (getCurrentHub().getIntegration(TRACING_GETTER) || getCurrentHub().getIntegration(BROWSER_TRACING_GETTER)) {\n          // `this` points to currently rendered component\n          applyTracingHooks(this, getCurrentHub);\n        } else {\n          logger.error('Vue integration has tracing enabled, but Tracing integration is not configured');\n        }\n      },\n    });\n  }\n\n  /** Inject Sentry's handler into owns Vue's error handler  */\n  private _attachErrorHandler(getCurrentHub: () => Hub): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const currentErrorHandler = this._options.Vue.config.errorHandler;\n\n    this._options.Vue.config.errorHandler = (error: Error, vm?: ViewModel, info?: string): void => {\n      const metadata: Metadata = {};\n\n      if (vm) {\n        try {\n          metadata.componentName = this._getComponentName(vm);\n\n          if (this._options.attachProps) {\n            metadata.propsData = vm.$options.propsData;\n          }\n        } catch (_oO) {\n          logger.warn('Unable to extract metadata from Vue component.');\n        }\n      }\n\n      if (info) {\n        metadata.lifecycleHook = info;\n      }\n\n      if (getCurrentHub().getIntegration(Vue)) {\n        // Capture exception in the next event loop, to make sure that all breadcrumbs are recorded in time.\n        setTimeout(() => {\n          getCurrentHub().withScope(scope => {\n            scope.setContext('vue', metadata);\n            getCurrentHub().captureException(error);\n          });\n        });\n      }\n\n      if (typeof currentErrorHandler === 'function') {\n        currentErrorHandler.call(this._options.Vue, error, vm, info);\n      }\n\n      if (this._options.logErrors) {\n        if (this._options.Vue.util) {\n          this._options.Vue.util.warn(`Error in ${info}: \"${error.toString()}\"`, vm);\n        }\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    };\n  }\n}\n\ninterface HubType extends Hub {\n  getScope?(): Scope | undefined;\n}\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: HubType): T | undefined {\n  if (hub && hub.getScope) {\n    const scope = hub.getScope() as Scope;\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}