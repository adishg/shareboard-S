{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/PasteChartDialog.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport oc from \"open-color\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { renderSpreadsheet } from \"../charts\";\nimport { t } from \"../i18n\";\nimport { exportToSvg } from \"../scene/export\";\nimport { Dialog } from \"./Dialog\";\nimport \"./PasteChartDialog.scss\";\n\nconst ChartPreviewBtn = props => {\n  _s();\n\n  const previewRef = useRef(null);\n  const [chartElements, setChartElements] = useState(null);\n  useLayoutEffect(() => {\n    if (!props.spreadsheet) {\n      return;\n    }\n\n    const elements = renderSpreadsheet(props.chartType, props.spreadsheet, 0, 0);\n    setChartElements(elements);\n    const svg = exportToSvg(elements, {\n      exportBackground: false,\n      viewBackgroundColor: oc.white,\n      shouldAddWatermark: false\n    });\n    const previewNode = previewRef.current;\n    previewNode.appendChild(svg);\n\n    if (props.selected) {\n      previewNode.parentNode.focus();\n    }\n\n    return () => {\n      previewNode.removeChild(svg);\n    };\n  }, [props.spreadsheet, props.chartType, props.selected]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"ChartPreview\",\n    onClick: () => {\n      if (chartElements) {\n        props.onClick(props.chartType, chartElements);\n      }\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: previewRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChartPreviewBtn, \"2hqhHeiLPm+ctNk3iLAltooIrwY=\");\n\n_c = ChartPreviewBtn;\nexport const PasteChartDialog = ({\n  setAppState,\n  appState,\n  onClose,\n  onInsertChart\n}) => {\n  _s2();\n\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  const handleChartClick = (chartType, elements) => {\n    onInsertChart(elements);\n    trackEvent(\"magic\", \"chart\", chartType);\n    setAppState({\n      currentChartType: chartType,\n      pasteDialog: {\n        shown: false,\n        data: null\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    small: true,\n    onCloseRequest: handleClose,\n    title: t(\"labels.pasteCharts\"),\n    className: \"PasteChartDialog\",\n    autofocus: false,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(ChartPreviewBtn, {\n        chartType: \"bar\",\n        spreadsheet: appState.pasteDialog.data,\n        selected: appState.currentChartType === \"bar\",\n        onClick: handleChartClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChartPreviewBtn, {\n        chartType: \"line\",\n        spreadsheet: appState.pasteDialog.data,\n        selected: appState.currentChartType === \"line\",\n        onClick: handleChartClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PasteChartDialog, \"+DsXUeqOhrmRZ3Rxj9SVlaCvcNg=\");\n\n_c2 = PasteChartDialog;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartPreviewBtn\");\n$RefreshReg$(_c2, \"PasteChartDialog\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/PasteChartDialog.tsx"],"names":["oc","React","useLayoutEffect","useRef","useState","trackEvent","renderSpreadsheet","t","exportToSvg","Dialog","ChartPreviewBtn","props","previewRef","chartElements","setChartElements","spreadsheet","elements","chartType","svg","exportBackground","viewBackgroundColor","white","shouldAddWatermark","previewNode","current","appendChild","selected","parentNode","focus","removeChild","onClick","PasteChartDialog","setAppState","appState","onClose","onInsertChart","handleClose","useCallback","handleChartClick","currentChartType","pasteDialog","shown","data"],"mappings":"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","sourcesContent":["import oc from \"open-color\";\nimport React, { useLayoutEffect, useRef, useState } from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { ChartElements, renderSpreadsheet, Spreadsheet } from \"../charts\";\nimport { ChartType } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { exportToSvg } from \"../scene/export\";\nimport { AppState, LibraryItem } from \"../types\";\nimport { Dialog } from \"./Dialog\";\nimport \"./PasteChartDialog.scss\";\n\ntype OnInsertChart = (chartType: ChartType, elements: ChartElements) => void;\n\nconst ChartPreviewBtn = (props: {\n  spreadsheet: Spreadsheet | null;\n  chartType: ChartType;\n  selected: boolean;\n  onClick: OnInsertChart;\n}) => {\n  const previewRef = useRef<HTMLDivElement | null>(null);\n  const [chartElements, setChartElements] = useState<ChartElements | null>(\n    null,\n  );\n\n  useLayoutEffect(() => {\n    if (!props.spreadsheet) {\n      return;\n    }\n\n    const elements = renderSpreadsheet(\n      props.chartType,\n      props.spreadsheet,\n      0,\n      0,\n    );\n    setChartElements(elements);\n\n    const svg = exportToSvg(elements, {\n      exportBackground: false,\n      viewBackgroundColor: oc.white,\n      shouldAddWatermark: false,\n    });\n\n    const previewNode = previewRef.current!;\n\n    previewNode.appendChild(svg);\n\n    if (props.selected) {\n      (previewNode.parentNode as HTMLDivElement).focus();\n    }\n\n    return () => {\n      previewNode.removeChild(svg);\n    };\n  }, [props.spreadsheet, props.chartType, props.selected]);\n\n  return (\n    <button\n      className=\"ChartPreview\"\n      onClick={() => {\n        if (chartElements) {\n          props.onClick(props.chartType, chartElements);\n        }\n      }}\n    >\n      <div ref={previewRef} />\n    </button>\n  );\n};\n\nexport const PasteChartDialog = ({\n  setAppState,\n  appState,\n  onClose,\n  onInsertChart,\n}: {\n  appState: AppState;\n  onClose: () => void;\n  setAppState: React.Component<any, AppState>[\"setState\"];\n  onInsertChart: (elements: LibraryItem) => void;\n}) => {\n  const handleClose = React.useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  const handleChartClick = (chartType: ChartType, elements: ChartElements) => {\n    onInsertChart(elements);\n    trackEvent(\"magic\", \"chart\", chartType);\n    setAppState({\n      currentChartType: chartType,\n      pasteDialog: {\n        shown: false,\n        data: null,\n      },\n    });\n  };\n\n  return (\n    <Dialog\n      small\n      onCloseRequest={handleClose}\n      title={t(\"labels.pasteCharts\")}\n      className={\"PasteChartDialog\"}\n      autofocus={false}\n    >\n      <div className={\"container\"}>\n        <ChartPreviewBtn\n          chartType=\"bar\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"bar\"}\n          onClick={handleChartClick}\n        />\n        <ChartPreviewBtn\n          chartType=\"line\"\n          spreadsheet={appState.pasteDialog.data}\n          selected={appState.currentChartType === \"line\"}\n          onClick={handleChartClick}\n        />\n      </div>\n    </Dialog>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}