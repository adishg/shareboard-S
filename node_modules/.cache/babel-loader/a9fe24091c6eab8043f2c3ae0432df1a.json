{"ast":null,"code":"import { OMIT_SIDES_FOR_MULTIPLE_ELEMENTS, getTransformHandlesFromCoords, getTransformHandles } from \"./transformHandles\";\n\nconst isInsideTransformHandle = (transformHandle, x, y) => x >= transformHandle[0] && x <= transformHandle[0] + transformHandle[2] && y >= transformHandle[1] && y <= transformHandle[1] + transformHandle[3];\n\nexport const resizeTest = (element, appState, x, y, zoom, pointerType) => {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n\n  const {\n    rotation: rotationTransformHandle,\n    ...transformHandles\n  } = getTransformHandles(element, zoom, pointerType);\n\n  if (rotationTransformHandle && isInsideTransformHandle(rotationTransformHandle, x, y)) {\n    return \"rotation\";\n  }\n\n  const filter = Object.keys(transformHandles).filter(key => {\n    const transformHandle = transformHandles[key];\n\n    if (!transformHandle) {\n      return false;\n    }\n\n    return isInsideTransformHandle(transformHandle, x, y);\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n};\nexport const getElementWithTransformHandleType = (elements, appState, scenePointerX, scenePointerY, zoom, pointerType) => {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n\n    const transformHandleType = resizeTest(element, appState, scenePointerX, scenePointerY, zoom, pointerType);\n    return transformHandleType ? {\n      element,\n      transformHandleType\n    } : null;\n  }, null);\n};\nexport const getTransformHandleTypeFromCoords = ([x1, y1, x2, y2], scenePointerX, scenePointerY, zoom, pointerType) => {\n  const transformHandles = getTransformHandlesFromCoords([x1, y1, x2, y2], 0, zoom, pointerType, OMIT_SIDES_FOR_MULTIPLE_ELEMENTS);\n  const found = Object.keys(transformHandles).find(key => {\n    const transformHandle = transformHandles[key];\n    return transformHandle && isInsideTransformHandle(transformHandle, scenePointerX, scenePointerY);\n  });\n  return found || false;\n};\nconst RESIZE_CURSORS = [\"ns\", \"nesw\", \"ew\", \"nwse\"];\n\nconst rotateResizeCursor = (cursor, angle) => {\n  const index = RESIZE_CURSORS.indexOf(cursor);\n\n  if (index >= 0) {\n    const a = Math.round(angle / (Math.PI / 4));\n    cursor = RESIZE_CURSORS[(index + a) % RESIZE_CURSORS.length];\n  }\n\n  return cursor;\n};\n/*\n * Returns bi-directional cursor for the element being resized\n */\n\n\nexport const getCursorForResizingElement = resizingElement => {\n  const {\n    element,\n    transformHandleType\n  } = resizingElement;\n  const shouldSwapCursors = element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (transformHandleType) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n\n      break;\n\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n\n      break;\n\n    case \"rotation\":\n      return \"grab\";\n  }\n\n  if (cursor && element) {\n    cursor = rotateResizeCursor(cursor, element.angle);\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/element/resizeTest.ts"],"names":["OMIT_SIDES_FOR_MULTIPLE_ELEMENTS","getTransformHandlesFromCoords","getTransformHandles","isInsideTransformHandle","transformHandle","x","y","resizeTest","element","appState","zoom","pointerType","selectedElementIds","id","rotation","rotationTransformHandle","transformHandles","filter","Object","keys","key","length","getElementWithTransformHandleType","elements","scenePointerX","scenePointerY","reduce","result","transformHandleType","getTransformHandleTypeFromCoords","x1","y1","x2","y2","found","find","RESIZE_CURSORS","rotateResizeCursor","cursor","angle","index","indexOf","a","Math","round","PI","getCursorForResizingElement","resizingElement","shouldSwapCursors","sign","height","width"],"mappings":"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","sourcesContent":["import {\n  ExcalidrawElement,\n  PointerType,\n  NonDeletedExcalidrawElement,\n} from \"./types\";\n\nimport {\n  OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  getTransformHandlesFromCoords,\n  getTransformHandles,\n  TransformHandleType,\n  TransformHandle,\n  MaybeTransformHandleType,\n} from \"./transformHandles\";\nimport { AppState, Zoom } from \"../types\";\n\nconst isInsideTransformHandle = (\n  transformHandle: TransformHandle,\n  x: number,\n  y: number,\n) =>\n  x >= transformHandle[0] &&\n  x <= transformHandle[0] + transformHandle[2] &&\n  y >= transformHandle[1] &&\n  y <= transformHandle[1] + transformHandle[3];\n\nexport const resizeTest = (\n  element: NonDeletedExcalidrawElement,\n  appState: AppState,\n  x: number,\n  y: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n): MaybeTransformHandleType => {\n  if (!appState.selectedElementIds[element.id]) {\n    return false;\n  }\n\n  const {\n    rotation: rotationTransformHandle,\n    ...transformHandles\n  } = getTransformHandles(element, zoom, pointerType);\n\n  if (\n    rotationTransformHandle &&\n    isInsideTransformHandle(rotationTransformHandle, x, y)\n  ) {\n    return \"rotation\" as TransformHandleType;\n  }\n\n  const filter = Object.keys(transformHandles).filter((key) => {\n    const transformHandle = transformHandles[\n      key as Exclude<TransformHandleType, \"rotation\">\n    ]!;\n    if (!transformHandle) {\n      return false;\n    }\n    return isInsideTransformHandle(transformHandle, x, y);\n  });\n\n  if (filter.length > 0) {\n    return filter[0] as TransformHandleType;\n  }\n\n  return false;\n};\n\nexport const getElementWithTransformHandleType = (\n  elements: readonly NonDeletedExcalidrawElement[],\n  appState: AppState,\n  scenePointerX: number,\n  scenePointerY: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n) => {\n  return elements.reduce((result, element) => {\n    if (result) {\n      return result;\n    }\n    const transformHandleType = resizeTest(\n      element,\n      appState,\n      scenePointerX,\n      scenePointerY,\n      zoom,\n      pointerType,\n    );\n    return transformHandleType ? { element, transformHandleType } : null;\n  }, null as { element: NonDeletedExcalidrawElement; transformHandleType: MaybeTransformHandleType } | null);\n};\n\nexport const getTransformHandleTypeFromCoords = (\n  [x1, y1, x2, y2]: readonly [number, number, number, number],\n  scenePointerX: number,\n  scenePointerY: number,\n  zoom: Zoom,\n  pointerType: PointerType,\n): MaybeTransformHandleType => {\n  const transformHandles = getTransformHandlesFromCoords(\n    [x1, y1, x2, y2],\n    0,\n    zoom,\n    pointerType,\n    OMIT_SIDES_FOR_MULTIPLE_ELEMENTS,\n  );\n\n  const found = Object.keys(transformHandles).find((key) => {\n    const transformHandle = transformHandles[\n      key as Exclude<TransformHandleType, \"rotation\">\n    ]!;\n    return (\n      transformHandle &&\n      isInsideTransformHandle(transformHandle, scenePointerX, scenePointerY)\n    );\n  });\n  return (found || false) as MaybeTransformHandleType;\n};\n\nconst RESIZE_CURSORS = [\"ns\", \"nesw\", \"ew\", \"nwse\"];\nconst rotateResizeCursor = (cursor: string, angle: number) => {\n  const index = RESIZE_CURSORS.indexOf(cursor);\n  if (index >= 0) {\n    const a = Math.round(angle / (Math.PI / 4));\n    cursor = RESIZE_CURSORS[(index + a) % RESIZE_CURSORS.length];\n  }\n  return cursor;\n};\n\n/*\n * Returns bi-directional cursor for the element being resized\n */\nexport const getCursorForResizingElement = (resizingElement: {\n  element?: ExcalidrawElement;\n  transformHandleType: MaybeTransformHandleType;\n}): string => {\n  const { element, transformHandleType } = resizingElement;\n  const shouldSwapCursors =\n    element && Math.sign(element.height) * Math.sign(element.width) === -1;\n  let cursor = null;\n\n  switch (transformHandleType) {\n    case \"n\":\n    case \"s\":\n      cursor = \"ns\";\n      break;\n    case \"w\":\n    case \"e\":\n      cursor = \"ew\";\n      break;\n    case \"nw\":\n    case \"se\":\n      if (shouldSwapCursors) {\n        cursor = \"nesw\";\n      } else {\n        cursor = \"nwse\";\n      }\n      break;\n    case \"ne\":\n    case \"sw\":\n      if (shouldSwapCursors) {\n        cursor = \"nwse\";\n      } else {\n        cursor = \"nesw\";\n      }\n      break;\n    case \"rotation\":\n      return \"grab\";\n  }\n\n  if (cursor && element) {\n    cursor = rotateResizeCursor(cursor, element.angle);\n  }\n\n  return cursor ? `${cursor}-resize` : \"\";\n};\n"]},"metadata":{},"sourceType":"module"}