{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/IconPicker.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { Popover } from \"./Popover\";\nimport \"./IconPicker.scss\";\nimport { isArrowKey, KEYS } from \"../keys\";\nimport { getLanguage } from \"../i18n\";\n\nfunction Picker({\n  options,\n  value,\n  label,\n  onChange,\n  onClose\n}) {\n  _s();\n\n  const rFirstItem = React.useRef();\n  const rActiveItem = React.useRef();\n  const rGallery = React.useRef(null);\n  React.useEffect(() => {\n    // After the component is first mounted focus on first input\n    if (rActiveItem.current) {\n      rActiveItem.current.focus();\n    } else if (rGallery.current) {\n      rGallery.current.focus();\n    }\n  }, []);\n\n  const handleKeyDown = event => {\n    const pressedOption = options.find(option => option.keyBinding === event.key.toLowerCase());\n\n    if (!(event.metaKey || event.altKey || event.ctrlKey) && pressedOption) {\n      // Keybinding navigation\n      const index = options.indexOf(pressedOption);\n      rGallery.current.children[index].focus();\n      event.preventDefault();\n    } else if (event.key === KEYS.TAB) {\n      // Tab navigation cycle through options. If the user tabs\n      // away from the picker, close the picker. We need to use\n      // a timeout here to let the stack clear before checking.\n      setTimeout(() => {\n        const active = rActiveItem.current;\n        const docActive = document.activeElement;\n\n        if (active !== docActive) {\n          onClose();\n        }\n      }, 0);\n    } else if (isArrowKey(event.key)) {\n      // Arrow navigation\n      const {\n        activeElement\n      } = document;\n      const isRTL = getLanguage().rtl;\n      const index = Array.prototype.indexOf.call(rGallery.current.children, activeElement);\n\n      if (index !== -1) {\n        const length = options.length;\n        let nextIndex = index;\n\n        switch (event.key) {\n          // Select the next option\n          case isRTL ? KEYS.ARROW_LEFT : KEYS.ARROW_RIGHT:\n          case KEYS.ARROW_DOWN:\n            {\n              nextIndex = (index + 1) % length;\n              break;\n            }\n          // Select the previous option\n\n          case isRTL ? KEYS.ARROW_RIGHT : KEYS.ARROW_LEFT:\n          case KEYS.ARROW_UP:\n            {\n              nextIndex = (length + index - 1) % length;\n              break;\n            }\n        }\n\n        rGallery.current.children[nextIndex].focus();\n      }\n\n      event.preventDefault();\n    } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {\n      // Close on escape or enter\n      event.preventDefault();\n      onClose();\n    }\n\n    event.nativeEvent.stopImmediatePropagation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `picker`,\n    role: \"dialog\",\n    \"aria-modal\": \"true\",\n    \"aria-label\": label,\n    onKeyDown: handleKeyDown,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"picker-content\",\n      ref: rGallery,\n      children: options.map((option, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"picker-option\",\n        onClick: event => {\n          event.currentTarget.focus();\n          onChange(option.value);\n        },\n        title: `${option.text} â€” ${option.keyBinding.toUpperCase()}`,\n        \"aria-label\": option.text || \"none\",\n        \"aria-keyshortcuts\": option.keyBinding,\n        ref: el => {\n          if (el && i === 0) {\n            rFirstItem.current = el;\n          }\n\n          if (el && option.value === value) {\n            rActiveItem.current = el;\n          }\n        },\n        onFocus: () => {\n          onChange(option.value);\n        },\n        children: [option.icon, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"picker-keybinding\",\n          children: option.keyBinding\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)]\n      }, option.text, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Picker, \"fS7lAQl6TsmYywmLV9RjRWr7zXU=\");\n\n_c = Picker;\nexport function IconPicker({\n  value,\n  label,\n  options,\n  onChange,\n  group = \"\"\n}) {\n  _s2();\n\n  var _options$find;\n\n  const [isActive, setActive] = React.useState(false);\n  const rPickerButton = React.useRef(null);\n  const isRTL = getLanguage().rtl;\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"picker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      name: group,\n      className: isActive ? \"active\" : \"\",\n      \"aria-label\": label,\n      onClick: () => setActive(!isActive),\n      ref: rPickerButton,\n      children: (_options$find = options.find(option => option.value === value)) === null || _options$find === void 0 ? void 0 : _options$find.icon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(React.Suspense, {\n      fallback: \"\",\n      children: isActive ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Popover, {\n          onCloseRequest: event => event.target !== rPickerButton.current && setActive(false),\n          ...(isRTL ? {\n            right: 5.5\n          } : {\n            left: -5.5\n          }),\n          children: /*#__PURE__*/_jsxDEV(Picker, {\n            options: options,\n            value: value,\n            label: label,\n            onChange: onChange,\n            onClose: () => {\n              var _rPickerButton$curren;\n\n              setActive(false);\n              (_rPickerButton$curren = rPickerButton.current) === null || _rPickerButton$curren === void 0 ? void 0 : _rPickerButton$curren.focus();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"picker-triangle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(IconPicker, \"RPiNJKXG/qdAyE1xjCOgsYzBjok=\");\n\n_c2 = IconPicker;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Picker\");\n$RefreshReg$(_c2, \"IconPicker\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/IconPicker.tsx"],"names":["React","Popover","isArrowKey","KEYS","getLanguage","Picker","options","value","label","onChange","onClose","rFirstItem","useRef","rActiveItem","rGallery","useEffect","current","focus","handleKeyDown","event","pressedOption","find","option","keyBinding","key","toLowerCase","metaKey","altKey","ctrlKey","index","indexOf","children","preventDefault","TAB","setTimeout","active","docActive","document","activeElement","isRTL","rtl","Array","prototype","call","length","nextIndex","ARROW_LEFT","ARROW_RIGHT","ARROW_DOWN","ARROW_UP","ESCAPE","ENTER","nativeEvent","stopImmediatePropagation","map","i","currentTarget","text","toUpperCase","el","icon","IconPicker","group","isActive","setActive","useState","rPickerButton","target","right","left"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Popover } from \"./Popover\";\n\nimport \"./IconPicker.scss\";\nimport { isArrowKey, KEYS } from \"../keys\";\nimport { getLanguage } from \"../i18n\";\n\nfunction Picker<T>({\n  options,\n  value,\n  label,\n  onChange,\n  onClose,\n}: {\n  label: string;\n  value: T;\n  options: { value: T; text: string; icon: JSX.Element; keyBinding: string }[];\n  onChange: (value: T) => void;\n  onClose: () => void;\n}) {\n  const rFirstItem = React.useRef<HTMLButtonElement>();\n  const rActiveItem = React.useRef<HTMLButtonElement>();\n  const rGallery = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    // After the component is first mounted focus on first input\n    if (rActiveItem.current) {\n      rActiveItem.current.focus();\n    } else if (rGallery.current) {\n      rGallery.current.focus();\n    }\n  }, []);\n\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    const pressedOption = options.find(\n      (option) => option.keyBinding === event.key.toLowerCase(),\n    )!;\n\n    if (!(event.metaKey || event.altKey || event.ctrlKey) && pressedOption) {\n      // Keybinding navigation\n      const index = options.indexOf(pressedOption);\n      (rGallery!.current!.children![index] as any).focus();\n      event.preventDefault();\n    } else if (event.key === KEYS.TAB) {\n      // Tab navigation cycle through options. If the user tabs\n      // away from the picker, close the picker. We need to use\n      // a timeout here to let the stack clear before checking.\n      setTimeout(() => {\n        const active = rActiveItem.current;\n        const docActive = document.activeElement;\n        if (active !== docActive) {\n          onClose();\n        }\n      }, 0);\n    } else if (isArrowKey(event.key)) {\n      // Arrow navigation\n      const { activeElement } = document;\n      const isRTL = getLanguage().rtl;\n      const index = Array.prototype.indexOf.call(\n        rGallery!.current!.children,\n        activeElement,\n      );\n      if (index !== -1) {\n        const length = options.length;\n        let nextIndex = index;\n\n        switch (event.key) {\n          // Select the next option\n          case isRTL ? KEYS.ARROW_LEFT : KEYS.ARROW_RIGHT:\n          case KEYS.ARROW_DOWN: {\n            nextIndex = (index + 1) % length;\n            break;\n          }\n          // Select the previous option\n          case isRTL ? KEYS.ARROW_RIGHT : KEYS.ARROW_LEFT:\n          case KEYS.ARROW_UP: {\n            nextIndex = (length + index - 1) % length;\n            break;\n          }\n        }\n\n        (rGallery.current!.children![nextIndex] as any).focus();\n      }\n      event.preventDefault();\n    } else if (event.key === KEYS.ESCAPE || event.key === KEYS.ENTER) {\n      // Close on escape or enter\n      event.preventDefault();\n      onClose();\n    }\n    event.nativeEvent.stopImmediatePropagation();\n  };\n\n  return (\n    <div\n      className={`picker`}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label={label}\n      onKeyDown={handleKeyDown}\n    >\n      <div className=\"picker-content\" ref={rGallery}>\n        {options.map((option, i) => (\n          <button\n            className=\"picker-option\"\n            onClick={(event) => {\n              (event.currentTarget as HTMLButtonElement).focus();\n              onChange(option.value);\n            }}\n            title={`${option.text} â€” ${option.keyBinding.toUpperCase()}`}\n            aria-label={option.text || \"none\"}\n            aria-keyshortcuts={option.keyBinding}\n            key={option.text}\n            ref={(el) => {\n              if (el && i === 0) {\n                rFirstItem.current = el;\n              }\n              if (el && option.value === value) {\n                rActiveItem.current = el;\n              }\n            }}\n            onFocus={() => {\n              onChange(option.value);\n            }}\n          >\n            {option.icon}\n            <span className=\"picker-keybinding\">{option.keyBinding}</span>\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function IconPicker<T>({\n  value,\n  label,\n  options,\n  onChange,\n  group = \"\",\n}: {\n  label: string;\n  value: T;\n  options: { value: T; text: string; icon: JSX.Element; keyBinding: string }[];\n  onChange: (value: T) => void;\n  group?: string;\n}) {\n  const [isActive, setActive] = React.useState(false);\n  const rPickerButton = React.useRef<any>(null);\n  const isRTL = getLanguage().rtl;\n\n  return (\n    <label className={\"picker-container\"}>\n      <button\n        name={group}\n        className={isActive ? \"active\" : \"\"}\n        aria-label={label}\n        onClick={() => setActive(!isActive)}\n        ref={rPickerButton}\n      >\n        {options.find((option) => option.value === value)?.icon}\n      </button>\n      <React.Suspense fallback=\"\">\n        {isActive ? (\n          <>\n            <Popover\n              onCloseRequest={(event) =>\n                event.target !== rPickerButton.current && setActive(false)\n              }\n              {...(isRTL ? { right: 5.5 } : { left: -5.5 })}\n            >\n              <Picker\n                options={options}\n                value={value}\n                label={label}\n                onChange={onChange}\n                onClose={() => {\n                  setActive(false);\n                  rPickerButton.current?.focus();\n                }}\n              />\n            </Popover>\n            <div className=\"picker-triangle\" />\n          </>\n        ) : null}\n      </React.Suspense>\n    </label>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}