{"ast":null,"code":"// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n  const out = [];\n  let lastType = '';\n  let cx = 0,\n      cy = 0;\n  let subx = 0,\n      suby = 0;\n  let lcx = 0,\n      lcy = 0;\n\n  for (const {\n    key,\n    data\n  } of segments) {\n    switch (key) {\n      case 'M':\n        out.push({\n          key: 'M',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        [subx, suby] = data;\n        break;\n\n      case 'C':\n        out.push({\n          key: 'C',\n          data: [...data]\n        });\n        cx = data[4];\n        cy = data[5];\n        lcx = data[2];\n        lcy = data[3];\n        break;\n\n      case 'L':\n        out.push({\n          key: 'L',\n          data: [...data]\n        });\n        [cx, cy] = data;\n        break;\n\n      case 'H':\n        cx = data[0];\n        out.push({\n          key: 'L',\n          data: [cx, cy]\n        });\n        break;\n\n      case 'V':\n        cy = data[0];\n        out.push({\n          key: 'L',\n          data: [cx, cy]\n        });\n        break;\n\n      case 'S':\n        {\n          let cx1 = 0,\n              cy1 = 0;\n\n          if (lastType === 'C' || lastType === 'S') {\n            cx1 = cx + (cx - lcx);\n            cy1 = cy + (cy - lcy);\n          } else {\n            cx1 = cx;\n            cy1 = cy;\n          }\n\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, ...data]\n          });\n          lcx = data[0];\n          lcy = data[1];\n          cx = data[2];\n          cy = data[3];\n          break;\n        }\n\n      case 'T':\n        {\n          const [x, y] = data;\n          let x1 = 0,\n              y1 = 0;\n\n          if (lastType === 'Q' || lastType === 'T') {\n            x1 = cx + (cx - lcx);\n            y1 = cy + (cy - lcy);\n          } else {\n            x1 = cx;\n            y1 = cy;\n          }\n\n          const cx1 = cx + 2 * (x1 - cx) / 3;\n          const cy1 = cy + 2 * (y1 - cy) / 3;\n          const cx2 = x + 2 * (x1 - x) / 3;\n          const cy2 = y + 2 * (y1 - y) / 3;\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lcx = x1;\n          lcy = y1;\n          cx = x;\n          cy = y;\n          break;\n        }\n\n      case 'Q':\n        {\n          const [x1, y1, x, y] = data;\n          const cx1 = cx + 2 * (x1 - cx) / 3;\n          const cy1 = cy + 2 * (y1 - cy) / 3;\n          const cx2 = x + 2 * (x1 - x) / 3;\n          const cy2 = y + 2 * (y1 - y) / 3;\n          out.push({\n            key: 'C',\n            data: [cx1, cy1, cx2, cy2, x, y]\n          });\n          lcx = x1;\n          lcy = y1;\n          cx = x;\n          cy = y;\n          break;\n        }\n\n      case 'A':\n        {\n          const r1 = Math.abs(data[0]);\n          const r2 = Math.abs(data[1]);\n          const angle = data[2];\n          const largeArcFlag = data[3];\n          const sweepFlag = data[4];\n          const x = data[5];\n          const y = data[6];\n\n          if (r1 === 0 || r2 === 0) {\n            out.push({\n              key: 'C',\n              data: [cx, cy, x, y, x, y]\n            });\n            cx = x;\n            cy = y;\n          } else {\n            if (cx !== x || cy !== y) {\n              const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n              curves.forEach(function (curve) {\n                out.push({\n                  key: 'C',\n                  data: curve\n                });\n              });\n              cx = x;\n              cy = y;\n            }\n          }\n\n          break;\n        }\n\n      case 'Z':\n        out.push({\n          key: 'Z',\n          data: []\n        });\n        cx = subx;\n        cy = suby;\n        break;\n    }\n\n    lastType = key;\n  }\n\n  return out;\n}\n\nfunction degToRad(degrees) {\n  return Math.PI * degrees / 180;\n}\n\nfunction rotate(x, y, angleRad) {\n  const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n  const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n  return [X, Y];\n}\n\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n  const angleRad = degToRad(angle);\n  let params = [];\n  let f1 = 0,\n      f2 = 0,\n      cx = 0,\n      cy = 0;\n\n  if (recursive) {\n    [f1, f2, cx, cy] = recursive;\n  } else {\n    [x1, y1] = rotate(x1, y1, -angleRad);\n    [x2, y2] = rotate(x2, y2, -angleRad);\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = x * x / (r1 * r1) + y * y / (r2 * r2);\n\n    if (h > 1) {\n      h = Math.sqrt(h);\n      r1 = h * r1;\n      r2 = h * r2;\n    }\n\n    const sign = largeArcFlag === sweepFlag ? -1 : 1;\n    const r1Pow = r1 * r1;\n    const r2Pow = r2 * r2;\n    const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n    const right = r1Pow * y * y + r2Pow * x * x;\n    const k = sign * Math.sqrt(Math.abs(left / right));\n    cx = k * r1 * y / r2 + (x1 + x2) / 2;\n    cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n    f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n    f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n\n    if (x1 < cx) {\n      f1 = Math.PI - f1;\n    }\n\n    if (x2 < cx) {\n      f2 = Math.PI - f2;\n    }\n\n    if (f1 < 0) {\n      f1 = Math.PI * 2 + f1;\n    }\n\n    if (f2 < 0) {\n      f2 = Math.PI * 2 + f2;\n    }\n\n    if (sweepFlag && f1 > f2) {\n      f1 = f1 - Math.PI * 2;\n    }\n\n    if (!sweepFlag && f2 > f1) {\n      f2 = f2 - Math.PI * 2;\n    }\n  }\n\n  let df = f2 - f1;\n\n  if (Math.abs(df) > Math.PI * 120 / 180) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n\n    if (sweepFlag && f2 > f1) {\n      f2 = f1 + Math.PI * 120 / 180 * 1;\n    } else {\n      f2 = f1 + Math.PI * 120 / 180 * -1;\n    }\n\n    x2 = cx + r1 * Math.cos(f2);\n    y2 = cy + r2 * Math.sin(f2);\n    params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n  }\n\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = 4 / 3 * r1 * t;\n  const hy = 4 / 3 * r2 * t;\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n\n  if (recursive) {\n    return [m2, m3, m4].concat(params);\n  } else {\n    params = [m2, m3, m4].concat(params);\n    const curves = [];\n\n    for (let i = 0; i < params.length; i += 3) {\n      const r1 = rotate(params[i][0], params[i][1], angleRad);\n      const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n      const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n      curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n    }\n\n    return curves;\n  }\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/path-data-parser/lib/normalize.js"],"names":["normalize","segments","out","lastType","cx","cy","subx","suby","lcx","lcy","key","data","push","cx1","cy1","x","y","x1","y1","cx2","cy2","r1","Math","abs","r2","angle","largeArcFlag","sweepFlag","curves","arcToCubicCurves","forEach","curve","degToRad","degrees","PI","rotate","angleRad","X","cos","sin","Y","x2","y2","recursive","params","f1","f2","h","sqrt","sign","r1Pow","r2Pow","left","right","k","asin","parseFloat","toFixed","df","f2old","x2old","y2old","c1","s1","c2","s2","t","tan","hx","hy","m1","m2","m3","m4","concat","i","length","r3"],"mappings":"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","sourcesContent":["// Normalize path to include only M, L, C, and Z commands\nexport function normalize(segments) {\n    const out = [];\n    let lastType = '';\n    let cx = 0, cy = 0;\n    let subx = 0, suby = 0;\n    let lcx = 0, lcy = 0;\n    for (const { key, data } of segments) {\n        switch (key) {\n            case 'M':\n                out.push({ key: 'M', data: [...data] });\n                [cx, cy] = data;\n                [subx, suby] = data;\n                break;\n            case 'C':\n                out.push({ key: 'C', data: [...data] });\n                cx = data[4];\n                cy = data[5];\n                lcx = data[2];\n                lcy = data[3];\n                break;\n            case 'L':\n                out.push({ key: 'L', data: [...data] });\n                [cx, cy] = data;\n                break;\n            case 'H':\n                cx = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'V':\n                cy = data[0];\n                out.push({ key: 'L', data: [cx, cy] });\n                break;\n            case 'S': {\n                let cx1 = 0, cy1 = 0;\n                if (lastType === 'C' || lastType === 'S') {\n                    cx1 = cx + (cx - lcx);\n                    cy1 = cy + (cy - lcy);\n                }\n                else {\n                    cx1 = cx;\n                    cy1 = cy;\n                }\n                out.push({ key: 'C', data: [cx1, cy1, ...data] });\n                lcx = data[0];\n                lcy = data[1];\n                cx = data[2];\n                cy = data[3];\n                break;\n            }\n            case 'T': {\n                const [x, y] = data;\n                let x1 = 0, y1 = 0;\n                if (lastType === 'Q' || lastType === 'T') {\n                    x1 = cx + (cx - lcx);\n                    y1 = cy + (cy - lcy);\n                }\n                else {\n                    x1 = cx;\n                    y1 = cy;\n                }\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'Q': {\n                const [x1, y1, x, y] = data;\n                const cx1 = cx + 2 * (x1 - cx) / 3;\n                const cy1 = cy + 2 * (y1 - cy) / 3;\n                const cx2 = x + 2 * (x1 - x) / 3;\n                const cy2 = y + 2 * (y1 - y) / 3;\n                out.push({ key: 'C', data: [cx1, cy1, cx2, cy2, x, y] });\n                lcx = x1;\n                lcy = y1;\n                cx = x;\n                cy = y;\n                break;\n            }\n            case 'A': {\n                const r1 = Math.abs(data[0]);\n                const r2 = Math.abs(data[1]);\n                const angle = data[2];\n                const largeArcFlag = data[3];\n                const sweepFlag = data[4];\n                const x = data[5];\n                const y = data[6];\n                if (r1 === 0 || r2 === 0) {\n                    out.push({ key: 'C', data: [cx, cy, x, y, x, y] });\n                    cx = x;\n                    cy = y;\n                }\n                else {\n                    if (cx !== x || cy !== y) {\n                        const curves = arcToCubicCurves(cx, cy, x, y, r1, r2, angle, largeArcFlag, sweepFlag);\n                        curves.forEach(function (curve) {\n                            out.push({ key: 'C', data: curve });\n                        });\n                        cx = x;\n                        cy = y;\n                    }\n                }\n                break;\n            }\n            case 'Z':\n                out.push({ key: 'Z', data: [] });\n                cx = subx;\n                cy = suby;\n                break;\n        }\n        lastType = key;\n    }\n    return out;\n}\nfunction degToRad(degrees) {\n    return (Math.PI * degrees) / 180;\n}\nfunction rotate(x, y, angleRad) {\n    const X = x * Math.cos(angleRad) - y * Math.sin(angleRad);\n    const Y = x * Math.sin(angleRad) + y * Math.cos(angleRad);\n    return [X, Y];\n}\nfunction arcToCubicCurves(x1, y1, x2, y2, r1, r2, angle, largeArcFlag, sweepFlag, recursive) {\n    const angleRad = degToRad(angle);\n    let params = [];\n    let f1 = 0, f2 = 0, cx = 0, cy = 0;\n    if (recursive) {\n        [f1, f2, cx, cy] = recursive;\n    }\n    else {\n        [x1, y1] = rotate(x1, y1, -angleRad);\n        [x2, y2] = rotate(x2, y2, -angleRad);\n        const x = (x1 - x2) / 2;\n        const y = (y1 - y2) / 2;\n        let h = (x * x) / (r1 * r1) + (y * y) / (r2 * r2);\n        if (h > 1) {\n            h = Math.sqrt(h);\n            r1 = h * r1;\n            r2 = h * r2;\n        }\n        const sign = (largeArcFlag === sweepFlag) ? -1 : 1;\n        const r1Pow = r1 * r1;\n        const r2Pow = r2 * r2;\n        const left = r1Pow * r2Pow - r1Pow * y * y - r2Pow * x * x;\n        const right = r1Pow * y * y + r2Pow * x * x;\n        const k = sign * Math.sqrt(Math.abs(left / right));\n        cx = k * r1 * y / r2 + (x1 + x2) / 2;\n        cy = k * -r2 * x / r1 + (y1 + y2) / 2;\n        f1 = Math.asin(parseFloat(((y1 - cy) / r2).toFixed(9)));\n        f2 = Math.asin(parseFloat(((y2 - cy) / r2).toFixed(9)));\n        if (x1 < cx) {\n            f1 = Math.PI - f1;\n        }\n        if (x2 < cx) {\n            f2 = Math.PI - f2;\n        }\n        if (f1 < 0) {\n            f1 = Math.PI * 2 + f1;\n        }\n        if (f2 < 0) {\n            f2 = Math.PI * 2 + f2;\n        }\n        if (sweepFlag && f1 > f2) {\n            f1 = f1 - Math.PI * 2;\n        }\n        if (!sweepFlag && f2 > f1) {\n            f2 = f2 - Math.PI * 2;\n        }\n    }\n    let df = f2 - f1;\n    if (Math.abs(df) > (Math.PI * 120 / 180)) {\n        const f2old = f2;\n        const x2old = x2;\n        const y2old = y2;\n        if (sweepFlag && f2 > f1) {\n            f2 = f1 + (Math.PI * 120 / 180) * (1);\n        }\n        else {\n            f2 = f1 + (Math.PI * 120 / 180) * (-1);\n        }\n        x2 = cx + r1 * Math.cos(f2);\n        y2 = cy + r2 * Math.sin(f2);\n        params = arcToCubicCurves(x2, y2, x2old, y2old, r1, r2, angle, 0, sweepFlag, [f2, f2old, cx, cy]);\n    }\n    df = f2 - f1;\n    const c1 = Math.cos(f1);\n    const s1 = Math.sin(f1);\n    const c2 = Math.cos(f2);\n    const s2 = Math.sin(f2);\n    const t = Math.tan(df / 4);\n    const hx = 4 / 3 * r1 * t;\n    const hy = 4 / 3 * r2 * t;\n    const m1 = [x1, y1];\n    const m2 = [x1 + hx * s1, y1 - hy * c1];\n    const m3 = [x2 + hx * s2, y2 - hy * c2];\n    const m4 = [x2, y2];\n    m2[0] = 2 * m1[0] - m2[0];\n    m2[1] = 2 * m1[1] - m2[1];\n    if (recursive) {\n        return [m2, m3, m4].concat(params);\n    }\n    else {\n        params = [m2, m3, m4].concat(params);\n        const curves = [];\n        for (let i = 0; i < params.length; i += 3) {\n            const r1 = rotate(params[i][0], params[i][1], angleRad);\n            const r2 = rotate(params[i + 1][0], params[i + 1][1], angleRad);\n            const r3 = rotate(params[i + 2][0], params[i + 2][1], angleRad);\n            curves.push([r1[0], r1[1], r2[0], r2[1], r3[0], r3[1]]);\n        }\n        return curves;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}