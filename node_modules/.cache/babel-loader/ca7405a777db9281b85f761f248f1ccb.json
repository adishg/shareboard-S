{"ast":null,"code":"export function rotatePoints(points, center, degrees) {\n  if (points && points.length) {\n    const [cx, cy] = center;\n    const angle = Math.PI / 180 * degrees;\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    points.forEach(p => {\n      const [x, y] = p;\n      p[0] = (x - cx) * cos - (y - cy) * sin + cx;\n      p[1] = (x - cx) * sin + (y - cy) * cos + cy;\n    });\n  }\n}\nexport function rotateLines(lines, center, degrees) {\n  const points = [];\n  lines.forEach(line => points.push(...line));\n  rotatePoints(points, center, degrees);\n}\nexport function lineLength(line) {\n  const p1 = line[0];\n  const p2 = line[1];\n  return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\nexport function lineIntersection(a, b, c, d) {\n  const a1 = b[1] - a[1];\n  const b1 = a[0] - b[0];\n  const c1 = a1 * a[0] + b1 * a[1];\n  const a2 = d[1] - c[1];\n  const b2 = c[0] - d[0];\n  const c2 = a2 * c[0] + b2 * c[1];\n  const determinant = a1 * b2 - a2 * b1;\n  return determinant ? [(b2 * c1 - b1 * c2) / determinant, (a1 * c2 - a2 * c1) / determinant] : null;\n}\nexport function isPointInPolygon(points, x, y) {\n  const vertices = points.length; // There must be at least 3 vertices in polygon\n\n  if (vertices < 3) {\n    return false;\n  }\n\n  const extreme = [Number.MAX_SAFE_INTEGER, y];\n  const p = [x, y];\n  let count = 0;\n\n  for (let i = 0; i < vertices; i++) {\n    const current = points[i];\n    const next = points[(i + 1) % vertices];\n\n    if (doIntersect(current, next, p, extreme)) {\n      if (orientation(current, p, next) === 0) {\n        return onSegment(current, p, next);\n      }\n\n      count++;\n    }\n  } // true if count is off\n\n\n  return count % 2 === 1;\n} // Check if q lies on the line segment pr\n\nfunction onSegment(p, q, r) {\n  return q[0] <= Math.max(p[0], r[0]) && q[0] >= Math.min(p[0], r[0]) && q[1] <= Math.max(p[1], r[1]) && q[1] >= Math.min(p[1], r[1]);\n} // For the ordered points p, q, r, return\n// 0 if p, q, r are collinear\n// 1 if Clockwise\n// 2 if counterclickwise\n\n\nfunction orientation(p, q, r) {\n  const val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n\n  if (val === 0) {\n    return 0;\n  }\n\n  return val > 0 ? 1 : 2;\n} // Check is p1q1 intersects with p2q2\n\n\nexport function doIntersect(p1, q1, p2, q2) {\n  const o1 = orientation(p1, q1, p2);\n  const o2 = orientation(p1, q1, q2);\n  const o3 = orientation(p2, q2, p1);\n  const o4 = orientation(p2, q2, q1);\n\n  if (o1 !== o2 && o3 !== o4) {\n    return true;\n  } // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) {\n    return true;\n  } // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n\n\n  if (o2 === 0 && onSegment(p1, q2, q1)) {\n    return true;\n  } // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n\n\n  if (o3 === 0 && onSegment(p2, p1, q2)) {\n    return true;\n  } // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n\n\n  if (o4 === 0 && onSegment(p2, q1, q2)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/roughjs/bin/geometry.js"],"names":["rotatePoints","points","center","degrees","length","cx","cy","angle","Math","PI","cos","sin","forEach","p","x","y","rotateLines","lines","line","push","lineLength","p1","p2","sqrt","pow","lineIntersection","a","b","c","d","a1","b1","c1","a2","b2","c2","determinant","isPointInPolygon","vertices","extreme","Number","MAX_SAFE_INTEGER","count","i","current","next","doIntersect","orientation","onSegment","q","r","max","min","val","q1","q2","o1","o2","o3","o4"],"mappings":"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","sourcesContent":["export function rotatePoints(points, center, degrees) {\n    if (points && points.length) {\n        const [cx, cy] = center;\n        const angle = (Math.PI / 180) * degrees;\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n        points.forEach((p) => {\n            const [x, y] = p;\n            p[0] = ((x - cx) * cos) - ((y - cy) * sin) + cx;\n            p[1] = ((x - cx) * sin) + ((y - cy) * cos) + cy;\n        });\n    }\n}\nexport function rotateLines(lines, center, degrees) {\n    const points = [];\n    lines.forEach((line) => points.push(...line));\n    rotatePoints(points, center, degrees);\n}\nexport function lineLength(line) {\n    const p1 = line[0];\n    const p2 = line[1];\n    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) + Math.pow(p1[1] - p2[1], 2));\n}\nexport function lineIntersection(a, b, c, d) {\n    const a1 = b[1] - a[1];\n    const b1 = a[0] - b[0];\n    const c1 = a1 * (a[0]) + b1 * (a[1]);\n    const a2 = d[1] - c[1];\n    const b2 = c[0] - d[0];\n    const c2 = a2 * (c[0]) + b2 * (c[1]);\n    const determinant = a1 * b2 - a2 * b1;\n    return determinant ? [(b2 * c1 - b1 * c2) / determinant, (a1 * c2 - a2 * c1) / determinant] : null;\n}\nexport function isPointInPolygon(points, x, y) {\n    const vertices = points.length;\n    // There must be at least 3 vertices in polygon\n    if (vertices < 3) {\n        return false;\n    }\n    const extreme = [Number.MAX_SAFE_INTEGER, y];\n    const p = [x, y];\n    let count = 0;\n    for (let i = 0; i < vertices; i++) {\n        const current = points[i];\n        const next = points[(i + 1) % vertices];\n        if (doIntersect(current, next, p, extreme)) {\n            if (orientation(current, p, next) === 0) {\n                return onSegment(current, p, next);\n            }\n            count++;\n        }\n    }\n    // true if count is off\n    return count % 2 === 1;\n}\n// Check if q lies on the line segment pr\nfunction onSegment(p, q, r) {\n    return (q[0] <= Math.max(p[0], r[0]) &&\n        q[0] >= Math.min(p[0], r[0]) &&\n        q[1] <= Math.max(p[1], r[1]) &&\n        q[1] >= Math.min(p[1], r[1]));\n}\n// For the ordered points p, q, r, return\n// 0 if p, q, r are collinear\n// 1 if Clockwise\n// 2 if counterclickwise\nfunction orientation(p, q, r) {\n    const val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n    if (val === 0) {\n        return 0;\n    }\n    return val > 0 ? 1 : 2;\n}\n// Check is p1q1 intersects with p2q2\nexport function doIntersect(p1, q1, p2, q2) {\n    const o1 = orientation(p1, q1, p2);\n    const o2 = orientation(p1, q1, q2);\n    const o3 = orientation(p2, q2, p1);\n    const o4 = orientation(p2, q2, q1);\n    if (o1 !== o2 && o3 !== o4) {\n        return true;\n    }\n    // p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    if (o1 === 0 && onSegment(p1, p2, q1)) {\n        return true;\n    }\n    // p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) {\n        return true;\n    }\n    // p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    if (o3 === 0 && onSegment(p2, p1, q2)) {\n        return true;\n    }\n    // p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) {\n        return true;\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}