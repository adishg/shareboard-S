{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionDistribute.tsx\";\nimport React from \"react\";\nimport { DistributeHorizontallyIcon, DistributeVerticallyIcon } from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { distributeElements } from \"../disitrubte\";\nimport { getElementMap, getNonDeletedElements } from \"../element\";\nimport { t } from \"../i18n\";\nimport { CODES } from \"../keys\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (elements, appState) => getSelectedElements(getNonDeletedElements(elements), appState).length > 1;\n\nconst distributeSelectedElements = (elements, appState, distribution) => {\n  const selectedElements = getSelectedElements(getNonDeletedElements(elements), appState);\n  const updatedElements = distributeElements(selectedElements, distribution);\n  const updatedElementsMap = getElementMap(updatedElements);\n  return elements.map(element => updatedElementsMap[element.id] || element);\n};\n\nexport const distributeHorizontally = register({\n  name: \"distributeHorizontally\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, {\n        space: \"between\",\n        axis: \"x\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.altKey && event.code === CODES.H,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(DistributeHorizontallyIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.distributeHorizontally\")} — ${getShortcutKey(\"Alt+H\")}`,\n    \"aria-label\": t(\"labels.distributeHorizontally\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this)\n});\nexport const distributeVertically = register({\n  name: \"distributeVertically\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, {\n        space: \"between\",\n        axis: \"y\"\n      }),\n      commitToHistory: true\n    };\n  },\n  keyTest: event => event.altKey && event.code === CODES.V,\n  PanelComponent: ({\n    elements,\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ToolButton, {\n    hidden: !enableActionGroup(elements, appState),\n    type: \"button\",\n    icon: /*#__PURE__*/_jsxDEV(DistributeVerticallyIcon, {\n      appearance: appState.appearance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this),\n    onClick: () => updateData(null),\n    title: `${t(\"labels.distributeVertically\")} — ${getShortcutKey(\"Alt+V\")}`,\n    \"aria-label\": t(\"labels.distributeVertically\"),\n    visible: isSomeElementSelected(getNonDeletedElements(elements), appState)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this)\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionDistribute.tsx"],"names":["React","DistributeHorizontallyIcon","DistributeVerticallyIcon","ToolButton","distributeElements","getElementMap","getNonDeletedElements","t","CODES","getSelectedElements","isSomeElementSelected","getShortcutKey","register","enableActionGroup","elements","appState","length","distributeSelectedElements","distribution","selectedElements","updatedElements","updatedElementsMap","map","element","id","distributeHorizontally","name","perform","space","axis","commitToHistory","keyTest","event","altKey","code","H","PanelComponent","updateData","appearance","distributeVertically","V"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  DistributeHorizontallyIcon,\n  DistributeVerticallyIcon,\n} from \"../components/icons\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport { distributeElements, Distribution } from \"../disitrubte\";\nimport { getElementMap, getNonDeletedElements } from \"../element\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { t } from \"../i18n\";\nimport { CODES } from \"../keys\";\nimport { getSelectedElements, isSomeElementSelected } from \"../scene\";\nimport { AppState } from \"../types\";\nimport { getShortcutKey } from \"../utils\";\nimport { register } from \"./register\";\n\nconst enableActionGroup = (\n  elements: readonly ExcalidrawElement[],\n  appState: AppState,\n) => getSelectedElements(getNonDeletedElements(elements), appState).length > 1;\n\nconst distributeSelectedElements = (\n  elements: readonly ExcalidrawElement[],\n  appState: Readonly<AppState>,\n  distribution: Distribution,\n) => {\n  const selectedElements = getSelectedElements(\n    getNonDeletedElements(elements),\n    appState,\n  );\n\n  const updatedElements = distributeElements(selectedElements, distribution);\n\n  const updatedElementsMap = getElementMap(updatedElements);\n\n  return elements.map((element) => updatedElementsMap[element.id] || element);\n};\n\nexport const distributeHorizontally = register({\n  name: \"distributeHorizontally\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, {\n        space: \"between\",\n        axis: \"x\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) => event.altKey && event.code === CODES.H,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<DistributeHorizontallyIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeHorizontally\")} — ${getShortcutKey(\n        \"Alt+H\",\n      )}`}\n      aria-label={t(\"labels.distributeHorizontally\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n\nexport const distributeVertically = register({\n  name: \"distributeVertically\",\n  perform: (elements, appState) => {\n    return {\n      appState,\n      elements: distributeSelectedElements(elements, appState, {\n        space: \"between\",\n        axis: \"y\",\n      }),\n      commitToHistory: true,\n    };\n  },\n  keyTest: (event) => event.altKey && event.code === CODES.V,\n  PanelComponent: ({ elements, appState, updateData }) => (\n    <ToolButton\n      hidden={!enableActionGroup(elements, appState)}\n      type=\"button\"\n      icon={<DistributeVerticallyIcon appearance={appState.appearance} />}\n      onClick={() => updateData(null)}\n      title={`${t(\"labels.distributeVertically\")} — ${getShortcutKey(\"Alt+V\")}`}\n      aria-label={t(\"labels.distributeVertically\")}\n      visible={isSomeElementSelected(getNonDeletedElements(elements), appState)}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}