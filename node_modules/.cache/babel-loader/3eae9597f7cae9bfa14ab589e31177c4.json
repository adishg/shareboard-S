{"ast":null,"code":"import { getCommonBounds } from \"../element\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nexport const getScrollBars = (elements, viewportWidth, viewportHeight, {\n  scrollX,\n  scrollY,\n  zoom\n}) => {\n  if (elements.length === 0) {\n    return {\n      horizontal: null,\n      vertical: null\n    };\n  } // This is the bounding box of all the elements\n\n\n  const [elementsMinX, elementsMinY, elementsMaxX, elementsMaxY] = getCommonBounds(elements); // Apply zoom\n\n  const viewportWidthWithZoom = viewportWidth / zoom.value;\n  const viewportHeightWithZoom = viewportHeight / zoom.value;\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\"))\n  };\n  const isRTL = getLanguage().rtl; // The viewport is the rectangle currently visible for the user\n\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom; // The scene is the bounding box of both the elements and viewport\n\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY); // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal: viewportMinX === sceneMinX && viewportMaxX === sceneMaxX ? null : {\n      x: Math.max(safeArea.left, SCROLLBAR_MARGIN) + (viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX) * viewportWidth,\n      y: viewportHeight - SCROLLBAR_WIDTH - Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n      width: (viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX) * viewportWidth - Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n      height: SCROLLBAR_WIDTH\n    },\n    vertical: viewportMinY === sceneMinY && viewportMaxY === sceneMaxY ? null : {\n      x: isRTL ? Math.max(safeArea.left, SCROLLBAR_MARGIN) : viewportWidth - SCROLLBAR_WIDTH - Math.max(safeArea.right, SCROLLBAR_MARGIN),\n      y: (viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY) * viewportHeight + Math.max(safeArea.top, SCROLLBAR_MARGIN),\n      width: SCROLLBAR_WIDTH,\n      height: (viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY) * viewportHeight - Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom)\n    }\n  };\n};\nexport const isOverScrollBars = (scrollBars, x, y) => {\n  const [isOverHorizontal, isOverVertical] = [scrollBars.horizontal, scrollBars.vertical].map(scrollBar => {\n    return scrollBar != null && scrollBar.x <= x && x <= scrollBar.x + scrollBar.width && scrollBar.y <= y && y <= scrollBar.y + scrollBar.height;\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return {\n    isOverEither,\n    isOverHorizontal,\n    isOverVertical\n  };\n};","map":{"version":3,"sources":["/var/www/html/excalidraw/src/scene/scrollbars.ts"],"names":["getCommonBounds","getGlobalCSSVariable","getLanguage","SCROLLBAR_MARGIN","SCROLLBAR_WIDTH","SCROLLBAR_COLOR","getScrollBars","elements","viewportWidth","viewportHeight","scrollX","scrollY","zoom","length","horizontal","vertical","elementsMinX","elementsMinY","elementsMaxX","elementsMaxY","viewportWidthWithZoom","value","viewportHeightWithZoom","viewportWidthDiff","viewportHeightDiff","safeArea","top","parseInt","bottom","left","right","isRTL","rtl","viewportMinX","viewportMinY","viewportMaxX","viewportMaxY","sceneMinX","Math","min","sceneMinY","sceneMaxX","max","sceneMaxY","x","y","width","height","isOverScrollBars","scrollBars","isOverHorizontal","isOverVertical","map","scrollBar","isOverEither"],"mappings":"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","sourcesContent":["import { ExcalidrawElement } from \"../element/types\";\nimport { getCommonBounds } from \"../element\";\nimport { FlooredNumber, Zoom } from \"../types\";\nimport { ScrollBars } from \"./types\";\nimport { getGlobalCSSVariable } from \"../utils\";\nimport { getLanguage } from \"../i18n\";\n\nexport const SCROLLBAR_MARGIN = 4;\nexport const SCROLLBAR_WIDTH = 6;\nexport const SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\n\nexport const getScrollBars = (\n  elements: readonly ExcalidrawElement[],\n  viewportWidth: number,\n  viewportHeight: number,\n  {\n    scrollX,\n    scrollY,\n    zoom,\n  }: {\n    scrollX: FlooredNumber;\n    scrollY: FlooredNumber;\n    zoom: Zoom;\n  },\n): ScrollBars => {\n  if (elements.length === 0) {\n    return {\n      horizontal: null,\n      vertical: null,\n    };\n  }\n  // This is the bounding box of all the elements\n  const [\n    elementsMinX,\n    elementsMinY,\n    elementsMaxX,\n    elementsMaxY,\n  ] = getCommonBounds(elements);\n\n  // Apply zoom\n  const viewportWidthWithZoom = viewportWidth / zoom.value;\n  const viewportHeightWithZoom = viewportHeight / zoom.value;\n\n  const viewportWidthDiff = viewportWidth - viewportWidthWithZoom;\n  const viewportHeightDiff = viewportHeight - viewportHeightWithZoom;\n\n  const safeArea = {\n    top: parseInt(getGlobalCSSVariable(\"sat\")),\n    bottom: parseInt(getGlobalCSSVariable(\"sab\")),\n    left: parseInt(getGlobalCSSVariable(\"sal\")),\n    right: parseInt(getGlobalCSSVariable(\"sar\")),\n  };\n\n  const isRTL = getLanguage().rtl;\n\n  // The viewport is the rectangle currently visible for the user\n  const viewportMinX = -scrollX + viewportWidthDiff / 2 + safeArea.left;\n  const viewportMinY = -scrollY + viewportHeightDiff / 2 + safeArea.top;\n  const viewportMaxX = viewportMinX + viewportWidthWithZoom - safeArea.right;\n  const viewportMaxY = viewportMinY + viewportHeightWithZoom - safeArea.bottom;\n\n  // The scene is the bounding box of both the elements and viewport\n  const sceneMinX = Math.min(elementsMinX, viewportMinX);\n  const sceneMinY = Math.min(elementsMinY, viewportMinY);\n  const sceneMaxX = Math.max(elementsMaxX, viewportMaxX);\n  const sceneMaxY = Math.max(elementsMaxY, viewportMaxY);\n\n  // The scrollbar represents where the viewport is in relationship to the scene\n\n  return {\n    horizontal:\n      viewportMinX === sceneMinX && viewportMaxX === sceneMaxX\n        ? null\n        : {\n            x:\n              Math.max(safeArea.left, SCROLLBAR_MARGIN) +\n              ((viewportMinX - sceneMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth,\n            y:\n              viewportHeight -\n              SCROLLBAR_WIDTH -\n              Math.max(SCROLLBAR_MARGIN, safeArea.bottom),\n            width:\n              ((viewportMaxX - viewportMinX) / (sceneMaxX - sceneMinX)) *\n                viewportWidth -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.left + safeArea.right),\n            height: SCROLLBAR_WIDTH,\n          },\n    vertical:\n      viewportMinY === sceneMinY && viewportMaxY === sceneMaxY\n        ? null\n        : {\n            x: isRTL\n              ? Math.max(safeArea.left, SCROLLBAR_MARGIN)\n              : viewportWidth -\n                SCROLLBAR_WIDTH -\n                Math.max(safeArea.right, SCROLLBAR_MARGIN),\n            y:\n              ((viewportMinY - sceneMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight +\n              Math.max(safeArea.top, SCROLLBAR_MARGIN),\n            width: SCROLLBAR_WIDTH,\n            height:\n              ((viewportMaxY - viewportMinY) / (sceneMaxY - sceneMinY)) *\n                viewportHeight -\n              Math.max(SCROLLBAR_MARGIN * 2, safeArea.top + safeArea.bottom),\n          },\n  };\n};\n\nexport const isOverScrollBars = (\n  scrollBars: ScrollBars,\n  x: number,\n  y: number,\n): {\n  isOverEither: boolean;\n  isOverHorizontal: boolean;\n  isOverVertical: boolean;\n} => {\n  const [isOverHorizontal, isOverVertical] = [\n    scrollBars.horizontal,\n    scrollBars.vertical,\n  ].map((scrollBar) => {\n    return (\n      scrollBar != null &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n    );\n  });\n  const isOverEither = isOverHorizontal || isOverVertical;\n  return { isOverEither, isOverHorizontal, isOverVertical };\n};\n"]},"metadata":{},"sourceType":"module"}