{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/components/HintViewer.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nimport { getSelectedElements } from \"../scene\";\nimport \"./HintViewer.scss\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { getShortcutKey } from \"../utils\";\n\nconst getHints = ({\n  appState,\n  elements\n}) => {\n  const {\n    elementType,\n    isResizing,\n    isRotating,\n    lastPointerDownWith\n  } = appState;\n  const multiMode = appState.multiElement !== null;\n\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n\n    return t(\"hints.linearElementMulti\");\n  }\n\n  if (elementType === \"draw\") {\n    return t(\"hints.freeDraw\");\n  }\n\n  if (elementType === \"text\") {\n    return t(\"hints.text\");\n  }\n\n  const selectedElements = getSelectedElements(elements, appState);\n\n  if (isResizing && lastPointerDownWith === \"mouse\" && selectedElements.length === 1) {\n    const targetElement = selectedElements[0];\n\n    if (isLinearElement(targetElement) && targetElement.points.length === 2) {\n      return t(\"hints.lockAngle\");\n    }\n\n    return t(\"hints.resize\");\n  }\n\n  if (isRotating && lastPointerDownWith === \"mouse\") {\n    return t(\"hints.rotate\");\n  }\n\n  if (selectedElements.length === 1 && isLinearElement(selectedElements[0])) {\n    if (appState.editingLinearElement) {\n      return appState.editingLinearElement.activePointIndex ? t(\"hints.lineEditor_pointSelected\") : t(\"hints.lineEditor_nothingSelected\");\n    }\n\n    return t(\"hints.lineEditor_info\");\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({\n  appState,\n  elements\n}) => {\n  let hint = getHints({\n    appState,\n    elements\n  });\n\n  if (!hint) {\n    return null;\n  }\n\n  hint = getShortcutKey(hint);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"HintViewer\",\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      children: hint\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = HintViewer;\n\nvar _c;\n\n$RefreshReg$(_c, \"HintViewer\");","map":{"version":3,"sources":["/var/www/html/excalidraw/src/components/HintViewer.tsx"],"names":["React","t","getSelectedElements","isLinearElement","getShortcutKey","getHints","appState","elements","elementType","isResizing","isRotating","lastPointerDownWith","multiMode","multiElement","selectedElements","length","targetElement","points","editingLinearElement","activePointIndex","HintViewer","hint"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,CAAT,QAAkB,SAAlB;AAEA,SAASC,mBAAT,QAAoC,UAApC;AAEA,OAAO,mBAAP;AAEA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,cAAT,QAA+B,UAA/B;;AAOA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAkC;AACjD,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,UAA3B;AAAuCC,IAAAA;AAAvC,MAA+DL,QAArE;AACA,QAAMM,SAAS,GAAGN,QAAQ,CAACO,YAAT,KAA0B,IAA5C;;AACA,MAAIL,WAAW,KAAK,OAAhB,IAA2BA,WAAW,KAAK,MAA/C,EAAuD;AACrD,QAAI,CAACI,SAAL,EAAgB;AACd,aAAOX,CAAC,CAAC,qBAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,0BAAD,CAAR;AACD;;AAED,MAAIO,WAAW,KAAK,MAApB,EAA4B;AAC1B,WAAOP,CAAC,CAAC,gBAAD,CAAR;AACD;;AAED,MAAIO,WAAW,KAAK,MAApB,EAA4B;AAC1B,WAAOP,CAAC,CAAC,YAAD,CAAR;AACD;;AAED,QAAMa,gBAAgB,GAAGZ,mBAAmB,CAACK,QAAD,EAAWD,QAAX,CAA5C;;AACA,MACEG,UAAU,IACVE,mBAAmB,KAAK,OADxB,IAEAG,gBAAgB,CAACC,MAAjB,KAA4B,CAH9B,EAIE;AACA,UAAMC,aAAa,GAAGF,gBAAgB,CAAC,CAAD,CAAtC;;AACA,QAAIX,eAAe,CAACa,aAAD,CAAf,IAAkCA,aAAa,CAACC,MAAd,CAAqBF,MAArB,KAAgC,CAAtE,EAAyE;AACvE,aAAOd,CAAC,CAAC,iBAAD,CAAR;AACD;;AACD,WAAOA,CAAC,CAAC,cAAD,CAAR;AACD;;AAED,MAAIS,UAAU,IAAIC,mBAAmB,KAAK,OAA1C,EAAmD;AACjD,WAAOV,CAAC,CAAC,cAAD,CAAR;AACD;;AAED,MAAIa,gBAAgB,CAACC,MAAjB,KAA4B,CAA5B,IAAiCZ,eAAe,CAACW,gBAAgB,CAAC,CAAD,CAAjB,CAApD,EAA2E;AACzE,QAAIR,QAAQ,CAACY,oBAAb,EAAmC;AACjC,aAAOZ,QAAQ,CAACY,oBAAT,CAA8BC,gBAA9B,GACHlB,CAAC,CAAC,gCAAD,CADE,GAEHA,CAAC,CAAC,kCAAD,CAFL;AAGD;;AACD,WAAOA,CAAC,CAAC,uBAAD,CAAR;AACD;;AAED,SAAO,IAAP;AACD,CA7CD;;AA+CA,OAAO,MAAMmB,UAAU,GAAG,CAAC;AAAEd,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAAkC;AAC1D,MAAIc,IAAI,GAAGhB,QAAQ,CAAC;AAClBC,IAAAA,QADkB;AAElBC,IAAAA;AAFkB,GAAD,CAAnB;;AAIA,MAAI,CAACc,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAEDA,EAAAA,IAAI,GAAGjB,cAAc,CAACiB,IAAD,CAArB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhBM;KAAMD,U","sourcesContent":["import React from \"react\";\nimport { t } from \"../i18n\";\nimport { NonDeletedExcalidrawElement } from \"../element/types\";\nimport { getSelectedElements } from \"../scene\";\n\nimport \"./HintViewer.scss\";\nimport { AppState } from \"../types\";\nimport { isLinearElement } from \"../element/typeChecks\";\nimport { getShortcutKey } from \"../utils\";\n\ninterface Hint {\n  appState: AppState;\n  elements: readonly NonDeletedExcalidrawElement[];\n}\n\nconst getHints = ({ appState, elements }: Hint) => {\n  const { elementType, isResizing, isRotating, lastPointerDownWith } = appState;\n  const multiMode = appState.multiElement !== null;\n  if (elementType === \"arrow\" || elementType === \"line\") {\n    if (!multiMode) {\n      return t(\"hints.linearElement\");\n    }\n    return t(\"hints.linearElementMulti\");\n  }\n\n  if (elementType === \"draw\") {\n    return t(\"hints.freeDraw\");\n  }\n\n  if (elementType === \"text\") {\n    return t(\"hints.text\");\n  }\n\n  const selectedElements = getSelectedElements(elements, appState);\n  if (\n    isResizing &&\n    lastPointerDownWith === \"mouse\" &&\n    selectedElements.length === 1\n  ) {\n    const targetElement = selectedElements[0];\n    if (isLinearElement(targetElement) && targetElement.points.length === 2) {\n      return t(\"hints.lockAngle\");\n    }\n    return t(\"hints.resize\");\n  }\n\n  if (isRotating && lastPointerDownWith === \"mouse\") {\n    return t(\"hints.rotate\");\n  }\n\n  if (selectedElements.length === 1 && isLinearElement(selectedElements[0])) {\n    if (appState.editingLinearElement) {\n      return appState.editingLinearElement.activePointIndex\n        ? t(\"hints.lineEditor_pointSelected\")\n        : t(\"hints.lineEditor_nothingSelected\");\n    }\n    return t(\"hints.lineEditor_info\");\n  }\n\n  return null;\n};\n\nexport const HintViewer = ({ appState, elements }: Hint) => {\n  let hint = getHints({\n    appState,\n    elements,\n  });\n  if (!hint) {\n    return null;\n  }\n\n  hint = getShortcutKey(hint);\n\n  return (\n    <div className=\"HintViewer\">\n      <span>{hint}</span>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}