{"ast":null,"code":"import * as GA from \"./ga\";\n\n/**\n * A direction is stored as an array `[0, 0, 0, 0, y, x, 0, 0]` representing\n * vector `(x, y)`.\n */\nexport const from = point => [0, 0, 0, 0, point[4], point[5], 0, 0];\nexport const fromTo = (from, to) => GA.inormalized([0, 0, 0, 0, to[4] - from[4], to[5] - from[5], 0, 0]);\nexport const orthogonal = direction => GA.inormalized([0, 0, 0, 0, -direction[5], direction[4], 0, 0]);\nexport const orthogonalToLine = line => GA.mul(line, GA.I);","map":{"version":3,"sources":["/var/www/html/excalidraw/src/gadirections.ts"],"names":["GA","from","point","fromTo","to","inormalized","orthogonal","direction","orthogonalToLine","line","mul","I"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,MAApB;;AAGA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAyB,CAC3C,CAD2C,EAE3C,CAF2C,EAG3C,CAH2C,EAI3C,CAJ2C,EAK3CA,KAAK,CAAC,CAAD,CALsC,EAM3CA,KAAK,CAAC,CAAD,CANsC,EAO3C,CAP2C,EAQ3C,CAR2C,CAAtC;AAWP,OAAO,MAAMC,MAAM,GAAG,CAACF,IAAD,EAAcG,EAAd,KACpBJ,EAAE,CAACK,WAAH,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaD,EAAE,CAAC,CAAD,CAAF,GAAQH,IAAI,CAAC,CAAD,CAAzB,EAA8BG,EAAE,CAAC,CAAD,CAAF,GAAQH,IAAI,CAAC,CAAD,CAA1C,EAA+C,CAA/C,EAAkD,CAAlD,CAAf,CADK;AAGP,OAAO,MAAMK,UAAU,GAAIC,SAAD,IACxBP,EAAE,CAACK,WAAH,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAACE,SAAS,CAAC,CAAD,CAAvB,EAA4BA,SAAS,CAAC,CAAD,CAArC,EAA0C,CAA1C,EAA6C,CAA7C,CAAf,CADK;AAGP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAA2BT,EAAE,CAACU,GAAH,CAAOD,IAAP,EAAaT,EAAE,CAACW,CAAhB,CAApD","sourcesContent":["import * as GA from \"./ga\";\nimport { Line, Direction, Point } from \"./ga\";\n\n/**\n * A direction is stored as an array `[0, 0, 0, 0, y, x, 0, 0]` representing\n * vector `(x, y)`.\n */\n\nexport const from = (point: Point): Point => [\n  0,\n  0,\n  0,\n  0,\n  point[4],\n  point[5],\n  0,\n  0,\n];\n\nexport const fromTo = (from: Point, to: Point): Direction =>\n  GA.inormalized([0, 0, 0, 0, to[4] - from[4], to[5] - from[5], 0, 0]);\n\nexport const orthogonal = (direction: Direction): Direction =>\n  GA.inormalized([0, 0, 0, 0, -direction[5], direction[4], 0, 0]);\n\nexport const orthogonalToLine = (line: Line): Direction => GA.mul(line, GA.I);\n"]},"metadata":{},"sourceType":"module"}