{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/actionExport.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { load, questionCircle, save, saveAs } from \"../components/icons\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport \"../components/ToolIcon.scss\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { loadFromJSON, saveAsJSON } from \"../data\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: (_elements, appState, value) => {\n    trackEvent(\"change\", \"title\");\n    return {\n      appState: { ...appState,\n        name: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(ProjectName, {\n    label: t(\"labels.fileTitle\"),\n    value: appState.name || \"Unnamed\",\n    onChange: name => updateData(name)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState,\n        exportBackground: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: appState.exportBackground,\n      onChange: event => updateData(event.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), \" \", t(\"labels.withBackground\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeExportEmbedScene = register({\n  name: \"changeExportEmbedScene\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState,\n        exportEmbedScene: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"label\", {\n    style: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: appState.exportEmbedScene,\n      onChange: event => updateData(event.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), \" \", t(\"labels.exportEmbedScene\"), /*#__PURE__*/_jsxDEV(Tooltip, {\n      label: t(\"labels.exportEmbedScene_details\"),\n      position: \"above\",\n      long: true,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TooltipIcon\",\n        children: questionCircle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this)\n});\nexport const actionChangeShouldAddWatermark = register({\n  name: \"changeShouldAddWatermark\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState,\n        shouldAddWatermark: value\n      },\n      commitToHistory: false\n    };\n  },\n  PanelComponent: ({\n    appState,\n    updateData\n  }) => /*#__PURE__*/_jsxDEV(\"label\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: appState.shouldAddWatermark,\n      onChange: event => updateData(event.target.checked)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), \" \", t(\"labels.addWatermark\")]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this)\n});\nexport const actionSaveScene = register({\n  name: \"saveScene\",\n  perform: async (elements, appState, value) => {\n    try {\n      const {\n        fileHandle\n      } = await saveAsJSON(elements, appState);\n      return {\n        commitToHistory: false,\n        appState: { ...appState,\n          fileHandle\n        }\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) !== \"AbortError\") {\n        console.error(error);\n      }\n\n      return {\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey,\n  PanelComponent: _s(({\n    updateData\n  }) => {\n    _s();\n\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      icon: save,\n      title: t(\"buttons.save\"),\n      \"aria-label\": t(\"buttons.save\"),\n      showAriaLabel: useIsMobile(),\n      onClick: () => updateData(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }, this);\n  }, \"qUMUJPzUyTVgJ1cPs1E3FafaiuA=\", false, function () {\n    return [useIsMobile];\n  })\n});\nexport const actionSaveAsScene = register({\n  name: \"saveAsScene\",\n  perform: async (elements, appState, value) => {\n    try {\n      const {\n        fileHandle\n      } = await saveAsJSON(elements, { ...appState,\n        fileHandle: null\n      });\n      return {\n        commitToHistory: false,\n        appState: { ...appState,\n          fileHandle\n        }\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) !== \"AbortError\") {\n        console.error(error);\n      }\n\n      return {\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],\n  PanelComponent: _s2(({\n    updateData\n  }) => {\n    _s2();\n\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      icon: saveAs,\n      title: t(\"buttons.saveAs\"),\n      \"aria-label\": t(\"buttons.saveAs\"),\n      showAriaLabel: useIsMobile(),\n      hidden: !(\"chooseFileSystemEntries\" in window || \"showOpenFilePicker\" in window),\n      onClick: () => updateData(null)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this);\n  }, \"qUMUJPzUyTVgJ1cPs1E3FafaiuA=\", false, function () {\n    return [useIsMobile];\n  })\n});\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  perform: async (elements, appState) => {\n    try {\n      const {\n        elements: loadedElements,\n        appState: loadedAppState\n      } = await loadFromJSON(appState);\n      return {\n        elements: loadedElements,\n        appState: loadedAppState,\n        commitToHistory: true\n      };\n    } catch (error) {\n      if ((error === null || error === void 0 ? void 0 : error.name) === \"AbortError\") {\n        return false;\n      }\n\n      return {\n        elements,\n        appState: { ...appState,\n          errorMessage: error.message\n        },\n        commitToHistory: false\n      };\n    }\n  },\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O,\n  PanelComponent: _s3(({\n    updateData,\n    appState\n  }) => {\n    _s3();\n\n    return /*#__PURE__*/_jsxDEV(ToolButton, {\n      type: \"button\",\n      icon: load,\n      title: t(\"buttons.load\"),\n      \"aria-label\": t(\"buttons.load\"),\n      showAriaLabel: useIsMobile(),\n      onClick: updateData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }, this);\n  }, \"qUMUJPzUyTVgJ1cPs1E3FafaiuA=\", false, function () {\n    return [useIsMobile];\n  })\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionExport.tsx"],"names":["React","trackEvent","load","questionCircle","save","saveAs","ProjectName","ToolButton","Tooltip","loadFromJSON","saveAsJSON","t","useIsMobile","KEYS","register","actionChangeProjectName","name","perform","_elements","appState","value","commitToHistory","PanelComponent","updateData","actionChangeExportBackground","exportBackground","event","target","checked","actionChangeExportEmbedScene","exportEmbedScene","display","actionChangeShouldAddWatermark","shouldAddWatermark","actionSaveScene","elements","fileHandle","error","console","keyTest","key","S","CTRL_OR_CMD","shiftKey","actionSaveAsScene","window","actionLoadScene","loadedElements","loadedAppState","errorMessage","message","O"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { trackEvent } from \"../analytics\";\nimport { load, questionCircle, save, saveAs } from \"../components/icons\";\nimport { ProjectName } from \"../components/ProjectName\";\nimport { ToolButton } from \"../components/ToolButton\";\nimport \"../components/ToolIcon.scss\";\nimport { Tooltip } from \"../components/Tooltip\";\nimport { loadFromJSON, saveAsJSON } from \"../data\";\nimport { t } from \"../i18n\";\nimport useIsMobile from \"../is-mobile\";\nimport { KEYS } from \"../keys\";\nimport { register } from \"./register\";\n\nexport const actionChangeProjectName = register({\n  name: \"changeProjectName\",\n  perform: (_elements, appState, value) => {\n    trackEvent(\"change\", \"title\");\n    return { appState: { ...appState, name: value }, commitToHistory: false };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <ProjectName\n      label={t(\"labels.fileTitle\")}\n      value={appState.name || \"Unnamed\"}\n      onChange={(name: string) => updateData(name)}\n    />\n  ),\n});\n\nexport const actionChangeExportBackground = register({\n  name: \"changeExportBackground\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportBackground: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportBackground}\n        onChange={(event) => updateData(event.target.checked)}\n      />{\" \"}\n      {t(\"labels.withBackground\")}\n    </label>\n  ),\n});\n\nexport const actionChangeExportEmbedScene = register({\n  name: \"changeExportEmbedScene\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, exportEmbedScene: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label style={{ display: \"flex\" }}>\n      <input\n        type=\"checkbox\"\n        checked={appState.exportEmbedScene}\n        onChange={(event) => updateData(event.target.checked)}\n      />{\" \"}\n      {t(\"labels.exportEmbedScene\")}\n      <Tooltip\n        label={t(\"labels.exportEmbedScene_details\")}\n        position=\"above\"\n        long={true}\n      >\n        <div className=\"TooltipIcon\">{questionCircle}</div>\n      </Tooltip>\n    </label>\n  ),\n});\n\nexport const actionChangeShouldAddWatermark = register({\n  name: \"changeShouldAddWatermark\",\n  perform: (_elements, appState, value) => {\n    return {\n      appState: { ...appState, shouldAddWatermark: value },\n      commitToHistory: false,\n    };\n  },\n  PanelComponent: ({ appState, updateData }) => (\n    <label>\n      <input\n        type=\"checkbox\"\n        checked={appState.shouldAddWatermark}\n        onChange={(event) => updateData(event.target.checked)}\n      />{\" \"}\n      {t(\"labels.addWatermark\")}\n    </label>\n  ),\n});\n\nexport const actionSaveScene = register({\n  name: \"saveScene\",\n  perform: async (elements, appState, value) => {\n    try {\n      const { fileHandle } = await saveAsJSON(elements, appState);\n      return { commitToHistory: false, appState: { ...appState, fileHandle } };\n    } catch (error) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      }\n      return { commitToHistory: false };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event[KEYS.CTRL_OR_CMD] && !event.shiftKey,\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={save}\n      title={t(\"buttons.save\")}\n      aria-label={t(\"buttons.save\")}\n      showAriaLabel={useIsMobile()}\n      onClick={() => updateData(null)}\n    />\n  ),\n});\n\nexport const actionSaveAsScene = register({\n  name: \"saveAsScene\",\n  perform: async (elements, appState, value) => {\n    try {\n      const { fileHandle } = await saveAsJSON(elements, {\n        ...appState,\n        fileHandle: null,\n      });\n      return { commitToHistory: false, appState: { ...appState, fileHandle } };\n    } catch (error) {\n      if (error?.name !== \"AbortError\") {\n        console.error(error);\n      }\n      return { commitToHistory: false };\n    }\n  },\n  keyTest: (event) =>\n    event.key === KEYS.S && event.shiftKey && event[KEYS.CTRL_OR_CMD],\n  PanelComponent: ({ updateData }) => (\n    <ToolButton\n      type=\"button\"\n      icon={saveAs}\n      title={t(\"buttons.saveAs\")}\n      aria-label={t(\"buttons.saveAs\")}\n      showAriaLabel={useIsMobile()}\n      hidden={\n        !(\"chooseFileSystemEntries\" in window || \"showOpenFilePicker\" in window)\n      }\n      onClick={() => updateData(null)}\n    />\n  ),\n});\n\nexport const actionLoadScene = register({\n  name: \"loadScene\",\n  perform: async (elements, appState) => {\n    try {\n      const {\n        elements: loadedElements,\n        appState: loadedAppState,\n      } = await loadFromJSON(appState);\n      return {\n        elements: loadedElements,\n        appState: loadedAppState,\n        commitToHistory: true,\n      };\n    } catch (error) {\n      if (error?.name === \"AbortError\") {\n        return false;\n      }\n      return {\n        elements,\n        appState: { ...appState, errorMessage: error.message },\n        commitToHistory: false,\n      };\n    }\n  },\n  keyTest: (event) => event[KEYS.CTRL_OR_CMD] && event.key === KEYS.O,\n  PanelComponent: ({ updateData, appState }) => (\n    <ToolButton\n      type=\"button\"\n      icon={load}\n      title={t(\"buttons.load\")}\n      aria-label={t(\"buttons.load\")}\n      showAriaLabel={useIsMobile()}\n      onClick={updateData}\n    />\n  ),\n});\n"]},"metadata":{},"sourceType":"module"}