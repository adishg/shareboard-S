{"ast":null,"code":"function clone(p) {\n  return [...p];\n}\n\nexport function curveToBezier(pointsIn, curveTightness = 0) {\n  const len = pointsIn.length;\n\n  if (len < 3) {\n    throw new Error('A curve must have at least three points.');\n  }\n\n  const out = [];\n\n  if (len === 3) {\n    out.push(clone(pointsIn[0]), clone(pointsIn[1]), clone(pointsIn[2]), clone(pointsIn[2]));\n  } else {\n    const points = [];\n    points.push(pointsIn[0], pointsIn[0]);\n\n    for (let i = 1; i < pointsIn.length; i++) {\n      points.push(pointsIn[i]);\n\n      if (i === pointsIn.length - 1) {\n        points.push(pointsIn[i]);\n      }\n    }\n\n    const b = [];\n    const s = 1 - curveTightness;\n    out.push(clone(points[0]));\n\n    for (let i = 1; i + 2 < points.length; i++) {\n      const cachedVertArray = points[i];\n      b[0] = [cachedVertArray[0], cachedVertArray[1]];\n      b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n      b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n      b[3] = [points[i + 1][0], points[i + 1][1]];\n      out.push(b[1], b[2], b[3]);\n    }\n  }\n\n  return out;\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/points-on-curve/lib/curve-to-bezier.js"],"names":["clone","p","curveToBezier","pointsIn","curveTightness","len","length","Error","out","push","points","i","b","s","cachedVertArray"],"mappings":"AAAA,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACd,SAAO,CAAC,GAAGA,CAAJ,CAAP;AACH;;AACD,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiCC,cAAc,GAAG,CAAlD,EAAqD;AACxD,QAAMC,GAAG,GAAGF,QAAQ,CAACG,MAArB;;AACA,MAAID,GAAG,GAAG,CAAV,EAAa;AACT,UAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;AACH;;AACD,QAAMC,GAAG,GAAG,EAAZ;;AACA,MAAIH,GAAG,KAAK,CAAZ,EAAe;AACXG,IAAAA,GAAG,CAACC,IAAJ,CAAST,KAAK,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAd,EAA6BH,KAAK,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAlC,EAAiDH,KAAK,CAACG,QAAQ,CAAC,CAAD,CAAT,CAAtD,EAAqEH,KAAK,CAACG,QAAQ,CAAC,CAAD,CAAT,CAA1E;AACH,GAFD,MAGK;AACD,UAAMO,MAAM,GAAG,EAAf;AACAA,IAAAA,MAAM,CAACD,IAAP,CAAYN,QAAQ,CAAC,CAAD,CAApB,EAAyBA,QAAQ,CAAC,CAAD,CAAjC;;AACA,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,QAAQ,CAACG,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACtCD,MAAAA,MAAM,CAACD,IAAP,CAAYN,QAAQ,CAACQ,CAAD,CAApB;;AACA,UAAIA,CAAC,KAAMR,QAAQ,CAACG,MAAT,GAAkB,CAA7B,EAAiC;AAC7BI,QAAAA,MAAM,CAACD,IAAP,CAAYN,QAAQ,CAACQ,CAAD,CAApB;AACH;AACJ;;AACD,UAAMC,CAAC,GAAG,EAAV;AACA,UAAMC,CAAC,GAAG,IAAIT,cAAd;AACAI,IAAAA,GAAG,CAACC,IAAJ,CAAST,KAAK,CAACU,MAAM,CAAC,CAAD,CAAP,CAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAiBA,CAAC,GAAG,CAAL,GAAUD,MAAM,CAACJ,MAAjC,EAAyCK,CAAC,EAA1C,EAA8C;AAC1C,YAAMG,eAAe,GAAGJ,MAAM,CAACC,CAAD,CAA9B;AACAC,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACE,eAAe,CAAC,CAAD,CAAhB,EAAqBA,eAAe,CAAC,CAAD,CAApC,CAAP;AACAF,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACE,eAAe,CAAC,CAAD,CAAf,GAAqB,CAACD,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAJ,GAAuBE,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA5B,IAAgD,CAAtE,EAAyEG,eAAe,CAAC,CAAD,CAAf,GAAqB,CAACD,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAJ,GAAuBE,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAA5B,IAAgD,CAA9I,CAAP;AACAC,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACF,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,IAAmB,CAACE,CAAC,GAAGH,MAAM,CAACC,CAAD,CAAN,CAAU,CAAV,CAAJ,GAAmBE,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAxB,IAA4C,CAAhE,EAAmED,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,IAAmB,CAACE,CAAC,GAAGH,MAAM,CAACC,CAAD,CAAN,CAAU,CAAV,CAAJ,GAAmBE,CAAC,GAAGH,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAxB,IAA4C,CAAlI,CAAP;AACAC,MAAAA,CAAC,CAAC,CAAD,CAAD,GAAO,CAACF,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAD,EAAmBD,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAnB,CAAP;AACAH,MAAAA,GAAG,CAACC,IAAJ,CAASG,CAAC,CAAC,CAAD,CAAV,EAAeA,CAAC,CAAC,CAAD,CAAhB,EAAqBA,CAAC,CAAC,CAAD,CAAtB;AACH;AACJ;;AACD,SAAOJ,GAAP;AACH","sourcesContent":["function clone(p) {\n    return [...p];\n}\nexport function curveToBezier(pointsIn, curveTightness = 0) {\n    const len = pointsIn.length;\n    if (len < 3) {\n        throw new Error('A curve must have at least three points.');\n    }\n    const out = [];\n    if (len === 3) {\n        out.push(clone(pointsIn[0]), clone(pointsIn[1]), clone(pointsIn[2]), clone(pointsIn[2]));\n    }\n    else {\n        const points = [];\n        points.push(pointsIn[0], pointsIn[0]);\n        for (let i = 1; i < pointsIn.length; i++) {\n            points.push(pointsIn[i]);\n            if (i === (pointsIn.length - 1)) {\n                points.push(pointsIn[i]);\n            }\n        }\n        const b = [];\n        const s = 1 - curveTightness;\n        out.push(clone(points[0]));\n        for (let i = 1; (i + 2) < points.length; i++) {\n            const cachedVertArray = points[i];\n            b[0] = [cachedVertArray[0], cachedVertArray[1]];\n            b[1] = [cachedVertArray[0] + (s * points[i + 1][0] - s * points[i - 1][0]) / 6, cachedVertArray[1] + (s * points[i + 1][1] - s * points[i - 1][1]) / 6];\n            b[2] = [points[i + 1][0] + (s * points[i][0] - s * points[i + 2][0]) / 6, points[i + 1][1] + (s * points[i][1] - s * points[i + 2][1]) / 6];\n            b[3] = [points[i + 1][0], points[i + 1][1]];\n            out.push(b[1], b[2], b[3]);\n        }\n    }\n    return out;\n}\n"]},"metadata":{},"sourceType":"module"}