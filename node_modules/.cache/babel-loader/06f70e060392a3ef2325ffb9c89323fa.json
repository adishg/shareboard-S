{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/excalidraw/src/actions/manager.tsx\";\nimport React from \"react\";\nimport { t } from \"../i18n\";\nexport class ActionManager {\n  constructor(updater, getAppState, getElementsIncludingDeleted) {\n    this.actions = {};\n    this.updater = void 0;\n    this.getAppState = void 0;\n    this.getElementsIncludingDeleted = void 0;\n\n    this.renderAction = (name, id) => {\n      if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n        const action = this.actions[name];\n        const PanelComponent = action.PanelComponent;\n\n        const updateData = formState => {\n          this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), formState));\n        };\n\n        return /*#__PURE__*/_jsxDEV(PanelComponent, {\n          elements: this.getElementsIncludingDeleted(),\n          appState: this.getAppState(),\n          updateData: updateData,\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this);\n      }\n\n      return null;\n    };\n\n    this.updater = actionResult => {\n      if (actionResult && \"then\" in actionResult) {\n        actionResult.then(actionResult => {\n          return updater(actionResult);\n        });\n      } else {\n        return updater(actionResult);\n      }\n    };\n\n    this.getAppState = getAppState;\n    this.getElementsIncludingDeleted = getElementsIncludingDeleted;\n  }\n\n  registerAction(action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions) {\n    actions.forEach(action => this.registerAction(action));\n  }\n\n  handleKeyDown(event) {\n    const data = Object.values(this.actions).sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0)).filter(action => action.keyTest && action.keyTest(event, this.getAppState(), this.getElementsIncludingDeleted()));\n\n    if (data.length === 0) {\n      return false;\n    }\n\n    event.preventDefault();\n    this.updater(data[0].perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n    return true;\n  }\n\n  executeAction(action) {\n    this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n  }\n\n  getContextMenuItems(actionFilter = action => action) {\n    return Object.values(this.actions).filter(actionFilter).filter(action => \"contextItemLabel\" in action).filter(action => action.contextItemPredicate ? action.contextItemPredicate(this.getElementsIncludingDeleted(), this.getAppState()) : true).sort((a, b) => (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) - (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999)).map(action => {\n      var _action$contextItemLa;\n\n      return {\n        // take last bit of the label  \"labels.<shortcutName>\"\n        shortcutName: (_action$contextItemLa = action.contextItemLabel) === null || _action$contextItemLa === void 0 ? void 0 : _action$contextItemLa.split(\".\").pop(),\n        label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\n        action: () => {\n          this.updater(action.perform(this.getElementsIncludingDeleted(), this.getAppState(), null));\n        }\n      };\n    });\n  } // Id is an attribute that we can use to pass in data like keys.\n  // This is needed for dynamically generated action components\n  // like the user list. We can use this key to extract more\n  // data from app state. This is an alternative to generic prop hell!\n\n\n}","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/manager.tsx"],"names":["React","t","ActionManager","constructor","updater","getAppState","getElementsIncludingDeleted","actions","renderAction","name","id","action","PanelComponent","updateData","formState","perform","actionResult","then","registerAction","registerAll","forEach","handleKeyDown","event","data","Object","values","sort","a","b","keyPriority","filter","keyTest","length","preventDefault","executeAction","getContextMenuItems","actionFilter","contextItemPredicate","contextMenuOrder","undefined","map","shortcutName","contextItemLabel","split","pop","label"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Action,\n  ActionsManagerInterface,\n  UpdaterFn,\n  ActionFilterFn,\n  ActionName,\n  ActionResult,\n} from \"./types\";\nimport { ExcalidrawElement } from \"../element/types\";\nimport { AppState } from \"../types\";\nimport { t } from \"../i18n\";\nimport { ShortcutName } from \"./shortcuts\";\n\nexport class ActionManager implements ActionsManagerInterface {\n  actions = {} as ActionsManagerInterface[\"actions\"];\n\n  updater: (actionResult: ActionResult | Promise<ActionResult>) => void;\n\n  getAppState: () => Readonly<AppState>;\n\n  getElementsIncludingDeleted: () => readonly ExcalidrawElement[];\n\n  constructor(\n    updater: UpdaterFn,\n    getAppState: () => AppState,\n    getElementsIncludingDeleted: () => readonly ExcalidrawElement[],\n  ) {\n    this.updater = (actionResult) => {\n      if (actionResult && \"then\" in actionResult) {\n        actionResult.then((actionResult) => {\n          return updater(actionResult);\n        });\n      } else {\n        return updater(actionResult);\n      }\n    };\n    this.getAppState = getAppState;\n    this.getElementsIncludingDeleted = getElementsIncludingDeleted;\n  }\n\n  registerAction(action: Action) {\n    this.actions[action.name] = action;\n  }\n\n  registerAll(actions: readonly Action[]) {\n    actions.forEach((action) => this.registerAction(action));\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    const data = Object.values(this.actions)\n      .sort((a, b) => (b.keyPriority || 0) - (a.keyPriority || 0))\n      .filter(\n        (action) =>\n          action.keyTest &&\n          action.keyTest(\n            event,\n            this.getAppState(),\n            this.getElementsIncludingDeleted(),\n          ),\n      );\n\n    if (data.length === 0) {\n      return false;\n    }\n\n    event.preventDefault();\n    this.updater(\n      data[0].perform(\n        this.getElementsIncludingDeleted(),\n        this.getAppState(),\n        null,\n      ),\n    );\n    return true;\n  }\n\n  executeAction(action: Action) {\n    this.updater(\n      action.perform(\n        this.getElementsIncludingDeleted(),\n        this.getAppState(),\n        null,\n      ),\n    );\n  }\n\n  getContextMenuItems(actionFilter: ActionFilterFn = (action) => action) {\n    return Object.values(this.actions)\n      .filter(actionFilter)\n      .filter((action) => \"contextItemLabel\" in action)\n      .filter((action) =>\n        action.contextItemPredicate\n          ? action.contextItemPredicate(\n              this.getElementsIncludingDeleted(),\n              this.getAppState(),\n            )\n          : true,\n      )\n      .sort(\n        (a, b) =>\n          (a.contextMenuOrder !== undefined ? a.contextMenuOrder : 999) -\n          (b.contextMenuOrder !== undefined ? b.contextMenuOrder : 999),\n      )\n      .map((action) => ({\n        // take last bit of the label  \"labels.<shortcutName>\"\n        shortcutName: action.contextItemLabel?.split(\".\").pop() as ShortcutName,\n        label: action.contextItemLabel ? t(action.contextItemLabel) : \"\",\n        action: () => {\n          this.updater(\n            action.perform(\n              this.getElementsIncludingDeleted(),\n              this.getAppState(),\n              null,\n            ),\n          );\n        },\n      }));\n  }\n\n  // Id is an attribute that we can use to pass in data like keys.\n  // This is needed for dynamically generated action components\n  // like the user list. We can use this key to extract more\n  // data from app state. This is an alternative to generic prop hell!\n  renderAction = (name: ActionName, id?: string) => {\n    if (this.actions[name] && \"PanelComponent\" in this.actions[name]) {\n      const action = this.actions[name];\n      const PanelComponent = action.PanelComponent!;\n      const updateData = (formState?: any) => {\n        this.updater(\n          action.perform(\n            this.getElementsIncludingDeleted(),\n            this.getAppState(),\n            formState,\n          ),\n        );\n      };\n\n      return (\n        <PanelComponent\n          elements={this.getElementsIncludingDeleted()}\n          appState={this.getAppState()}\n          updateData={updateData}\n          id={id}\n        />\n      );\n    }\n\n    return null;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}