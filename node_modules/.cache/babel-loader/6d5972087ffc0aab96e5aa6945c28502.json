{"ast":null,"code":"import { isTextElement, isExcalidrawElement, redrawTextBoundingBox } from \"../element\";\nimport { CODES, KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport { DEFAULT_FONT_SIZE, DEFAULT_FONT_FAMILY, DEFAULT_TEXT_ALIGN } from \"../constants\"; // `copiedStyles` is exported only for tests.\n\nexport let copiedStyles = \"{}\";\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: (elements, appState) => {\n    const element = elements.find(el => appState.selectedElementIds[el.id]);\n\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n\n    return {\n      appState: { ...appState,\n        toastMessage: t(\"toast.copyStyles\")\n      },\n      commitToHistory: false\n    };\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.C,\n  contextMenuOrder: 0\n});\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: (elements, appState) => {\n    const pastedElement = JSON.parse(copiedStyles);\n\n    if (!isExcalidrawElement(pastedElement)) {\n      return {\n        elements,\n        commitToHistory: false\n      };\n    }\n\n    return {\n      elements: elements.map(element => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = newElementWith(element, {\n            backgroundColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.backgroundColor,\n            strokeWidth: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeWidth,\n            strokeColor: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeColor,\n            strokeStyle: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.strokeStyle,\n            fillStyle: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.fillStyle,\n            opacity: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.opacity,\n            roughness: pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.roughness\n          });\n\n          if (isTextElement(newElement)) {\n            mutateElement(newElement, {\n              fontSize: (pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.fontSize) || DEFAULT_FONT_SIZE,\n              fontFamily: (pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.fontFamily) || DEFAULT_FONT_FAMILY,\n              textAlign: (pastedElement === null || pastedElement === void 0 ? void 0 : pastedElement.textAlign) || DEFAULT_TEXT_ALIGN\n            });\n            redrawTextBoundingBox(newElement);\n          }\n\n          return newElement;\n        }\n\n        return element;\n      }),\n      commitToHistory: true\n    };\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: event => event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n  contextMenuOrder: 1\n});","map":{"version":3,"sources":["/var/www/html/excalidraw/src/actions/actionStyles.ts"],"names":["isTextElement","isExcalidrawElement","redrawTextBoundingBox","CODES","KEYS","t","register","mutateElement","newElementWith","DEFAULT_FONT_SIZE","DEFAULT_FONT_FAMILY","DEFAULT_TEXT_ALIGN","copiedStyles","actionCopyStyles","name","perform","elements","appState","element","find","el","selectedElementIds","id","JSON","stringify","toastMessage","commitToHistory","contextItemLabel","keyTest","event","CTRL_OR_CMD","altKey","code","C","contextMenuOrder","actionPasteStyles","pastedElement","parse","map","newElement","backgroundColor","strokeWidth","strokeColor","strokeStyle","fillStyle","opacity","roughness","fontSize","fontFamily","textAlign","V"],"mappings":"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","sourcesContent":["import {\n  isTextElement,\n  isExcalidrawElement,\n  redrawTextBoundingBox,\n} from \"../element\";\nimport { CODES, KEYS } from \"../keys\";\nimport { t } from \"../i18n\";\nimport { register } from \"./register\";\nimport { mutateElement, newElementWith } from \"../element/mutateElement\";\nimport {\n  DEFAULT_FONT_SIZE,\n  DEFAULT_FONT_FAMILY,\n  DEFAULT_TEXT_ALIGN,\n} from \"../constants\";\n\n// `copiedStyles` is exported only for tests.\nexport let copiedStyles: string = \"{}\";\n\nexport const actionCopyStyles = register({\n  name: \"copyStyles\",\n  perform: (elements, appState) => {\n    const element = elements.find((el) => appState.selectedElementIds[el.id]);\n    if (element) {\n      copiedStyles = JSON.stringify(element);\n    }\n    return {\n      appState: {\n        ...appState,\n        toastMessage: t(\"toast.copyStyles\"),\n      },\n      commitToHistory: false,\n    };\n  },\n  contextItemLabel: \"labels.copyStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.C,\n  contextMenuOrder: 0,\n});\n\nexport const actionPasteStyles = register({\n  name: \"pasteStyles\",\n  perform: (elements, appState) => {\n    const pastedElement = JSON.parse(copiedStyles);\n    if (!isExcalidrawElement(pastedElement)) {\n      return { elements, commitToHistory: false };\n    }\n    return {\n      elements: elements.map((element) => {\n        if (appState.selectedElementIds[element.id]) {\n          const newElement = newElementWith(element, {\n            backgroundColor: pastedElement?.backgroundColor,\n            strokeWidth: pastedElement?.strokeWidth,\n            strokeColor: pastedElement?.strokeColor,\n            strokeStyle: pastedElement?.strokeStyle,\n            fillStyle: pastedElement?.fillStyle,\n            opacity: pastedElement?.opacity,\n            roughness: pastedElement?.roughness,\n          });\n          if (isTextElement(newElement)) {\n            mutateElement(newElement, {\n              fontSize: pastedElement?.fontSize || DEFAULT_FONT_SIZE,\n              fontFamily: pastedElement?.fontFamily || DEFAULT_FONT_FAMILY,\n              textAlign: pastedElement?.textAlign || DEFAULT_TEXT_ALIGN,\n            });\n            redrawTextBoundingBox(newElement);\n          }\n          return newElement;\n        }\n        return element;\n      }),\n      commitToHistory: true,\n    };\n  },\n  contextItemLabel: \"labels.pasteStyles\",\n  keyTest: (event) =>\n    event[KEYS.CTRL_OR_CMD] && event.altKey && event.code === CODES.V,\n  contextMenuOrder: 1,\n});\n"]},"metadata":{},"sourceType":"module"}