{"ast":null,"code":"/*\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n'use strict'; // WARNING\n// Don't use this file directly in production! Please include `pwacompat.min.js`!\n// WARNING\n\n/**\n * @suppress {uselessCode}\n */\n\nfunction unused() {\n  // compiled out, but crashes IE11 early rather than within the code\n  `Please don't use this file directly: include pwacompat.min.js instead!`;\n}\n\n(function () {\n  // basic feature detection: from IE10+\n  // also fallout on 'navigator.standalone', we _are_ an iOS PWA\n  if (!('onload' in XMLHttpRequest.prototype) || navigator.standalone) {\n    return;\n  }\n\n  const debug = false;\n  const capableDisplayModes = ['standalone', 'fullscreen', 'minimal-ui'];\n  const defaultSplashColor = '#f8f9fa';\n  const defaultSplashTextSize = 24;\n  const defaultFontName = 'HelveticaNeue-CondensedBold';\n  const idealSplashIconSize = 128;\n  const minimumSplashIconSize = 48;\n  const splashIconPadding = 20;\n  const appleIconSizeMin = 120;\n  const userAgent = navigator.userAgent || '';\n  const isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') !== -1;\n  const isSafariMobile = isSafari && (userAgent.indexOf('Mobile/') !== -1 || 'standalone' in navigator) || debug;\n  const isIEOrEdge = Boolean(userAgent.match(/(MSIE |Edge\\/|Trident\\/)/));\n  const isEdgePWA = typeof Windows !== 'undefined';\n  let manifestEl; // we need this later, not just for JSON\n\n  let internalStorage;\n\n  try {\n    internalStorage = sessionStorage;\n  } catch (e) {}\n\n  internalStorage = internalStorage || {};\n  /**\n   * Retrieves element in head if available, otherwise null\n   * @param {string} selector CSS selector\n   * @return {?Element}\n   */\n\n  function getElementInHead(selector) {\n    // It's possible to pass \"bad\" attr or values here (originally from the manifest); just\n    // return null if there's something wrong.\n    try {\n      return document.head.querySelector(selector);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * @param {string} k\n   * @param {string=} v\n   * @return {string|undefined}\n   */\n\n\n  function store(k, v) {\n    const key = '__pwacompat_' + k;\n\n    if (v !== undefined) {\n      internalStorage[key] = v;\n    }\n\n    return internalStorage[key];\n  }\n\n  function setup() {\n    manifestEl = getElementInHead('link[rel=\"manifest\"]');\n    const manifestHref = manifestEl ? manifestEl.href : '';\n\n    if (!manifestHref) {\n      throw `can't find <link rel=\"manifest\" href=\"..\" />'`;\n    }\n\n    const hrefFactory = buildHrefFactory([manifestHref, location]);\n    const storedResponse = store('manifest');\n\n    if (storedResponse) {\n      try {\n        const data =\n        /** @type {!Object<string, *>} */\n        JSON.parse(storedResponse);\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', manifestHref); // nb. use getAttribute for older brower safety\n\n    xhr.withCredentials = manifestEl.getAttribute('crossorigin') === 'use-credentials'; // this is IE10+\n\n    xhr.onload = () => {\n      try {\n        const data =\n        /** @type {!Object<string, *>} */\n        JSON.parse(xhr.responseText);\n        store('manifest', xhr.responseText);\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n    };\n\n    xhr.send(null);\n  }\n  /**\n   * @param {!Array<string>} options\n   * @return {function(string): string}\n   */\n\n\n  function buildHrefFactory(options) {\n    for (let i = 0; i < options.length; ++i) {\n      const opt = options[i];\n\n      try {\n        new URL('', opt);\n        return part => new URL(part || '', opt).toString();\n      } catch (e) {}\n    }\n\n    return part => part || '';\n  }\n  /**\n   * Adds an element in the <head> if it's not present already based on the passed check.\n   * @param {string} localName tag name\n   * @param {!Object<string>} attr key-value collection of attributes\n   * @param {string} check to apply to the tag\n   */\n\n\n  function push(localName, attr, check) {\n    if (getElementInHead(localName + check)) {\n      return;\n    }\n\n    const node = document.createElement(localName);\n\n    for (const k in attr) {\n      node.setAttribute(k, attr[k]);\n    }\n\n    document.head.appendChild(node);\n    return node;\n  }\n\n  function meta(name, content) {\n    if (content) {\n      if (content === true) {\n        content = 'yes';\n      }\n\n      push('meta', {\n        name,\n        content\n      }, `[name=\"${name}\"]`);\n    }\n  }\n  /**\n   * Pre-process the icon sizes and purpose into a tuple and array.\n   */\n\n\n  function normalizeIcon(icon) {\n    const parsedSizes = icon.sizes.split(/\\s+/g).map(size => {\n      if (size === 'any') {\n        return Infinity;\n      }\n\n      return parseInt(size, 10) || 0; // NaN is falsey\n    });\n    return {\n      src: icon.src,\n      type: icon.type,\n      sizes: icon.sizes,\n      // Get the largest size from a processed icon.\n      largestSize: Math.max.apply(null, parsedSizes),\n      purpose: icon.purpose ? icon.purpose.split(/\\s+/g) : ['any']\n    };\n  }\n  /**\n   * @param {!Object<string, (string|*)>} manifest\n   * @param {function(string): string} urlFactory\n   */\n\n\n  function process(manifest, urlFactory) {\n    // largest first\n    const allIcons = (manifest['icons'] || []).map(normalizeIcon).sort((a, b) => b.largestSize - a.largestSize);\n    const icons = allIcons.filter(icon => icon.purpose.indexOf('any') > -1);\n    const maskable = allIcons.filter(icon => icon.purpose.indexOf('maskable') > -1);\n    const appleTouchIcons = (maskable.length > 0 ? maskable : icons).map(icon => {\n      // create regular link icons as byproduct\n      const attr = {\n        'rel': 'icon',\n        'href': urlFactory(icon['src']),\n        'sizes': icon['sizes']\n      }; // This checks for matching \"rel\" and \"sizes\". We don't check for the same image file, as\n      // it is used literally by ourselves (and could be set by users for another icon).\n\n      const querySuffix = `[sizes=\"${icon['sizes']}\"]`;\n      push('link', attr, '[rel=\"icon\"]' + querySuffix);\n\n      if (!isSafariMobile) {\n        return;\n      }\n\n      if (icon.largestSize < appleIconSizeMin) {\n        return;\n      }\n\n      attr['rel'] = 'apple-touch-icon'; // nb. we used to call `removeAttribute('sizes')` here, which crashed iOS 8\n      // ... sizes has been supported since iOS 4.2 (!)\n\n      return push('link', attr, '[rel=\"apple-touch-icon\"]' + querySuffix);\n    }).filter(Boolean); // nb. only for iOS, but watch for future CSS rule `@viewport { viewport-fit: cover; }`\n\n    const metaViewport = getElementInHead('meta[name=\"viewport\"]');\n    const viewport = metaViewport && metaViewport.content || '';\n    const viewportFitCover = Boolean(viewport.match(/\\bviewport-fit\\s*=\\s*cover\\b/));\n    const display = manifest['display'];\n    const isCapable = capableDisplayModes.indexOf(display) !== -1;\n    meta('mobile-web-app-capable', isCapable);\n    updateThemeColorRender(\n    /** @type {string} */\n    manifest['theme_color'] || 'black', viewportFitCover);\n\n    if (isIEOrEdge) {\n      // Pinned Sites, largely from https://technet.microsoft.com/en-us/windows/dn255024(v=vs.60)\n      meta('application-name', manifest['short_name']);\n      meta('msapplication-tooltip', manifest['description']);\n      meta('msapplication-starturl', urlFactory(\n      /** @type {string} */\n      manifest['start_url'] || '.'));\n      meta('msapplication-navbutton-color', manifest['theme_color']);\n      const largest = icons[0];\n\n      if (largest) {\n        meta('msapplication-TileImage', urlFactory(largest['src']));\n      }\n\n      meta('msapplication-TileColor', manifest['background_color']);\n    }\n\n    meta('theme-color', manifest['theme_color']);\n\n    if (!isSafariMobile) {\n      // TODO(samthor): We don't detect QQ or UC, we just set the vars anyway.\n      const orientation = simpleOrientationFor(manifest['orientation']);\n      meta('x5-orientation', orientation); // QQ\n\n      meta('screen-orientation', orientation); // UC\n\n      if (display === 'fullscreen') {\n        meta('x5-fullscreen', 'true'); // QQ\n\n        meta('full-screen', 'yes'); // UC\n      } else if (isCapable) {\n        meta('x5-page-mode', 'app'); // QQ\n\n        meta('browsermode', 'application'); // UC\n      }\n\n      return; // the rest of this file is for Mobile Safari\n    }\n\n    const backgroundColor =\n    /** @type {string} */\n    manifest['background_color'] || defaultSplashColor;\n    const backgroundIsLight = shouldUseLightForeground(backgroundColor); // Add related iTunes app from manifest.\n\n    const itunes = findAppleId(manifest['related_applications']);\n    itunes && meta('apple-itunes-app', `app-id=${itunes}`); // General iOS meta tags.\n\n    meta('apple-mobile-web-app-capable', isCapable);\n    meta('apple-mobile-web-app-title', manifest['short_name'] || manifest['name']);\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {string} orientation\n     * @param {?Image} icon\n     * @return {function(): string}\n     */\n\n    function splashFor(width, height, orientation, icon) {\n      const ratio = window.devicePixelRatio;\n      const ctx = contextForCanvas({\n        width: width * ratio,\n        height: height * ratio\n      });\n      ctx.scale(ratio, ratio);\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, width, height);\n      ctx.translate(width / 2, (height - splashIconPadding) / 2);\n\n      if (icon) {\n        // nb: on Chrome, we need the image >=48px, use the big layout >=80dp, ideal is >=128dp\n        let iconWidth = icon.width / ratio;\n        let iconHeight = icon.height / ratio;\n\n        if (iconHeight > idealSplashIconSize) {\n          // clamp to 128px height max\n          iconWidth /= iconHeight / idealSplashIconSize;\n          iconHeight = idealSplashIconSize;\n        }\n\n        if (iconWidth >= minimumSplashIconSize && iconHeight >= minimumSplashIconSize) {\n          ctx.drawImage(icon, iconWidth / -2, iconHeight / -2, iconWidth, iconHeight);\n          ctx.translate(0, iconHeight / 2 + splashIconPadding);\n        }\n      }\n\n      ctx.fillStyle = backgroundIsLight ? 'white' : 'black';\n      ctx.font = `${defaultSplashTextSize}px ${defaultFontName}`; // Set the user-requested font; if it's invalid, the set will fail.\n\n      const s = getComputedStyle(manifestEl);\n      ctx.font = s.getPropertyValue('--pwacompat-splash-font'); // blank for old browsers\n\n      const title = manifest['name'] || manifest['short_name'] || document.title;\n      const measure = ctx.measureText(title);\n      const textHeight = measure.actualBoundingBoxAscent || defaultSplashTextSize;\n      ctx.translate(0, textHeight);\n\n      if (measure.width < width * 0.8) {\n        // short-circuit, just draw entire string\n        ctx.fillText(title, measure.width / -2, 0);\n      } else {\n        // longer wrap case, draw once we have >0.7 width accumulated\n        const words = title.split(/\\s+/g);\n\n        for (let i = 1; i <= words.length; ++i) {\n          const cand = words.slice(0, i).join(' ');\n          const measureWidth = ctx.measureText(cand).width;\n\n          if (i === words.length || measureWidth > width * 0.6) {\n            // render accumulated words\n            ctx.fillText(cand, measureWidth / -2, 0);\n            ctx.translate(0, textHeight * 1.2);\n            words.splice(0, i);\n            i = 0;\n          }\n        }\n      }\n\n      return () => {\n        const data = ctx.canvas.toDataURL();\n\n        if (debug) {\n          const img = document.createElement('img');\n          img.src = data;\n          document.body.append(img);\n        }\n\n        appendSplash(orientation, data);\n        return data;\n      };\n    }\n    /**\n     * @param {string} orientation\n     * @param {string} data\n     */\n\n\n    function appendSplash(orientation, data) {\n      const generatedSplash =\n      /** @type {!HTMLLinkElement} */\n      document.createElement('link');\n      generatedSplash.setAttribute('rel', 'apple-touch-startup-image');\n      generatedSplash.setAttribute('media', `(orientation: ${orientation})`);\n      generatedSplash.setAttribute('href', data);\n      document.head.appendChild(generatedSplash);\n    } // fetch previous (session) iOS image updates\n\n\n    const rendered = store('iOS');\n\n    if (!debug && rendered) {\n      try {\n        const prev =\n        /** @type {!Object<string, string>} */\n        JSON.parse(rendered);\n        appendSplash('portrait', prev['p']);\n        appendSplash('landscape', prev['l']);\n        appleTouchIcons.forEach(icon => {\n          const change = prev['i'][icon.href];\n\n          if (change) {\n            icon.href = change;\n          }\n        });\n        return;\n      } catch (e) {// ignore, some problem with the JSON\n      }\n    }\n\n    const update = {\n      'i': {}\n    };\n    /**\n     * @param {?Image} applicationIcon\n     * @param {function(): void} done\n     */\n\n    function renderBothSplash(applicationIcon, done) {\n      const s = window.screen;\n      const portrait = splashFor(s.width, s.height, 'portrait', applicationIcon);\n      const landscape = splashFor(s.height, s.width, 'landscape', applicationIcon); // this is particularly egregious setTimeout use, but the .toDataURL() is one of the\n      // \"bottlenecks\" of PWACompat, so don't elongate any single frame more than needed.\n\n      setTimeout(() => {\n        update['p'] = portrait();\n        setTimeout(() => {\n          update['l'] = landscape();\n          done();\n        }, 10);\n      }, 10);\n    } // fetches and redraws any remaining icons in appleTouchIcons (to have proper bg)\n\n\n    function redrawRemainingIcons(done) {\n      let left = appleTouchIcons.length + 1;\n\n      const check = () => {\n        if (! --left) {\n          done();\n        }\n      };\n\n      check();\n      appleTouchIcons.forEach(icon => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onerror = check;\n\n        img.onload = () => {\n          img.onload = null;\n          icon.href = updateTransparent(img, backgroundColor, true);\n          update['i'][img.src] = icon.href;\n          check();\n        };\n\n        img.src = icon.href;\n      });\n    } // write the update to sessionStorage\n\n\n    function saveUpdate() {\n      store('iOS', JSON.stringify(update));\n    } // called repeatedly until a valid icon is found\n\n\n    function fetchIconAndBuildSplash() {\n      const icon = appleTouchIcons.shift();\n\n      if (!icon) {\n        renderBothSplash(null, saveUpdate); // ran out of icons, render without one\n\n        return;\n      }\n\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n\n      img.onerror = () => void fetchIconAndBuildSplash(); // try again\n\n\n      img.onload = () => {\n        img.onload = null; // iOS Safari might call this many times\n\n        renderBothSplash(img, () => {\n          // ... if the icon used for splash changed, redraw others too\n          const redrawn = manifest['background_color'] && updateTransparent(img, backgroundColor);\n\n          if (redrawn) {\n            icon.href = redrawn;\n            update['i'][img.src] = redrawn;\n            redrawRemainingIcons(saveUpdate);\n          } else {\n            saveUpdate();\n          }\n        });\n      };\n\n      img.src = icon.href; // trigger load\n    }\n\n    fetchIconAndBuildSplash();\n  }\n\n  function findAppleId(related) {\n    let itunes;\n    (related || []).filter(app => app['platform'] === 'itunes').forEach(app => {\n      if (app['id']) {\n        itunes = app['id'];\n      } else {\n        const match = app['url'].match(/id(\\d+)/);\n\n        if (match) {\n          itunes = match[1];\n        }\n      }\n    });\n    return itunes;\n  }\n\n  function simpleOrientationFor(v) {\n    const prefix = String(v || '').substr(0, 3);\n    return {\n      'por': 'portrait',\n      'lan': 'landscape'\n    }[prefix] || '';\n  }\n  /**\n   * @param {string} color\n   * @param {boolean} viewportFitCover\n   */\n\n\n  function updateThemeColorRender(color, viewportFitCover) {\n    if (!(isSafariMobile || isEdgePWA)) {\n      return;\n    }\n\n    const themeIsLight = shouldUseLightForeground(color);\n\n    if (isSafariMobile) {\n      // nb. Safari 11.3+ gives a deprecation warning about this meta tag.\n      const content = viewportFitCover ? 'black-translucent' : themeIsLight ? 'black' : 'default';\n      meta('apple-mobile-web-app-status-bar-style', content);\n    } else {\n      // Edge PWA\n      const t = getEdgeTitleBar();\n\n      if (!t) {\n        return; // something went wrong, we had a UWP without titleBar\n      } // Foreground is black if theme is light, otherwise white.\n\n\n      const v = themeIsLight ? 255 : 0;\n      t.foregroundColor =\n      /** @type {WindowsColor} */\n      {\n        'r': v,\n        'g': v,\n        'b': v,\n        'a': 255\n      };\n      t.backgroundColor = colorToWindowsRGBA(color);\n    }\n  }\n  /**\n   * @return {!ApplicationViewTitleBar|undefined}\n   */\n\n\n  function getEdgeTitleBar() {\n    try {\n      return Windows.UI.ViewManagement.ApplicationView.getForCurrentView().titleBar;\n    } catch (e) {// implicit return undefined\n    }\n  }\n  /**\n   * The Windows titlebar APIs expect an object of {r, g, b, a}.\n   *\n   * @param {string} color\n   * @return {WindowsColor}\n   */\n\n\n  function colorToWindowsRGBA(color) {\n    const data = readColor(color);\n    return (\n      /** @type {WindowsColor} */\n      {\n        'r': data[0],\n        'g': data[1],\n        'b': data[2],\n        'a': data[3]\n      }\n    );\n  }\n  /**\n   * @param {string} color\n   * @return {!Uint8ClampedArray}\n   */\n\n\n  function readColor(color) {\n    const c = contextForCanvas();\n    c.fillStyle = color;\n    c.fillRect(0, 0, 1, 1);\n    return c.getImageData(0, 0, 1, 1).data || []; // incase this fails for some reason\n  }\n  /**\n   * @param {string} color\n   * @return {boolean}\n   */\n\n\n  function shouldUseLightForeground(color) {\n    const pixelData = readColor(color); // From https://cs.chromium.org/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/util/ColorUtils.java\n\n    const data = pixelData.map(v => {\n      const f = v / 255;\n      return f < 0.03928 ? f / 12.92 : Math.pow((f + 0.055) / 1.055, 2.4);\n    });\n    const lum = 0.2126 * data[0] + 0.7152 * data[1] + 0.0722 * data[2];\n    const contrast = Math.abs(1.05 / (lum + 0.05));\n    return contrast > 3;\n  }\n\n  function updateTransparent(image, background, force = false) {\n    const context = contextForCanvas(image);\n    context.drawImage(image, 0, 0); // look for transparent pixel in top-left\n    // TODO: Chrome actually checks the four corners for some cases.\n\n    if (!force) {\n      const imageData = context.getImageData(0, 0, 1, 1);\n\n      if (imageData.data[3] === 255) {\n        return;\n      }\n    }\n\n    context.globalCompositeOperation = 'destination-over'; // only replace transparent areas\n\n    context.fillStyle = background;\n    context.fillRect(0, 0, image.width, image.height);\n    return context.canvas.toDataURL();\n  }\n\n  function contextForCanvas({\n    width,\n    height\n  } = {\n    width: 1,\n    height: 1\n  }) {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas.getContext('2d');\n  } // actually run PWACompat here\n\n\n  if (document.readyState === 'complete') {\n    setup();\n  } else {\n    window.addEventListener('load', setup);\n  }\n})();","map":{"version":3,"sources":["/var/www/html/excalidraw/node_modules/pwacompat/src/pwacompat.js"],"names":["unused","XMLHttpRequest","prototype","navigator","standalone","debug","capableDisplayModes","defaultSplashColor","defaultSplashTextSize","defaultFontName","idealSplashIconSize","minimumSplashIconSize","splashIconPadding","appleIconSizeMin","userAgent","isSafari","vendor","indexOf","isSafariMobile","isIEOrEdge","Boolean","match","isEdgePWA","Windows","manifestEl","internalStorage","sessionStorage","e","getElementInHead","selector","document","head","querySelector","store","k","v","key","undefined","setup","manifestHref","href","hrefFactory","buildHrefFactory","location","storedResponse","data","JSON","parse","process","err","console","warn","xhr","open","withCredentials","getAttribute","onload","responseText","send","options","i","length","opt","URL","part","toString","push","localName","attr","check","node","createElement","setAttribute","appendChild","meta","name","content","normalizeIcon","icon","parsedSizes","sizes","split","map","size","Infinity","parseInt","src","type","largestSize","Math","max","apply","purpose","manifest","urlFactory","allIcons","sort","a","b","icons","filter","maskable","appleTouchIcons","querySuffix","metaViewport","viewport","viewportFitCover","display","isCapable","updateThemeColorRender","largest","orientation","simpleOrientationFor","backgroundColor","backgroundIsLight","shouldUseLightForeground","itunes","findAppleId","splashFor","width","height","ratio","window","devicePixelRatio","ctx","contextForCanvas","scale","fillStyle","fillRect","translate","iconWidth","iconHeight","drawImage","font","s","getComputedStyle","getPropertyValue","title","measure","measureText","textHeight","actualBoundingBoxAscent","fillText","words","cand","slice","join","measureWidth","splice","canvas","toDataURL","img","body","append","appendSplash","generatedSplash","rendered","prev","forEach","change","update","renderBothSplash","applicationIcon","done","screen","portrait","landscape","setTimeout","redrawRemainingIcons","left","Image","crossOrigin","onerror","updateTransparent","saveUpdate","stringify","fetchIconAndBuildSplash","shift","redrawn","related","app","prefix","String","substr","color","themeIsLight","t","getEdgeTitleBar","foregroundColor","colorToWindowsRGBA","UI","ViewManagement","ApplicationView","getForCurrentView","titleBar","readColor","c","getImageData","pixelData","f","pow","lum","contrast","abs","image","background","force","context","imageData","globalCompositeOperation","getContext","readyState","addEventListener"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AACA;AACA;AACA;;AACA,SAASA,MAAT,GAAkB;AAChB;AACC,0EAAD;AACD;;AAEA,aAAW;AACV;AACA;AACA,MAAI,EAAE,YAAYC,cAAc,CAACC,SAA7B,KAA2CC,SAAS,CAACC,UAAzD,EAAqE;AACnE;AACD;;AAED,QAAMC,KAAK,GAAG,KAAd;AAEA,QAAMC,mBAAmB,GAAG,CAAC,YAAD,EAAe,YAAf,EAA6B,YAA7B,CAA5B;AACA,QAAMC,kBAAkB,GAAG,SAA3B;AACA,QAAMC,qBAAqB,GAAG,EAA9B;AACA,QAAMC,eAAe,GAAG,6BAAxB;AACA,QAAMC,mBAAmB,GAAG,GAA5B;AACA,QAAMC,qBAAqB,GAAG,EAA9B;AACA,QAAMC,iBAAiB,GAAG,EAA1B;AACA,QAAMC,gBAAgB,GAAG,GAAzB;AAEA,QAAMC,SAAS,GAAGX,SAAS,CAACW,SAAV,IAAuB,EAAzC;AACA,QAAMC,QAAQ,GAAIZ,SAAS,CAACa,MAAV,IAAoBb,SAAS,CAACa,MAAV,CAAiBC,OAAjB,CAAyB,OAAzB,MAAsC,CAAC,CAA7E;AACA,QAAMC,cAAc,GAAGH,QAAQ,KAAKD,SAAS,CAACG,OAAV,CAAkB,SAAlB,MAAiC,CAAC,CAAlC,IAAuC,gBAAgBd,SAA5D,CAAR,IAAkFE,KAAzG;AACA,QAAMc,UAAU,GAAGC,OAAO,CAACN,SAAS,CAACO,KAAV,CAAgB,0BAAhB,CAAD,CAA1B;AACA,QAAMC,SAAS,GAAI,OAAOC,OAAP,KAAmB,WAAtC;AAEA,MAAIC,UAAJ,CAxBU,CAwBO;;AACjB,MAAIC,eAAJ;;AACA,MAAI;AACFA,IAAAA,eAAe,GAAGC,cAAlB;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;;AACdF,EAAAA,eAAe,GAAGA,eAAe,IAAI,EAArC;AAEA;AACF;AACA;AACA;AACA;;AACE,WAASG,gBAAT,CAA0BC,QAA1B,EAAoC;AAClC;AACA;AACA,QAAI;AACF,aAAOC,QAAQ,CAACC,IAAT,CAAcC,aAAd,CAA4BH,QAA5B,CAAP;AACD,KAFD,CAEE,OAAOF,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASM,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;AACnB,UAAMC,GAAG,GAAG,iBAAiBF,CAA7B;;AACA,QAAIC,CAAC,KAAKE,SAAV,EAAqB;AACnBZ,MAAAA,eAAe,CAACW,GAAD,CAAf,GAAuBD,CAAvB;AACD;;AACD,WAAOV,eAAe,CAACW,GAAD,CAAtB;AACD;;AAED,WAASE,KAAT,GAAiB;AACfd,IAAAA,UAAU,GAAGI,gBAAgB,CAAC,sBAAD,CAA7B;AACA,UAAMW,YAAY,GAAGf,UAAU,GAAGA,UAAU,CAACgB,IAAd,GAAqB,EAApD;;AACA,QAAI,CAACD,YAAL,EAAmB;AACjB,YAAO,+CAAP;AACD;;AAED,UAAME,WAAW,GAAGC,gBAAgB,CAAC,CAACH,YAAD,EAAeI,QAAf,CAAD,CAApC;AACA,UAAMC,cAAc,GAAGX,KAAK,CAAC,UAAD,CAA5B;;AACA,QAAIW,cAAJ,EAAoB;AAClB,UAAI;AACF,cAAMC,IAAI;AAAG;AAAmCC,QAAAA,IAAI,CAACC,KAAL,CAAWH,cAAX,CAAhD;AACAI,QAAAA,OAAO,CAACH,IAAD,EAAOJ,WAAP,CAAP;AACD,OAHD,CAGE,OAAOQ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,IAAR,CAAa,iBAAb,EAAgCF,GAAhC;AACD;;AACD;AACD;;AAED,UAAMG,GAAG,GAAG,IAAInD,cAAJ,EAAZ;AACAmD,IAAAA,GAAG,CAACC,IAAJ,CAAS,KAAT,EAAgBd,YAAhB,EApBe,CAsBf;;AACAa,IAAAA,GAAG,CAACE,eAAJ,GAAuB9B,UAAU,CAAC+B,YAAX,CAAwB,aAAxB,MAA2C,iBAAlE,CAvBe,CAyBf;;AACAH,IAAAA,GAAG,CAACI,MAAJ,GAAa,MAAM;AACjB,UAAI;AACF,cAAMX,IAAI;AAAG;AAAmCC,QAAAA,IAAI,CAACC,KAAL,CAAWK,GAAG,CAACK,YAAf,CAAhD;AACAxB,QAAAA,KAAK,CAAC,UAAD,EAAamB,GAAG,CAACK,YAAjB,CAAL;AACAT,QAAAA,OAAO,CAACH,IAAD,EAAOJ,WAAP,CAAP;AACD,OAJD,CAIE,OAAOQ,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,IAAR,CAAa,iBAAb,EAAgCF,GAAhC;AACD;AACF,KARD;;AASAG,IAAAA,GAAG,CAACM,IAAJ,CAAS,IAAT;AACD;AAED;AACF;AACA;AACA;;;AACE,WAAShB,gBAAT,CAA0BiB,OAA1B,EAAmC;AACjC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,YAAME,GAAG,GAAGH,OAAO,CAACC,CAAD,CAAnB;;AACA,UAAI;AACF,YAAIG,GAAJ,CAAQ,EAAR,EAAYD,GAAZ;AACA,eAAQE,IAAD,IAAW,IAAID,GAAJ,CAAQC,IAAI,IAAI,EAAhB,EAAoBF,GAApB,CAAD,CAA2BG,QAA3B,EAAjB;AACD,OAHD,CAGE,OAAOtC,CAAP,EAAU,CAAE;AACf;;AACD,WAAQqC,IAAD,IAAUA,IAAI,IAAI,EAAzB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASE,IAAT,CAAcC,SAAd,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsC;AACpC,QAAIzC,gBAAgB,CAACuC,SAAS,GAAGE,KAAb,CAApB,EAAyC;AACvC;AACD;;AACD,UAAMC,IAAI,GAAGxC,QAAQ,CAACyC,aAAT,CAAuBJ,SAAvB,CAAb;;AACA,SAAK,MAAMjC,CAAX,IAAgBkC,IAAhB,EAAsB;AACpBE,MAAAA,IAAI,CAACE,YAAL,CAAkBtC,CAAlB,EAAqBkC,IAAI,CAAClC,CAAD,CAAzB;AACD;;AACDJ,IAAAA,QAAQ,CAACC,IAAT,CAAc0C,WAAd,CAA0BH,IAA1B;AACA,WAAOA,IAAP;AACD;;AAED,WAASI,IAAT,CAAcC,IAAd,EAAoBC,OAApB,EAA6B;AAC3B,QAAIA,OAAJ,EAAa;AACX,UAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBA,QAAAA,OAAO,GAAG,KAAV;AACD;;AACDV,MAAAA,IAAI,CAAC,MAAD,EAAS;AAACS,QAAAA,IAAD;AAAOC,QAAAA;AAAP,OAAT,EAA2B,UAASD,IAAK,IAAzC,CAAJ;AACD;AACF;AAED;AACF;AACA;;;AACE,WAASE,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,UAAMC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAWC,KAAX,CAAiB,MAAjB,EAAyBC,GAAzB,CAA8BC,IAAD,IAAU;AACzD,UAAIA,IAAI,KAAK,KAAb,EAAoB;AAClB,eAAOC,QAAP;AACD;;AACD,aAAOC,QAAQ,CAACF,IAAD,EAAO,EAAP,CAAR,IAAsB,CAA7B,CAJyD,CAIzB;AACjC,KALmB,CAApB;AAOA,WAAO;AACLG,MAAAA,GAAG,EAAER,IAAI,CAACQ,GADL;AAELC,MAAAA,IAAI,EAAET,IAAI,CAACS,IAFN;AAGLP,MAAAA,KAAK,EAAEF,IAAI,CAACE,KAHP;AAIL;AACAQ,MAAAA,WAAW,EAAEC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBZ,WAArB,CALR;AAMLa,MAAAA,OAAO,EAAEd,IAAI,CAACc,OAAL,GAAed,IAAI,CAACc,OAAL,CAAaX,KAAb,CAAmB,MAAnB,CAAf,GAA4C,CAAC,KAAD;AANhD,KAAP;AAQD;AAED;AACF;AACA;AACA;;;AACE,WAASjC,OAAT,CAAiB6C,QAAjB,EAA2BC,UAA3B,EAAuC;AACrC;AACA,UAAMC,QAAQ,GAAG,CAACF,QAAQ,CAAC,OAAD,CAAR,IAAqB,EAAtB,EACdX,GADc,CACVL,aADU,EAEdmB,IAFc,CAET,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACV,WAAF,GAAgBS,CAAC,CAACT,WAFnB,CAAjB;AAIA,UAAMW,KAAK,GAAGJ,QAAQ,CAACK,MAAT,CAAiBtB,IAAD,IAAUA,IAAI,CAACc,OAAL,CAAa3E,OAAb,CAAqB,KAArB,IAA8B,CAAC,CAAzD,CAAd;AACA,UAAMoF,QAAQ,GAAGN,QAAQ,CAACK,MAAT,CAAiBtB,IAAD,IAAUA,IAAI,CAACc,OAAL,CAAa3E,OAAb,CAAqB,UAArB,IAAmC,CAAC,CAA9D,CAAjB;AAEA,UAAMqF,eAAe,GAAG,CAACD,QAAQ,CAACxC,MAAT,GAAkB,CAAlB,GAAsBwC,QAAtB,GAAiCF,KAAlC,EAAyCjB,GAAzC,CAA8CJ,IAAD,IAAU;AAC7E;AACA,YAAMV,IAAI,GAAG;AAAC,eAAO,MAAR;AAAgB,gBAAQ0B,UAAU,CAAChB,IAAI,CAAC,KAAD,CAAL,CAAlC;AAAiD,iBAASA,IAAI,CAAC,OAAD;AAA9D,OAAb,CAF6E,CAG7E;AACA;;AACA,YAAMyB,WAAW,GAAI,WAAUzB,IAAI,CAAC,OAAD,CAAU,IAA7C;AACAZ,MAAAA,IAAI,CAAC,MAAD,EAASE,IAAT,EAAe,iBAAiBmC,WAAhC,CAAJ;;AACA,UAAI,CAACrF,cAAL,EAAqB;AACnB;AACD;;AACD,UAAI4D,IAAI,CAACU,WAAL,GAAmB3E,gBAAvB,EAAyC;AACvC;AACD;;AACDuD,MAAAA,IAAI,CAAC,KAAD,CAAJ,GAAc,kBAAd,CAb6E,CAe7E;AACA;;AACA,aAAOF,IAAI,CAAC,MAAD,EAASE,IAAT,EAAe,6BAA6BmC,WAA5C,CAAX;AACD,KAlBuB,EAkBrBH,MAlBqB,CAkBdhF,OAlBc,CAAxB,CATqC,CA6BrC;;AACA,UAAMoF,YAAY,GAAG5E,gBAAgB,CAAC,uBAAD,CAArC;AACA,UAAM6E,QAAQ,GAAGD,YAAY,IAAIA,YAAY,CAAC5B,OAA7B,IAAwC,EAAzD;AACA,UAAM8B,gBAAgB,GAAGtF,OAAO,CAACqF,QAAQ,CAACpF,KAAT,CAAe,8BAAf,CAAD,CAAhC;AAEA,UAAMsF,OAAO,GAAGd,QAAQ,CAAC,SAAD,CAAxB;AACA,UAAMe,SAAS,GAAGtG,mBAAmB,CAACW,OAApB,CAA4B0F,OAA5B,MAAyC,CAAC,CAA5D;AACAjC,IAAAA,IAAI,CAAC,wBAAD,EAA2BkC,SAA3B,CAAJ;AACAC,IAAAA,sBAAsB;AAAC;AAAuBhB,IAAAA,QAAQ,CAAC,aAAD,CAAT,IAA6B,OAApD,EAA6Da,gBAA7D,CAAtB;;AAEA,QAAIvF,UAAJ,EAAgB;AACd;AACAuD,MAAAA,IAAI,CAAC,kBAAD,EAAqBmB,QAAQ,CAAC,YAAD,CAA7B,CAAJ;AACAnB,MAAAA,IAAI,CAAC,uBAAD,EAA0BmB,QAAQ,CAAC,aAAD,CAAlC,CAAJ;AACAnB,MAAAA,IAAI,CAAC,wBAAD,EAA2BoB,UAAU;AAAC;AAAuBD,MAAAA,QAAQ,CAAC,WAAD,CAAT,IAA2B,GAAlD,CAArC,CAAJ;AACAnB,MAAAA,IAAI,CAAC,+BAAD,EAAkCmB,QAAQ,CAAC,aAAD,CAA1C,CAAJ;AAEA,YAAMiB,OAAO,GAAGX,KAAK,CAAC,CAAD,CAArB;;AACA,UAAIW,OAAJ,EAAa;AACXpC,QAAAA,IAAI,CAAC,yBAAD,EAA4BoB,UAAU,CAACgB,OAAO,CAAC,KAAD,CAAR,CAAtC,CAAJ;AACD;;AACDpC,MAAAA,IAAI,CAAC,yBAAD,EAA4BmB,QAAQ,CAAC,kBAAD,CAApC,CAAJ;AACD;;AAEDnB,IAAAA,IAAI,CAAC,aAAD,EAAgBmB,QAAQ,CAAC,aAAD,CAAxB,CAAJ;;AAEA,QAAI,CAAC3E,cAAL,EAAqB;AACnB;AACA,YAAM6F,WAAW,GAAGC,oBAAoB,CAACnB,QAAQ,CAAC,aAAD,CAAT,CAAxC;AACAnB,MAAAA,IAAI,CAAC,gBAAD,EAAmBqC,WAAnB,CAAJ,CAHmB,CAGuB;;AAC1CrC,MAAAA,IAAI,CAAC,oBAAD,EAAuBqC,WAAvB,CAAJ,CAJmB,CAIuB;;AAC1C,UAAIJ,OAAO,KAAK,YAAhB,EAA8B;AAC5BjC,QAAAA,IAAI,CAAC,eAAD,EAAkB,MAAlB,CAAJ,CAD4B,CACI;;AAChCA,QAAAA,IAAI,CAAC,aAAD,EAAgB,KAAhB,CAAJ,CAF4B,CAEI;AACjC,OAHD,MAGO,IAAIkC,SAAJ,EAAe;AACpBlC,QAAAA,IAAI,CAAC,cAAD,EAAiB,KAAjB,CAAJ,CADoB,CACiB;;AACrCA,QAAAA,IAAI,CAAC,aAAD,EAAgB,aAAhB,CAAJ,CAFoB,CAEiB;AACtC;;AAED,aAbmB,CAaV;AACV;;AAED,UAAMuC,eAAe;AACjB;AAAuBpB,IAAAA,QAAQ,CAAC,kBAAD,CAAT,IAAkCtF,kBAD5D;AAEA,UAAM2G,iBAAiB,GAAGC,wBAAwB,CAACF,eAAD,CAAlD,CAzEqC,CA2ErC;;AACA,UAAMG,MAAM,GAAGC,WAAW,CAACxB,QAAQ,CAAC,sBAAD,CAAT,CAA1B;AACAuB,IAAAA,MAAM,IAAI1C,IAAI,CAAC,kBAAD,EAAsB,UAAS0C,MAAO,EAAtC,CAAd,CA7EqC,CA+ErC;;AACA1C,IAAAA,IAAI,CAAC,8BAAD,EAAiCkC,SAAjC,CAAJ;AACAlC,IAAAA,IAAI,CAAC,4BAAD,EAA+BmB,QAAQ,CAAC,YAAD,CAAR,IAA0BA,QAAQ,CAAC,MAAD,CAAjE,CAAJ;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACI,aAASyB,SAAT,CAAmBC,KAAnB,EAA0BC,MAA1B,EAAkCT,WAAlC,EAA+CjC,IAA/C,EAAqD;AACnD,YAAM2C,KAAK,GAAGC,MAAM,CAACC,gBAArB;AACA,YAAMC,GAAG,GAAGC,gBAAgB,CAAC;AAACN,QAAAA,KAAK,EAAEA,KAAK,GAAGE,KAAhB;AAAuBD,QAAAA,MAAM,EAAEA,MAAM,GAAGC;AAAxC,OAAD,CAA5B;AAEAG,MAAAA,GAAG,CAACE,KAAJ,CAAUL,KAAV,EAAiBA,KAAjB;AACAG,MAAAA,GAAG,CAACG,SAAJ,GAAgBd,eAAhB;AACAW,MAAAA,GAAG,CAACI,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBT,KAAnB,EAA0BC,MAA1B;AACAI,MAAAA,GAAG,CAACK,SAAJ,CAAcV,KAAK,GAAG,CAAtB,EAAyB,CAACC,MAAM,GAAG5G,iBAAV,IAA+B,CAAxD;;AAEA,UAAIkE,IAAJ,EAAU;AACR;AACA,YAAIoD,SAAS,GAAIpD,IAAI,CAACyC,KAAL,GAAaE,KAA9B;AACA,YAAIU,UAAU,GAAIrD,IAAI,CAAC0C,MAAL,GAAcC,KAAhC;;AACA,YAAIU,UAAU,GAAGzH,mBAAjB,EAAsC;AACpC;AACAwH,UAAAA,SAAS,IAAKC,UAAU,GAAGzH,mBAA3B;AACAyH,UAAAA,UAAU,GAAGzH,mBAAb;AACD;;AAED,YAAIwH,SAAS,IAAIvH,qBAAb,IAAsCwH,UAAU,IAAIxH,qBAAxD,EAA+E;AAC7EiH,UAAAA,GAAG,CAACQ,SAAJ,CAActD,IAAd,EAAoBoD,SAAS,GAAG,CAAC,CAAjC,EAAoCC,UAAU,GAAG,CAAC,CAAlD,EAAqDD,SAArD,EAAgEC,UAAhE;AACAP,UAAAA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBE,UAAU,GAAG,CAAb,GAAiBvH,iBAAlC;AACD;AACF;;AAEDgH,MAAAA,GAAG,CAACG,SAAJ,GAAgBb,iBAAiB,GAAG,OAAH,GAAa,OAA9C;AACAU,MAAAA,GAAG,CAACS,IAAJ,GAAY,GAAE7H,qBAAsB,MAAKC,eAAgB,EAAzD,CA1BmD,CA4BnD;;AACA,YAAM6H,CAAC,GAAGC,gBAAgB,CAAC/G,UAAD,CAA1B;AACAoG,MAAAA,GAAG,CAACS,IAAJ,GAAWC,CAAC,CAACE,gBAAF,CAAmB,yBAAnB,CAAX,CA9BmD,CA8BO;;AAE1D,YAAMC,KAAK,GAAG5C,QAAQ,CAAC,MAAD,CAAR,IAAoBA,QAAQ,CAAC,YAAD,CAA5B,IAA8C/D,QAAQ,CAAC2G,KAArE;AACA,YAAMC,OAAO,GAAGd,GAAG,CAACe,WAAJ,CAAgBF,KAAhB,CAAhB;AACA,YAAMG,UAAU,GAAIF,OAAO,CAACG,uBAAR,IAAmCrI,qBAAvD;AACAoH,MAAAA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBW,UAAjB;;AAEA,UAAIF,OAAO,CAACnB,KAAR,GAAgBA,KAAK,GAAG,GAA5B,EAAiC;AAC/B;AACAK,QAAAA,GAAG,CAACkB,QAAJ,CAAaL,KAAb,EAAoBC,OAAO,CAACnB,KAAR,GAAgB,CAAC,CAArC,EAAwC,CAAxC;AACD,OAHD,MAGO;AACL;AACA,cAAMwB,KAAK,GAAGN,KAAK,CAACxD,KAAN,CAAY,MAAZ,CAAd;;AACA,aAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAImF,KAAK,CAAClF,MAA3B,EAAmC,EAAED,CAArC,EAAwC;AACtC,gBAAMoF,IAAI,GAAGD,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAerF,CAAf,EAAkBsF,IAAlB,CAAuB,GAAvB,CAAb;AACA,gBAAMC,YAAY,GAAGvB,GAAG,CAACe,WAAJ,CAAgBK,IAAhB,EAAsBzB,KAA3C;;AACA,cAAI3D,CAAC,KAAKmF,KAAK,CAAClF,MAAZ,IAAsBsF,YAAY,GAAG5B,KAAK,GAAG,GAAjD,EAAsD;AACpD;AACAK,YAAAA,GAAG,CAACkB,QAAJ,CAAaE,IAAb,EAAmBG,YAAY,GAAG,CAAC,CAAnC,EAAsC,CAAtC;AACAvB,YAAAA,GAAG,CAACK,SAAJ,CAAc,CAAd,EAAiBW,UAAU,GAAG,GAA9B;AACAG,YAAAA,KAAK,CAACK,MAAN,CAAa,CAAb,EAAgBxF,CAAhB;AACAA,YAAAA,CAAC,GAAG,CAAJ;AACD;AACF;AACF;;AAED,aAAO,MAAM;AACX,cAAMf,IAAI,GAAG+E,GAAG,CAACyB,MAAJ,CAAWC,SAAX,EAAb;;AACA,YAAIjJ,KAAJ,EAAW;AACT,gBAAMkJ,GAAG,GAAGzH,QAAQ,CAACyC,aAAT,CAAuB,KAAvB,CAAZ;AACAgF,UAAAA,GAAG,CAACjE,GAAJ,GAAUzC,IAAV;AACAf,UAAAA,QAAQ,CAAC0H,IAAT,CAAcC,MAAd,CAAqBF,GAArB;AACD;;AACDG,QAAAA,YAAY,CAAC3C,WAAD,EAAclE,IAAd,CAAZ;AACA,eAAOA,IAAP;AACD,OATD;AAUD;AAED;AACJ;AACA;AACA;;;AACI,aAAS6G,YAAT,CAAsB3C,WAAtB,EAAmClE,IAAnC,EAAyC;AACvC,YAAM8G,eAAe;AAAG;AAAiC7H,MAAAA,QAAQ,CAACyC,aAAT,CAAuB,MAAvB,CAAzD;AACAoF,MAAAA,eAAe,CAACnF,YAAhB,CAA6B,KAA7B,EAAoC,2BAApC;AACAmF,MAAAA,eAAe,CAACnF,YAAhB,CAA6B,OAA7B,EAAuC,iBAAgBuC,WAAY,GAAnE;AACA4C,MAAAA,eAAe,CAACnF,YAAhB,CAA6B,MAA7B,EAAqC3B,IAArC;AACAf,MAAAA,QAAQ,CAACC,IAAT,CAAc0C,WAAd,CAA0BkF,eAA1B;AACD,KAxKoC,CA0KrC;;;AACA,UAAMC,QAAQ,GAAG3H,KAAK,CAAC,KAAD,CAAtB;;AACA,QAAI,CAAC5B,KAAD,IAAUuJ,QAAd,EAAwB;AACtB,UAAI;AACF,cAAMC,IAAI;AAAG;AAAwC/G,QAAAA,IAAI,CAACC,KAAL,CAAW6G,QAAX,CAArD;AACAF,QAAAA,YAAY,CAAC,UAAD,EAAaG,IAAI,CAAC,GAAD,CAAjB,CAAZ;AACAH,QAAAA,YAAY,CAAC,WAAD,EAAcG,IAAI,CAAC,GAAD,CAAlB,CAAZ;AACAvD,QAAAA,eAAe,CAACwD,OAAhB,CAAyBhF,IAAD,IAAU;AAChC,gBAAMiF,MAAM,GAAGF,IAAI,CAAC,GAAD,CAAJ,CAAU/E,IAAI,CAACtC,IAAf,CAAf;;AACA,cAAIuH,MAAJ,EAAY;AACVjF,YAAAA,IAAI,CAACtC,IAAL,GAAYuH,MAAZ;AACD;AACF,SALD;AAMA;AACD,OAXD,CAWE,OAAOpI,CAAP,EAAU,CACV;AACD;AACF;;AACD,UAAMqI,MAAM,GAAG;AAAC,WAAK;AAAN,KAAf;AAEA;AACJ;AACA;AACA;;AACI,aAASC,gBAAT,CAA0BC,eAA1B,EAA2CC,IAA3C,EAAiD;AAC/C,YAAM7B,CAAC,GAAGZ,MAAM,CAAC0C,MAAjB;AACA,YAAMC,QAAQ,GAAG/C,SAAS,CAACgB,CAAC,CAACf,KAAH,EAAUe,CAAC,CAACd,MAAZ,EAAoB,UAApB,EAAgC0C,eAAhC,CAA1B;AACA,YAAMI,SAAS,GAAGhD,SAAS,CAACgB,CAAC,CAACd,MAAH,EAAWc,CAAC,CAACf,KAAb,EAAoB,WAApB,EAAiC2C,eAAjC,CAA3B,CAH+C,CAK/C;AACA;;AAEAK,MAAAA,UAAU,CAAC,MAAM;AACfP,QAAAA,MAAM,CAAC,GAAD,CAAN,GAAcK,QAAQ,EAAtB;AACAE,QAAAA,UAAU,CAAC,MAAM;AACfP,UAAAA,MAAM,CAAC,GAAD,CAAN,GAAcM,SAAS,EAAvB;AACAH,UAAAA,IAAI;AACL,SAHS,EAGP,EAHO,CAAV;AAID,OANS,EAMP,EANO,CAAV;AAOD,KAjNoC,CAmNrC;;;AACA,aAASK,oBAAT,CAA8BL,IAA9B,EAAoC;AAClC,UAAIM,IAAI,GAAGnE,eAAe,CAACzC,MAAhB,GAAyB,CAApC;;AACA,YAAMQ,KAAK,GAAG,MAAM;AAClB,YAAI,CAAC,GAAEoG,IAAP,EAAa;AACXN,UAAAA,IAAI;AACL;AACF,OAJD;;AAKA9F,MAAAA,KAAK;AACLiC,MAAAA,eAAe,CAACwD,OAAhB,CAAyBhF,IAAD,IAAU;AAChC,cAAMyE,GAAG,GAAG,IAAImB,KAAJ,EAAZ;AACAnB,QAAAA,GAAG,CAACoB,WAAJ,GAAkB,WAAlB;AACApB,QAAAA,GAAG,CAACqB,OAAJ,GAAcvG,KAAd;;AACAkF,QAAAA,GAAG,CAAC/F,MAAJ,GAAa,MAAM;AACjB+F,UAAAA,GAAG,CAAC/F,MAAJ,GAAa,IAAb;AACAsB,UAAAA,IAAI,CAACtC,IAAL,GAAYqI,iBAAiB,CAACtB,GAAD,EAAMtC,eAAN,EAAuB,IAAvB,CAA7B;AACA+C,UAAAA,MAAM,CAAC,GAAD,CAAN,CAAYT,GAAG,CAACjE,GAAhB,IAAuBR,IAAI,CAACtC,IAA5B;AACA6B,UAAAA,KAAK;AACN,SALD;;AAMAkF,QAAAA,GAAG,CAACjE,GAAJ,GAAUR,IAAI,CAACtC,IAAf;AACD,OAXD;AAYD,KAxOoC,CA0OrC;;;AACA,aAASsI,UAAT,GAAsB;AACpB7I,MAAAA,KAAK,CAAC,KAAD,EAAQa,IAAI,CAACiI,SAAL,CAAef,MAAf,CAAR,CAAL;AACD,KA7OoC,CA+OrC;;;AACA,aAASgB,uBAAT,GAAmC;AACjC,YAAMlG,IAAI,GAAGwB,eAAe,CAAC2E,KAAhB,EAAb;;AACA,UAAI,CAACnG,IAAL,EAAW;AACTmF,QAAAA,gBAAgB,CAAC,IAAD,EAAOa,UAAP,CAAhB,CADS,CAC4B;;AACrC;AACD;;AAED,YAAMvB,GAAG,GAAG,IAAImB,KAAJ,EAAZ;AACAnB,MAAAA,GAAG,CAACoB,WAAJ,GAAkB,WAAlB;;AACApB,MAAAA,GAAG,CAACqB,OAAJ,GAAc,MAAM,KAAKI,uBAAuB,EAAhD,CATiC,CASoB;;;AACrDzB,MAAAA,GAAG,CAAC/F,MAAJ,GAAa,MAAM;AACjB+F,QAAAA,GAAG,CAAC/F,MAAJ,GAAa,IAAb,CADiB,CACG;;AACpByG,QAAAA,gBAAgB,CAACV,GAAD,EAAM,MAAM;AAC1B;AACA,gBAAM2B,OAAO,GAAGrF,QAAQ,CAAC,kBAAD,CAAR,IAAgCgF,iBAAiB,CAACtB,GAAD,EAAMtC,eAAN,CAAjE;;AACA,cAAIiE,OAAJ,EAAa;AACXpG,YAAAA,IAAI,CAACtC,IAAL,GAAY0I,OAAZ;AACAlB,YAAAA,MAAM,CAAC,GAAD,CAAN,CAAYT,GAAG,CAACjE,GAAhB,IAAuB4F,OAAvB;AACAV,YAAAA,oBAAoB,CAACM,UAAD,CAApB;AACD,WAJD,MAIO;AACLA,YAAAA,UAAU;AACX;AACF,SAVe,CAAhB;AAWD,OAbD;;AAeAvB,MAAAA,GAAG,CAACjE,GAAJ,GAAUR,IAAI,CAACtC,IAAf,CAzBiC,CAyBX;AACvB;;AACDwI,IAAAA,uBAAuB;AACxB;;AAED,WAAS3D,WAAT,CAAqB8D,OAArB,EAA8B;AAC5B,QAAI/D,MAAJ;AACA,KAAC+D,OAAO,IAAI,EAAZ,EACK/E,MADL,CACagF,GAAD,IAASA,GAAG,CAAC,UAAD,CAAH,KAAoB,QADzC,EAEKtB,OAFL,CAEcsB,GAAD,IAAS;AAChB,UAAIA,GAAG,CAAC,IAAD,CAAP,EAAe;AACbhE,QAAAA,MAAM,GAAGgE,GAAG,CAAC,IAAD,CAAZ;AACD,OAFD,MAEO;AACL,cAAM/J,KAAK,GAAG+J,GAAG,CAAC,KAAD,CAAH,CAAW/J,KAAX,CAAiB,SAAjB,CAAd;;AACA,YAAIA,KAAJ,EAAW;AACT+F,UAAAA,MAAM,GAAG/F,KAAK,CAAC,CAAD,CAAd;AACD;AACF;AACF,KAXL;AAYA,WAAO+F,MAAP;AACD;;AAED,WAASJ,oBAAT,CAA8B7E,CAA9B,EAAiC;AAC/B,UAAMkJ,MAAM,GAAGC,MAAM,CAACnJ,CAAC,IAAI,EAAN,CAAN,CAAgBoJ,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B,CAAf;AACA,WAAO;AAAC,aAAO,UAAR;AAAoB,aAAO;AAA3B,MAAwCF,MAAxC,KAAmD,EAA1D;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASxE,sBAAT,CAAgC2E,KAAhC,EAAuC9E,gBAAvC,EAAyD;AACvD,QAAI,EAAExF,cAAc,IAAII,SAApB,CAAJ,EAAoC;AAClC;AACD;;AAED,UAAMmK,YAAY,GAAGtE,wBAAwB,CAACqE,KAAD,CAA7C;;AACA,QAAItK,cAAJ,EAAoB;AAClB;AACA,YAAM0D,OAAO,GAAG8B,gBAAgB,GAAG,mBAAH,GAA0B+E,YAAY,GAAG,OAAH,GAAa,SAAnF;AACA/G,MAAAA,IAAI,CAAC,uCAAD,EAA0CE,OAA1C,CAAJ;AACD,KAJD,MAIO;AACL;AACA,YAAM8G,CAAC,GAAGC,eAAe,EAAzB;;AACA,UAAI,CAACD,CAAL,EAAQ;AACN,eADM,CACG;AACV,OALI,CAML;;;AACA,YAAMvJ,CAAC,GAAGsJ,YAAY,GAAG,GAAH,GAAS,CAA/B;AACAC,MAAAA,CAAC,CAACE,eAAF;AAAoB;AAA6B;AAAC,aAAKzJ,CAAN;AAAS,aAAKA,CAAd;AAAiB,aAAKA,CAAtB;AAAyB,aAAK;AAA9B,OAAjD;AACAuJ,MAAAA,CAAC,CAACzE,eAAF,GAAoB4E,kBAAkB,CAACL,KAAD,CAAtC;AACD;AACF;AAED;AACF;AACA;;;AACE,WAASG,eAAT,GAA2B;AACzB,QAAI;AACF,aAAOpK,OAAO,CAACuK,EAAR,CAAWC,cAAX,CAA0BC,eAA1B,CAA0CC,iBAA1C,GAA8DC,QAArE;AACD,KAFD,CAEE,OAAOvK,CAAP,EAAU,CACV;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASkK,kBAAT,CAA4BL,KAA5B,EAAmC;AACjC,UAAM3I,IAAI,GAAGsJ,SAAS,CAACX,KAAD,CAAtB;AACA;AAAO;AAA6B;AAClC,aAAK3I,IAAI,CAAC,CAAD,CADyB;AAElC,aAAKA,IAAI,CAAC,CAAD,CAFyB;AAGlC,aAAKA,IAAI,CAAC,CAAD,CAHyB;AAIlC,aAAKA,IAAI,CAAC,CAAD;AAJyB;AAApC;AAMD;AAED;AACF;AACA;AACA;;;AACE,WAASsJ,SAAT,CAAmBX,KAAnB,EAA0B;AACxB,UAAMY,CAAC,GAAGvE,gBAAgB,EAA1B;AACAuE,IAAAA,CAAC,CAACrE,SAAF,GAAcyD,KAAd;AACAY,IAAAA,CAAC,CAACpE,QAAF,CAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB;AACA,WAAOoE,CAAC,CAACC,YAAF,CAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2BxJ,IAA3B,IAAmC,EAA1C,CAJwB,CAIuB;AAChD;AAED;AACF;AACA;AACA;;;AACE,WAASsE,wBAAT,CAAkCqE,KAAlC,EAAyC;AACvC,UAAMc,SAAS,GAAGH,SAAS,CAACX,KAAD,CAA3B,CADuC,CAGvC;;AACA,UAAM3I,IAAI,GAAGyJ,SAAS,CAACpH,GAAV,CAAe/C,CAAD,IAAO;AAChC,YAAMoK,CAAC,GAAGpK,CAAC,GAAG,GAAd;AACA,aAAQoK,CAAC,GAAG,OAAL,GAAgBA,CAAC,GAAG,KAApB,GAA4B9G,IAAI,CAAC+G,GAAL,CAAS,CAACD,CAAC,GAAG,KAAL,IAAc,KAAvB,EAA8B,GAA9B,CAAnC;AACD,KAHY,CAAb;AAIA,UAAME,GAAG,GAAG,SAAS5J,IAAI,CAAC,CAAD,CAAb,GAAmB,SAASA,IAAI,CAAC,CAAD,CAAhC,GAAsC,SAASA,IAAI,CAAC,CAAD,CAA/D;AACA,UAAM6J,QAAQ,GAAGjH,IAAI,CAACkH,GAAL,CAAU,IAAD,IAAUF,GAAG,GAAG,IAAhB,CAAT,CAAjB;AACA,WAAOC,QAAQ,GAAG,CAAlB;AACD;;AAED,WAAS7B,iBAAT,CAA2B+B,KAA3B,EAAkCC,UAAlC,EAA8CC,KAAK,GAAC,KAApD,EAA2D;AACzD,UAAMC,OAAO,GAAGlF,gBAAgB,CAAC+E,KAAD,CAAhC;AACAG,IAAAA,OAAO,CAAC3E,SAAR,CAAkBwE,KAAlB,EAAyB,CAAzB,EAA4B,CAA5B,EAFyD,CAIzD;AACA;;AACA,QAAI,CAACE,KAAL,EAAY;AACV,YAAME,SAAS,GAAGD,OAAO,CAACV,YAAR,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAlB;;AACA,UAAIW,SAAS,CAACnK,IAAV,CAAe,CAAf,MAAsB,GAA1B,EAA+B;AAC7B;AACD;AACF;;AAEDkK,IAAAA,OAAO,CAACE,wBAAR,GAAmC,kBAAnC,CAbyD,CAaD;;AACxDF,IAAAA,OAAO,CAAChF,SAAR,GAAoB8E,UAApB;AACAE,IAAAA,OAAO,CAAC/E,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB4E,KAAK,CAACrF,KAA7B,EAAoCqF,KAAK,CAACpF,MAA1C;AACA,WAAOuF,OAAO,CAAC1D,MAAR,CAAeC,SAAf,EAAP;AACD;;AAED,WAASzB,gBAAT,CAA0B;AAACN,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAkB;AAACD,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,MAAM,EAAE;AAAnB,GAA5C,EAAmE;AACjE,UAAM6B,MAAM,GAAGvH,QAAQ,CAACyC,aAAT,CAAuB,QAAvB,CAAf;AACA8E,IAAAA,MAAM,CAAC9B,KAAP,GAAeA,KAAf;AACA8B,IAAAA,MAAM,CAAC7B,MAAP,GAAgBA,MAAhB;AACA,WAAO6B,MAAM,CAAC6D,UAAP,CAAkB,IAAlB,CAAP;AACD,GAljBS,CAojBV;;;AACA,MAAIpL,QAAQ,CAACqL,UAAT,KAAwB,UAA5B,EAAwC;AACtC7K,IAAAA,KAAK;AACN,GAFD,MAEO;AACLoF,IAAAA,MAAM,CAAC0F,gBAAP,CAAwB,MAAxB,EAAgC9K,KAAhC;AACD;AACF,CA1jBA,GAAD","sourcesContent":["/*\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n'use strict';\n\n// WARNING\n// Don't use this file directly in production! Please include `pwacompat.min.js`!\n// WARNING\n/**\n * @suppress {uselessCode}\n */\nfunction unused() {\n  // compiled out, but crashes IE11 early rather than within the code\n  `Please don't use this file directly: include pwacompat.min.js instead!`;\n}\n\n(function() {\n  // basic feature detection: from IE10+\n  // also fallout on 'navigator.standalone', we _are_ an iOS PWA\n  if (!('onload' in XMLHttpRequest.prototype) || navigator.standalone) {\n    return;\n  }\n\n  const debug = false;\n\n  const capableDisplayModes = ['standalone', 'fullscreen', 'minimal-ui'];\n  const defaultSplashColor = '#f8f9fa';\n  const defaultSplashTextSize = 24;\n  const defaultFontName = 'HelveticaNeue-CondensedBold';\n  const idealSplashIconSize = 128;\n  const minimumSplashIconSize = 48;\n  const splashIconPadding = 20;\n  const appleIconSizeMin = 120;\n\n  const userAgent = navigator.userAgent || '';\n  const isSafari = (navigator.vendor && navigator.vendor.indexOf('Apple') !== -1);\n  const isSafariMobile = isSafari && (userAgent.indexOf('Mobile/') !== -1 || 'standalone' in navigator) || debug;\n  const isIEOrEdge = Boolean(userAgent.match(/(MSIE |Edge\\/|Trident\\/)/));\n  const isEdgePWA = (typeof Windows !== 'undefined');\n\n  let manifestEl;  // we need this later, not just for JSON\n  let internalStorage;\n  try {\n    internalStorage = sessionStorage;\n  } catch (e) {}\n  internalStorage = internalStorage || {};\n\n  /**\n   * Retrieves element in head if available, otherwise null\n   * @param {string} selector CSS selector\n   * @return {?Element}\n   */\n  function getElementInHead(selector) {\n    // It's possible to pass \"bad\" attr or values here (originally from the manifest); just\n    // return null if there's something wrong.\n    try {\n      return document.head.querySelector(selector);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @param {string} k\n   * @param {string=} v\n   * @return {string|undefined}\n   */\n  function store(k, v) {\n    const key = '__pwacompat_' + k;\n    if (v !== undefined) {\n      internalStorage[key] = v;\n    }\n    return internalStorage[key];\n  }\n\n  function setup() {\n    manifestEl = getElementInHead('link[rel=\"manifest\"]');\n    const manifestHref = manifestEl ? manifestEl.href : '';\n    if (!manifestHref) {\n      throw `can't find <link rel=\"manifest\" href=\"..\" />'`;\n    }\n\n    const hrefFactory = buildHrefFactory([manifestHref, location]);\n    const storedResponse = store('manifest');\n    if (storedResponse) {\n      try {\n        const data = /** @type {!Object<string, *>} */ (JSON.parse(storedResponse));\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n      return;\n    }\n\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', manifestHref);\n\n    // nb. use getAttribute for older brower safety\n    xhr.withCredentials = (manifestEl.getAttribute('crossorigin') === 'use-credentials');\n\n    // this is IE10+\n    xhr.onload = () => {\n      try {\n        const data = /** @type {!Object<string, *>} */ (JSON.parse(xhr.responseText));\n        store('manifest', xhr.responseText);\n        process(data, hrefFactory);\n      } catch (err) {\n        console.warn('PWACompat error', err);\n      }\n    };\n    xhr.send(null);\n  }\n\n  /**\n   * @param {!Array<string>} options\n   * @return {function(string): string}\n   */\n  function buildHrefFactory(options) {\n    for (let i = 0; i < options.length; ++i) {\n      const opt = options[i];\n      try {\n        new URL('', opt);\n        return (part) => (new URL(part || '', opt)).toString();\n      } catch (e) {}\n    }\n    return (part) => part || '';\n  }\n\n  /**\n   * Adds an element in the <head> if it's not present already based on the passed check.\n   * @param {string} localName tag name\n   * @param {!Object<string>} attr key-value collection of attributes\n   * @param {string} check to apply to the tag\n   */\n  function push(localName, attr, check) {\n    if (getElementInHead(localName + check)) {\n      return;\n    }\n    const node = document.createElement(localName);\n    for (const k in attr) {\n      node.setAttribute(k, attr[k]);\n    }\n    document.head.appendChild(node);\n    return node;\n  }\n\n  function meta(name, content) {\n    if (content) {\n      if (content === true) {\n        content = 'yes';\n      }\n      push('meta', {name, content}, `[name=\"${name}\"]`);\n    }\n  }\n\n  /**\n   * Pre-process the icon sizes and purpose into a tuple and array.\n   */\n  function normalizeIcon(icon) {\n    const parsedSizes = icon.sizes.split(/\\s+/g).map((size) => {\n      if (size === 'any') {\n        return Infinity;\n      }\n      return parseInt(size, 10) || 0; // NaN is falsey\n    });\n\n    return {\n      src: icon.src,\n      type: icon.type,\n      sizes: icon.sizes,\n      // Get the largest size from a processed icon.\n      largestSize: Math.max.apply(null, parsedSizes),\n      purpose: icon.purpose ? icon.purpose.split(/\\s+/g) : ['any'],\n    };\n  }\n\n  /**\n   * @param {!Object<string, (string|*)>} manifest\n   * @param {function(string): string} urlFactory\n   */\n  function process(manifest, urlFactory) {\n    // largest first\n    const allIcons = (manifest['icons'] || [])\n      .map(normalizeIcon)\n      .sort((a, b) => b.largestSize - a.largestSize);\n\n    const icons = allIcons.filter((icon) => icon.purpose.indexOf('any') > -1)\n    const maskable = allIcons.filter((icon) => icon.purpose.indexOf('maskable') > -1);\n\n    const appleTouchIcons = (maskable.length > 0 ? maskable : icons).map((icon) => {\n      // create regular link icons as byproduct\n      const attr = {'rel': 'icon', 'href': urlFactory(icon['src']), 'sizes': icon['sizes']};\n      // This checks for matching \"rel\" and \"sizes\". We don't check for the same image file, as\n      // it is used literally by ourselves (and could be set by users for another icon).\n      const querySuffix = `[sizes=\"${icon['sizes']}\"]`;\n      push('link', attr, '[rel=\"icon\"]' + querySuffix);\n      if (!isSafariMobile) {\n        return;\n      }\n      if (icon.largestSize < appleIconSizeMin) {\n        return;\n      }\n      attr['rel'] = 'apple-touch-icon';\n\n      // nb. we used to call `removeAttribute('sizes')` here, which crashed iOS 8\n      // ... sizes has been supported since iOS 4.2 (!)\n      return push('link', attr, '[rel=\"apple-touch-icon\"]' + querySuffix);\n    }).filter(Boolean);\n\n    // nb. only for iOS, but watch for future CSS rule `@viewport { viewport-fit: cover; }`\n    const metaViewport = getElementInHead('meta[name=\"viewport\"]');\n    const viewport = metaViewport && metaViewport.content || '';\n    const viewportFitCover = Boolean(viewport.match(/\\bviewport-fit\\s*=\\s*cover\\b/));\n\n    const display = manifest['display'];\n    const isCapable = capableDisplayModes.indexOf(display) !== -1;\n    meta('mobile-web-app-capable', isCapable);\n    updateThemeColorRender(/** @type {string} */ (manifest['theme_color']) || 'black', viewportFitCover);\n\n    if (isIEOrEdge) {\n      // Pinned Sites, largely from https://technet.microsoft.com/en-us/windows/dn255024(v=vs.60)\n      meta('application-name', manifest['short_name']);\n      meta('msapplication-tooltip', manifest['description']);\n      meta('msapplication-starturl', urlFactory(/** @type {string} */ (manifest['start_url']) || '.'));\n      meta('msapplication-navbutton-color', manifest['theme_color']);\n\n      const largest = icons[0];\n      if (largest) {\n        meta('msapplication-TileImage', urlFactory(largest['src']));\n      }\n      meta('msapplication-TileColor', manifest['background_color']);\n    }\n\n    meta('theme-color', manifest['theme_color']);\n\n    if (!isSafariMobile) {\n      // TODO(samthor): We don't detect QQ or UC, we just set the vars anyway.\n      const orientation = simpleOrientationFor(manifest['orientation']);\n      meta('x5-orientation', orientation);      // QQ\n      meta('screen-orientation', orientation);  // UC\n      if (display === 'fullscreen') {\n        meta('x5-fullscreen', 'true');  // QQ\n        meta('full-screen', 'yes');     // UC\n      } else if (isCapable) {\n        meta('x5-page-mode', 'app');         // QQ\n        meta('browsermode', 'application');  // UC\n      }\n\n      return;  // the rest of this file is for Mobile Safari\n    }\n\n    const backgroundColor =\n        /** @type {string} */ (manifest['background_color']) || defaultSplashColor;\n    const backgroundIsLight = shouldUseLightForeground(backgroundColor);\n\n    // Add related iTunes app from manifest.\n    const itunes = findAppleId(manifest['related_applications']);\n    itunes && meta('apple-itunes-app', `app-id=${itunes}`);\n\n    // General iOS meta tags.\n    meta('apple-mobile-web-app-capable', isCapable);\n    meta('apple-mobile-web-app-title', manifest['short_name'] || manifest['name']);\n\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {string} orientation\n     * @param {?Image} icon\n     * @return {function(): string}\n     */\n    function splashFor(width, height, orientation, icon) {\n      const ratio = window.devicePixelRatio;\n      const ctx = contextForCanvas({width: width * ratio, height: height * ratio});\n\n      ctx.scale(ratio, ratio);\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(0, 0, width, height);\n      ctx.translate(width / 2, (height - splashIconPadding) / 2);\n\n      if (icon) {\n        // nb: on Chrome, we need the image >=48px, use the big layout >=80dp, ideal is >=128dp\n        let iconWidth = (icon.width / ratio);\n        let iconHeight = (icon.height / ratio);\n        if (iconHeight > idealSplashIconSize) {\n          // clamp to 128px height max\n          iconWidth /= (iconHeight / idealSplashIconSize);\n          iconHeight = idealSplashIconSize;\n        }\n\n        if (iconWidth >= minimumSplashIconSize && iconHeight >= minimumSplashIconSize) {\n          ctx.drawImage(icon, iconWidth / -2, iconHeight / -2, iconWidth, iconHeight);\n          ctx.translate(0, iconHeight / 2 + splashIconPadding);\n        }\n      }\n\n      ctx.fillStyle = backgroundIsLight ? 'white' : 'black';\n      ctx.font = `${defaultSplashTextSize}px ${defaultFontName}`;\n\n      // Set the user-requested font; if it's invalid, the set will fail.\n      const s = getComputedStyle(manifestEl);\n      ctx.font = s.getPropertyValue('--pwacompat-splash-font'); // blank for old browsers\n\n      const title = manifest['name'] || manifest['short_name'] || document.title;\n      const measure = ctx.measureText(title);\n      const textHeight = (measure.actualBoundingBoxAscent || defaultSplashTextSize);\n      ctx.translate(0, textHeight);\n\n      if (measure.width < width * 0.8) {\n        // short-circuit, just draw entire string\n        ctx.fillText(title, measure.width / -2, 0);\n      } else {\n        // longer wrap case, draw once we have >0.7 width accumulated\n        const words = title.split(/\\s+/g);\n        for (let i = 1; i <= words.length; ++i) {\n          const cand = words.slice(0, i).join(' ');\n          const measureWidth = ctx.measureText(cand).width;\n          if (i === words.length || measureWidth > width * 0.6) {\n            // render accumulated words\n            ctx.fillText(cand, measureWidth / -2, 0);\n            ctx.translate(0, textHeight * 1.2);\n            words.splice(0, i);\n            i = 0;\n          }\n        }\n      }\n\n      return () => {\n        const data = ctx.canvas.toDataURL();\n        if (debug) {\n          const img = document.createElement('img');\n          img.src = data;\n          document.body.append(img);\n        }\n        appendSplash(orientation, data);\n        return data;\n      };\n    }\n\n    /**\n     * @param {string} orientation\n     * @param {string} data\n     */\n    function appendSplash(orientation, data) {\n      const generatedSplash = /** @type {!HTMLLinkElement} */ (document.createElement('link'));\n      generatedSplash.setAttribute('rel', 'apple-touch-startup-image');\n      generatedSplash.setAttribute('media', `(orientation: ${orientation})`);\n      generatedSplash.setAttribute('href', data);\n      document.head.appendChild(generatedSplash);\n    }\n\n    // fetch previous (session) iOS image updates\n    const rendered = store('iOS');\n    if (!debug && rendered) {\n      try {\n        const prev = /** @type {!Object<string, string>} */ (JSON.parse(rendered));\n        appendSplash('portrait', prev['p']);\n        appendSplash('landscape', prev['l']);\n        appleTouchIcons.forEach((icon) => {\n          const change = prev['i'][icon.href];\n          if (change) {\n            icon.href = change;\n          }\n        });\n        return;\n      } catch (e) {\n        // ignore, some problem with the JSON\n      }\n    }\n    const update = {'i': {}};\n\n    /**\n     * @param {?Image} applicationIcon\n     * @param {function(): void} done\n     */\n    function renderBothSplash(applicationIcon, done) {\n      const s = window.screen;\n      const portrait = splashFor(s.width, s.height, 'portrait', applicationIcon);\n      const landscape = splashFor(s.height, s.width, 'landscape', applicationIcon);\n\n      // this is particularly egregious setTimeout use, but the .toDataURL() is one of the\n      // \"bottlenecks\" of PWACompat, so don't elongate any single frame more than needed.\n\n      setTimeout(() => {\n        update['p'] = portrait();\n        setTimeout(() => {\n          update['l'] = landscape();\n          done();\n        }, 10);\n      }, 10);\n    }\n\n    // fetches and redraws any remaining icons in appleTouchIcons (to have proper bg)\n    function redrawRemainingIcons(done) {\n      let left = appleTouchIcons.length + 1;\n      const check = () => {\n        if (!--left) {\n          done();\n        }\n      };\n      check();\n      appleTouchIcons.forEach((icon) => {\n        const img = new Image();\n        img.crossOrigin = 'anonymous';\n        img.onerror = check;\n        img.onload = () => {\n          img.onload = null;\n          icon.href = updateTransparent(img, backgroundColor, true);\n          update['i'][img.src] = icon.href;\n          check();\n        };\n        img.src = icon.href;\n      });\n    }\n\n    // write the update to sessionStorage\n    function saveUpdate() {\n      store('iOS', JSON.stringify(update));\n    }\n\n    // called repeatedly until a valid icon is found\n    function fetchIconAndBuildSplash() {\n      const icon = appleTouchIcons.shift();\n      if (!icon) {\n        renderBothSplash(null, saveUpdate);  // ran out of icons, render without one\n        return;\n      }\n\n      const img = new Image();\n      img.crossOrigin = 'anonymous';\n      img.onerror = () => void fetchIconAndBuildSplash();  // try again\n      img.onload = () => {\n        img.onload = null;  // iOS Safari might call this many times\n        renderBothSplash(img, () => {\n          // ... if the icon used for splash changed, redraw others too\n          const redrawn = manifest['background_color'] && updateTransparent(img, backgroundColor);\n          if (redrawn) {\n            icon.href = redrawn;\n            update['i'][img.src] = redrawn;\n            redrawRemainingIcons(saveUpdate);\n          } else {\n            saveUpdate();\n          }\n        });\n      };\n\n      img.src = icon.href;  // trigger load\n    }\n    fetchIconAndBuildSplash();\n  }\n\n  function findAppleId(related) {\n    let itunes;\n    (related || [])\n        .filter((app) => app['platform'] === 'itunes')\n        .forEach((app) => {\n          if (app['id']) {\n            itunes = app['id'];\n          } else {\n            const match = app['url'].match(/id(\\d+)/);\n            if (match) {\n              itunes = match[1];\n            }\n          }\n        });\n    return itunes;\n  }\n\n  function simpleOrientationFor(v) {\n    const prefix = String(v || '').substr(0, 3);\n    return {'por': 'portrait', 'lan': 'landscape'}[prefix] || '';\n  }\n\n  /**\n   * @param {string} color\n   * @param {boolean} viewportFitCover\n   */\n  function updateThemeColorRender(color, viewportFitCover) {\n    if (!(isSafariMobile || isEdgePWA)) {\n      return;\n    }\n\n    const themeIsLight = shouldUseLightForeground(color);\n    if (isSafariMobile) {\n      // nb. Safari 11.3+ gives a deprecation warning about this meta tag.\n      const content = viewportFitCover ? 'black-translucent' : (themeIsLight ? 'black' : 'default');\n      meta('apple-mobile-web-app-status-bar-style', content);\n    } else {\n      // Edge PWA\n      const t = getEdgeTitleBar();\n      if (!t) {\n        return;  // something went wrong, we had a UWP without titleBar\n      }\n      // Foreground is black if theme is light, otherwise white.\n      const v = themeIsLight ? 255 : 0;\n      t.foregroundColor = /** @type {WindowsColor} */ ({'r': v, 'g': v, 'b': v, 'a': 255});\n      t.backgroundColor = colorToWindowsRGBA(color);\n    }\n  }\n\n  /**\n   * @return {!ApplicationViewTitleBar|undefined}\n   */\n  function getEdgeTitleBar() {\n    try {\n      return Windows.UI.ViewManagement.ApplicationView.getForCurrentView().titleBar;\n    } catch (e) {\n      // implicit return undefined\n    }\n  }\n\n  /**\n   * The Windows titlebar APIs expect an object of {r, g, b, a}.\n   *\n   * @param {string} color\n   * @return {WindowsColor}\n   */\n  function colorToWindowsRGBA(color) {\n    const data = readColor(color);\n    return /** @type {WindowsColor} */ ({\n      'r': data[0],\n      'g': data[1],\n      'b': data[2],\n      'a': data[3],\n    });\n  }\n\n  /**\n   * @param {string} color\n   * @return {!Uint8ClampedArray}\n   */\n  function readColor(color) {\n    const c = contextForCanvas();\n    c.fillStyle = color;\n    c.fillRect(0, 0, 1, 1);\n    return c.getImageData(0, 0, 1, 1).data || [];  // incase this fails for some reason\n  }\n\n  /**\n   * @param {string} color\n   * @return {boolean}\n   */\n  function shouldUseLightForeground(color) {\n    const pixelData = readColor(color);\n\n    // From https://cs.chromium.org/chromium/src/chrome/android/java/src/org/chromium/chrome/browser/util/ColorUtils.java\n    const data = pixelData.map((v) => {\n      const f = v / 255;\n      return (f < 0.03928) ? f / 12.92 : Math.pow((f + 0.055) / 1.055, 2.4);\n    });\n    const lum = 0.2126 * data[0] + 0.7152 * data[1] + 0.0722 * data[2];\n    const contrast = Math.abs((1.05) / (lum + 0.05));\n    return contrast > 3;\n  }\n\n  function updateTransparent(image, background, force=false) {\n    const context = contextForCanvas(image);\n    context.drawImage(image, 0, 0);\n\n    // look for transparent pixel in top-left\n    // TODO: Chrome actually checks the four corners for some cases.\n    if (!force) {\n      const imageData = context.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] === 255) {\n        return;\n      }\n    }\n\n    context.globalCompositeOperation = 'destination-over';  // only replace transparent areas\n    context.fillStyle = background;\n    context.fillRect(0, 0, image.width, image.height);\n    return context.canvas.toDataURL();\n  }\n\n  function contextForCanvas({width, height} = {width: 1, height: 1}) {\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    return canvas.getContext('2d');\n  }\n\n  // actually run PWACompat here\n  if (document.readyState === 'complete') {\n    setup();\n  } else {\n    window.addEventListener('load', setup);\n  }\n}());\n"]},"metadata":{},"sourceType":"script"}